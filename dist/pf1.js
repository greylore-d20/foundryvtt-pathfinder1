/*! For license information please see pf1.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("pf1",[],e):"object"==typeof exports?exports.pf1=e():t.pf1=e()}(window,(function(){return function(t){var e={};function n(a){if(e[a])return e[a].exports;var i=e[a]={i:a,l:!1,exports:{}};return t[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(a,i,function(e){return t[e]}.bind(null,i));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="systems/pf1/dist/",n(n.s="./pf1.js")}({"./module/actor/entity.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorPF", function() { return ActorPF; });\n/* harmony import */ var _dice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dice.js */ "./module/dice.js");\n/* harmony import */ var _item_entity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../item/entity.js */ "./module/item/entity.js");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib.js */ "./module/lib.js");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chat.js */ "./module/chat.js");\n/* harmony import */ var _combat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../combat.js */ "./module/combat.js");\n/* harmony import */ var _misc_links_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../misc/links.js */ "./module/misc/links.js");\n\n\n\n\n\n\n\n/**\n * Extend the base Actor class to implement additional logic specialized for D&D5e.\n */\nclass ActorPF extends Actor {\n\n  /* -------------------------------------------- */\n\n  static chatListeners(html) {\n    html.on(\'click\', \'button[data-action]\', this._onChatCardButtonAction.bind(this));\n  }\n\n  static async _onChatCardButtonAction(event) {\n    event.preventDefault();\n\n    // Extract card data\n    const button = event.currentTarget;\n    const card = button.closest(".chat-card");\n    const action = button.dataset.action;\n\n    // Roll saving throw\n    if (action === "defense-save") {\n      const actor = _item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"]._getChatCardActor(card);\n      const saveId = button.dataset.save;\n      if (actor) actor.rollSavingThrow(saveId, { event: event });\n    }\n    else if (action === "save") {\n      const actor = ActorPF.getActiveActor()\n      const saveId = button.dataset.type;\n      if (actor) actor.rollSavingThrow(saveId, { event: event });\n    }\n  }\n\n  static getActiveActor({actorName=null, actorId=null}={}) {\n    const speaker = ChatMessage.getSpeaker();\n    let actor = game.actors.entities.filter(o => {\n      if (!actorName && !actorId) return false;\n      if (actorName && o.name !== actorName) return false;\n      if (actorId && o._id !== actorId) return false;\n      return true;\n    })[0];\n    if (speaker.token && !actor) actor = game.actors.tokens[speaker.token];\n    if (!actor) actor = game.actors.get(speaker.actor);\n    return actor;\n  }\n\n  /* -------------------------------------------- */\n\n  get spellFailure() {\n    return this.items.filter(o => { return o.type === "equipment" && o.data.data.equipped === true; }).reduce((cur, o) => {\n      if (typeof o.data.data.spellFailure === "number") return cur + o.data.data.spellFailure;\n      return cur;\n    }, 0);\n  }\n\n  get race() {\n    if (this.items == null) return null;\n    return this.items.filter(o => o.type === "race")[0];\n  }\n\n  get typeColor() {\n    return "#FDE600";\n  }\n\n  static _translateSourceInfo(type, subtype, name) {\n    let result = "";\n    if (type === "size") result = "Size";\n    if (type === "buff") {\n      result = "Buffs";\n      if (subtype === "temp") result = "Temporary Buffs";\n      if (subtype === "perm") result = "Permanent Buffs";\n      if (subtype === "item") result = "Item Buffs";\n      if (subtype === "misc") result = "Misc Buffs";\n    }\n    if (type === "equipment") result = "Equipment";\n    if (type === "weapon") result = "Weapons";\n    if (type === "feat") {\n      result = "Feats";\n      if (subtype === "classFeat") result = "Class Features";\n      if (subtype === "trait") result = "Traits";\n      if (subtype === "racial") result = "Racial Traits";\n      if (subtype === "misc") result = "Misc Features";\n    }\n    if (type === "race") {\n      result = "Race";\n    }\n\n    if (!name || name.length === 0) return result;\n    if (result === "") return name;\n    return `${result} (${name})`;\n  }\n\n  static _getChangeItemSubtype(item) {\n    if (item.type === "buff") return item.data.buffType;\n    if (item.type === "feat") return item.data.featType;\n    return "";\n  }\n\n  static _blacklistChangeData(data, changeTarget) {\n    let result = duplicate(data);\n\n    switch (changeTarget) {\n      case "mhp":\n        result.attributes.hp = null;\n        result.skills = null;\n        break;\n      case "wounds":\n        result.attributes.wounds = null;\n        result.skills = null;\n        break;\n      case "vigor":\n        result.attributes.vigor = null;\n        result.skills = null;\n        break;\n      case "str":\n        result.abilities.str = null;\n        result.skills = null;\n        result.attributes.savingThrows = null;\n      case "con":\n        result.abilities.con = null;\n        result.attributes.hp = null;\n        result.attributes.wounds = null;\n        result.skills = null;\n        result.attributes.savingThrows = null;\n        break;\n      case "dex":\n        result.abilities.dex = null;\n        result.attributes.ac = null;\n        result.skills = null;\n        result.attributes.savingThrows = null;\n        break;\n      case "int":\n        result.abilities.int = null;\n        result.skills = null;\n        result.attributes.savingThrows = null;\n        break;\n      case "wis":\n        result.abilities.wis = null;\n        result.skills = null;\n        result.attributes.savingThrows = null;\n        break;\n      case "cha":\n        result.abilities.cha = null;\n        result.skills = null;\n        result.attributes.savingThrows = null;\n        break;\n      case "ac":\n      case "aac":\n      case "sac":\n      case "nac":\n        result.attributes.ac = null;\n        break;\n      case "attack":\n      case "mattack":\n      case "rattack":\n        result.attributes.attack = null;\n        break;\n      case "damage":\n      case "wdamage":\n      case "sdamage":\n        result.attributes.damage = null;\n        break;\n      case "allSavingThrows":\n      case "fort":\n      case "ref":\n      case "will":\n        result.attributes.savingThrows = null;\n        break;\n      case "skills":\n      case "strSkills":\n      case "dexSkills":\n      case "conSkills":\n      case "intSkills":\n      case "wisSkills":\n      case "chaSkills":\n        result.skills = null;\n        break;\n      case "cmb":\n        result.attributes.cmb = null;\n        break;\n      case "cmd":\n        result.attributes.cmd = null;\n        break;\n      case "init":\n        result.attributes.init = null;\n        break;\n    }\n\n    if (changeTarget.match(/^data\\.skills/)) {\n      result.skills = null;\n    }\n\n    return result;\n  }\n\n  get _sortChangePriority() {\n    const skillTargets = this._skillTargets;\n    return { targets: [\n      "ability", "misc", "ac", "attack", "damage", "savingThrows", "skills", "skill"\n    ], types: [\n        "str", "dex", "con", "int", "wis", "cha",\n        "skills", "strSkills", "dexSkills", "conSkills", "intSkills", "wisSkills", "chaSkills", ...skillTargets,\n        "allChecks", "strChecks", "dexChecks", "conChecks", "intChecks", "wisChecks", "chaChecks",\n        "allSpeeds", "landSpeed", "climbSpeed", "swimSpeed", "burrowSpeed", "flySpeed",\n        "ac", "aac", "sac", "nac",\n        "attack", "mattack", "rattack",\n        "damage", "wdamage", "sdamage",\n        "allSavingThrows", "fort", "ref", "will",\n        "cmb", "cmd", "init", "mhp", "wounds", "vigor"\n    ], modifiers: [\n      "untyped", "base", "enh", "dodge", "inherent", "deflection",\n      "morale", "luck", "sacred", "insight", "resist", "profane",\n      "trait", "racial", "size", "competence", "circumstance",\n      "alchemical", "penalty"\n    ]};\n  }\n\n  get _skillTargets() {\n    let skills = [];\n    let subSkills = [];\n    for (let [sklKey, skl] of Object.entries(this.data.data.skills)) {\n      if (skl == null) continue;\n      if (skl.subSkills != null) {\n        for (let subSklKey of Object.keys(skl.subSkills)) {\n          subSkills.push(`skill.${sklKey}.subSkills.${subSklKey}`);\n        }\n      }\n      else skills.push(`skill.${sklKey}`);\n    }\n    return [...skills, ...subSkills];\n  }\n\n  _sortChanges(a, b) {\n    const priority = this._sortChangePriority;\n    const targetA = priority.targets.indexOf(a.raw.target);\n    const targetB = priority.targets.indexOf(b.raw.target);\n    const typeA = priority.types.indexOf(a.raw.subTarget);\n    const typeB = priority.types.indexOf(b.raw.subTarget);\n    const modA = priority.modifiers.indexOf(a.raw.modifier);\n    const modB = priority.modifiers.indexOf(b.raw.modifier);\n    let prioA = (typeof a.raw.priority === "string") ? parseInt(a.raw.priority) : a.raw.priority;\n    let prioB = (typeof b.raw.priority === "string") ? parseInt(b.raw.priority) : b.raw.priority;\n    prioA = (prioA || 0) + 1000;\n    prioB = (prioB || 0) + 1000;\n\n    return targetA - targetB || typeA - typeB || prioB - prioA || modA - modB;\n  }\n\n  _parseChange(change, changeData, flags) {\n    if (flags == null) flags = {};\n    const changeType = change.raw.modifier;\n    const changeValue = change.raw.value;\n\n    if (!changeData[changeType]) return;\n    if (changeValue === 0) return;\n    if (flags.loseDexToAC && changeType === "dodge") return;\n\n    change.source.value = changeValue;\n\n    const prevValue = { positive: changeData[changeType].positive.value, negative: changeData[changeType].negative.value };\n    // Add value\n    if (changeValue > 0) {\n      if (["untyped", "dodge", "penalty"].includes(changeType)) changeData[changeType].positive.value += changeValue;\n      else {\n        changeData[changeType].positive.value = Math.max(changeData[changeType].positive.value, changeValue);\n      }\n    }\n    else {\n      if (["untyped", "dodge", "penalty"].includes(changeType)) changeData[changeType].negative.value += changeValue;\n      else changeData[changeType].negative.value = Math.min(changeData[changeType].negative.value, changeValue);\n    }\n\n    // Add positive source\n    if (changeValue > 0) {\n      if (["untyped", "dodge", "penalty"].includes(changeType)) {\n        changeData[changeType].positive.sources.push(change.source);\n      }\n      else if (prevValue.positive < changeValue) {\n        changeData[changeType].positive.sources = [change.source];\n      }\n    }\n    // Add negative source\n    else {\n      if (["untyped", "dodge", "penalty"].includes(changeType)) {\n        changeData[changeType].negative.sources.push(change.source);\n      }\n      else if (prevValue.negative > changeValue) {\n        changeData[changeType].negative.sources = [change.source];\n      }\n    }\n  }\n\n  _getChangeFlat(changeTarget, changeType, curData) {\n    if (curData == null) curData = this.data.data;\n    let result = [];\n\n    switch(changeTarget) {\n      case "mhp":\n        return "data.attributes.hp.max";\n      case "wounds":\n        return "data.attributes.wounds.max";\n      case "vigor":\n        return "data.attributes.vigor.max";\n      case "str":\n        if (changeType === "penalty") return "data.abilities.str.penalty";\n        return "data.abilities.str.total";\n      case "dex":\n        if (changeType === "penalty") return "data.abilities.dex.penalty";\n        return "data.abilities.dex.total";\n      case "con":\n        if (changeType === "penalty") return "data.abilities.con.penalty";\n        return "data.abilities.con.total";\n      case "int":\n        if (changeType === "penalty") return "data.abilities.int.penalty";\n        return "data.abilities.int.total";\n      case "wis":\n        if (changeType === "penalty") return "data.abilities.wis.penalty";\n        return "data.abilities.wis.total";\n      case "cha":\n        if (changeType === "penalty") return "data.abilities.cha.penalty";\n        return "data.abilities.cha.total";\n      case "ac":\n        if (changeType === "dodge") return ["data.attributes.ac.normal.total", "data.attributes.ac.touch.total", "data.attributes.cmd.total"];\n        else if (changeType === "deflection") {\n          return ["data.attributes.ac.normal.total", "data.attributes.ac.touch.total",\n          "data.attributes.ac.flatFooted.total", "data.attributes.cmd.total", "data.attributes.cmd.flatFootedTotal"];\n        }\n        return ["data.attributes.ac.normal.total", "data.attributes.ac.touch.total", "data.attributes.ac.flatFooted.total"];\n      case "aac":\n      case "sac":\n      case "nac":\n        return ["data.attributes.ac.normal.total", "data.attributes.ac.flatFooted.total"];\n      case "attack":\n        return "data.attributes.attack.general";\n      case "mattack":\n        return "data.attributes.attack.melee";\n      case "rattack":\n        return "data.attributes.attack.ranged";\n      case "damage":\n        return "data.attributes.damage.general";\n      case "wdamage":\n        return "data.attributes.damage.weapon";\n      case "sdamage":\n        return "data.attributes.damage.spell";\n      case "allSavingThrows":\n        return ["data.attributes.savingThrows.fort.total", "data.attributes.savingThrows.ref.total", "data.attributes.savingThrows.will.total"];\n      case "fort":\n        return "data.attributes.savingThrows.fort.total";\n      case "ref":\n        return "data.attributes.savingThrows.ref.total";\n      case "will":\n        return "data.attributes.savingThrows.will.total";\n      case "skills":\n        for (let [a, skl] of Object.entries(curData.skills)) {\n          if (skl == null) continue;\n          result.push(`data.skills.${a}.changeBonus`);\n\n          if (skl.subSkills != null) {\n            for (let b of Object.keys(skl.subSkills)) {\n              result.push(`data.skills.${a}.subSkills.${b}.changeBonus`);\n            }\n          }\n        }\n        return result;\n      case "strSkills":\n        for (let [a, skl] of Object.entries(curData.skills)) {\n          if (skl == null) continue;\n          if (skl.ability === "str") result.push(`data.skills.${a}.changeBonus`);\n\n          if (skl.subSkills != null) {\n            for (let [b, subSkl] of Object.entries(skl.subSkills)) {\n              if (subSkl != null && subSkl.ability === "str") result.push(`data.skills.${a}.subSkills.${b}.changeBonus`);\n            }\n          }\n        }\n        return result;\n      case "dexSkills":\n        for (let [a, skl] of Object.entries(curData.skills)) {\n          if (skl == null) continue;\n          if (skl.ability === "dex") result.push(`data.skills.${a}.changeBonus`);\n\n          if (skl.subSkills != null) {\n            for (let [b, subSkl] of Object.entries(skl.subSkills)) {\n              if (subSkl != null && subSkl.ability === "dex") result.push(`data.skills.${a}.subSkills.${b}.changeBonus`);\n            }\n          }\n        }\n        return result;\n      case "conSkills":\n        for (let [a, skl] of Object.entries(curData.skills)) {\n          if (skl == null) continue;\n          if (skl.ability === "con") result.push(`data.skills.${a}.changeBonus`);\n\n          if (skl.subSkills != null) {\n            for (let [b, subSkl] of Object.entries(skl.subSkills)) {\n              if (subSkl != null && subSkl.ability === "con") result.push(`data.skills.${a}.subSkills.${b}.changeBonus`);\n            }\n          }\n        }\n        return result;\n      case "intSkills":\n        for (let [a, skl] of Object.entries(curData.skills)) {\n          if (skl == null) continue;\n          if (skl.ability === "int") result.push(`data.skills.${a}.changeBonus`);\n\n          if (skl.subSkills != null) {\n            for (let [b, subSkl] of Object.entries(skl.subSkills)) {\n              if (subSkl != null && subSkl.ability === "int") result.push(`data.skills.${a}.subSkills.${b}.changeBonus`);\n            }\n          }\n        }\n        return result;\n      case "wisSkills":\n        for (let [a, skl] of Object.entries(curData.skills)) {\n          if (skl == null) continue;\n          if (skl.ability === "wis") result.push(`data.skills.${a}.changeBonus`);\n\n          if (skl.subSkills != null) {\n            for (let [b, subSkl] of Object.entries(skl.subSkills)) {\n              if (subSkl != null && subSkl.ability === "wis") result.push(`data.skills.${a}.subSkills.${b}.changeBonus`);\n            }\n          }\n        }\n        return result;\n      case "chaSkills":\n        for (let [a, skl] of Object.entries(curData.skills)) {\n          if (skl == null) continue;\n          if (skl.ability === "cha") result.push(`data.skills.${a}.changeBonus`);\n\n          if (skl.subSkills != null) {\n            for (let [b, subSkl] of Object.entries(skl.subSkills)) {\n              if (subSkl != null && subSkl.ability === "cha") result.push(`data.skills.${a}.subSkills.${b}.changeBonus`);\n            }\n          }\n        }\n        return result;\n      case "allChecks":\n        return ["data.abilities.str.checkMod", "data.abilities.dex.checkMod", "data.abilities.con.checkMod",\n          "data.abilities.int.checkMod", "data.abilities.wis.checkMod", "data.abilities.cha.checkMod"];\n      case "strChecks":\n        return "data.abilities.str.checkMod";\n      case "dexChecks":\n        return "data.abilities.dex.checkMod";\n      case "conChecks":\n        return "data.abilities.con.checkMod";\n      case "intChecks":\n        return "data.abilities.int.checkMod";\n      case "wisChecks":\n        return "data.abilities.wis.checkMod";\n      case "chaChecks":\n        return "data.abilities.cha.checkMod";\n      case "allSpeeds":\n        for (let speedKey of Object.keys(curData.attributes.speed)) {\n          if (getProperty(curData, `attributes.speed.${speedKey}.base`)) result.push(`data.attributes.speed.${speedKey}.total`);\n        }\n        return result;\n      case "landSpeed":\n        return "data.attributes.speed.land.total";\n      case "climbSpeed":\n        return "data.attributes.speed.climb.total";\n      case "swimSpeed":\n        return "data.attributes.speed.swim.total";\n      case "burrowSpeed":\n        return "data.attributes.speed.burrow.total";\n      case "flySpeed":\n        return "data.attributes.speed.fly.total";\n      case "cmb":\n        return "data.attributes.cmb.total";\n      case "cmd":\n        return ["data.attributes.cmd.total", "data.attributes.cmd.flatFootedTotal"];\n      case "init":\n        return "data.attributes.init.total";\n    }\n\n    if (changeTarget.match(/^skill\\.([a-zA-Z0-9]+)$/)) {\n      const sklKey = RegExp.$1;\n      if (curData.skills[sklKey] != null) {\n        return `data.skills.${sklKey}.changeBonus`;\n      }\n    }\n    else if (changeTarget.match(/^skill\\.([a-zA-Z0-9]+)\\.subSkills\\.([a-zA-Z0-9]+)$/)) {\n      const sklKey = RegExp.$1;\n      const subSklKey = RegExp.$2;\n      if (curData.skills[sklKey] != null && curData.skills[sklKey].subSkills[subSklKey] != null) {\n        return `data.skills.${sklKey}.subSkills.${subSklKey}.changeBonus`;\n      }\n    }\n\n    return null;\n  }\n\n  _dataIsPC(data) {\n    if (data.permission != null) {\n      const nonGM = game.users.entities.filter(u => !u.isGM);\n      return nonGM.some(u => {\n        if (data.permission["default"] >= CONST.ENTITY_PERMISSIONS["OWNER"]) return true;\n        return data.permission[u._id] >= CONST.ENTITY_PERMISSIONS["OWNER"];\n      });\n    }\n    return this.isPC;\n  }\n\n  _addDefaultChanges(data, changes, flags, sourceInfo) {\n    // Class hit points\n    const classes = data.items.filter(o => o.type === "class" && getProperty(o.data, "classType") !== "racial").sort((a, b) => {\n      return a.sort - b.sort;\n    });\n    const racialHD = data.items.filter(o => o.type === "class" && getProperty(o.data, "classType") === "racial").sort((a, b) => {\n      return a.sort - b.sort;\n    });\n\n    const healthConfig = game.settings.get("pf1", "healthConfig");\n    const cls_options  = this.data.type === "character" ? healthConfig.hitdice.PC : healthConfig.hitdice.NPC;\n    const race_options = healthConfig.hitdice.Racial;\n    const round = {up: Math.ceil, nearest: Math.round, down: Math.floor}[healthConfig.rounding];\n    const continuous = {discrete: false, continuous: true}[healthConfig.continuity];\n\n    const push_health = (value, source) => {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: value.toString(), target: "misc", subTarget: "mhp", modifier: "untyped" }, {inplace: false}),\n        source: {name: source.name, subtype: source.name.toString()}\n      });\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: value.toString(), target: "misc", subTarget: "vigor", modifier: "untyped" }, {inplace: false}),\n        source: {name: source.name, subtype: source.name.toString()}\n      });\n    }\n    const manual_health = (health_source) => {\n      let health = health_source.data.hp + (health_source.data.classType === "base") * health_source.data.fc.hp.value;\n      if (!continuous) health = round(health);\n      push_health(health, health_source);\n    }\n    const auto_health = (health_source, options, maximized=0) => {\n      let die_health = 1 + (health_source.data.hd-1) * options.rate;\n      if (!continuous) die_health = round(die_health);\n\n      const maxed_health = Math.min(health_source.data.level, maximized) * health_source.data.hd;\n      const level_health = Math.max(0, health_source.data.level - maximized) * die_health;\n      const favor_health = (health_source.data.classType === "base") * health_source.data.fc.hp.value;\n      let   health = maxed_health + level_health + favor_health;\n\n      push_health(health, health_source);\n    }\n    const compute_health = (health_sources, options) => {\n      // Compute and push health, tracking the remaining maximized levels.\n      if (options.auto) {\n        let maximized = options.maximized;\n        for (const hd of health_sources) {\n          auto_health(hd, options, maximized);\n          maximized = Math.max(0, maximized - hd.data.level);\n        }\n      } else health_sources.forEach(race => manual_health(race));\n    }\n\n    compute_health(racialHD, race_options);\n    compute_health(classes, cls_options);\n\n    // Add Constitution to HP\n    let hpAbility = getProperty(data, "data.attributes.hpAbility");\n    if (hpAbility == null) hpAbility = "con";\n    if (hpAbility !== "") {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: `@abilities.${hpAbility}.mod * @attributes.hd.total`, target: "misc", subTarget: "mhp", modifier: "base" }, {inplace: false}),\n        source: {name: "Constitution"}\n      });\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: `2 * (@abilities.${hpAbility}.total + @abilities.${hpAbility}.drain)`, target: "misc", subTarget: "wounds", modifier: "base" }, {inplace: false}),\n        source: {name: "Constitution"}\n      });\n    }\n\n    // Add variables to CMD and CMD\n    {\n      // BAB to CMB\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "@attributes.bab.total", target: "misc", subTarget: "cmb", modifier: "untyped" }, {inplace: false}),\n        source: {name: game.i18n.localize("PF1.BAB")},\n      });\n      // Strength to CMB\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "@abilities.str.mod", target: "misc", subTarget: "cmb", modifier: "untyped" }, {inplace: false}),\n        source: {name: CONFIG.PF1.abilities["str"]},\n      });\n      // Energy Drain to CMB\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-@attributes.energyDrain", target: "misc", subTarget: "cmb", modifier: "untyped" }, {inplace: false}),\n        source: {name: game.i18n.localize("PF1.CondTypeEnergyDrain")},\n      });\n\n      // BAB to CMD\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "@attributes.bab.total", target: "misc", subTarget: "cmd", modifier: "untyped" }, {inplace: false}),\n        source: {name: game.i18n.localize("PF1.BAB")},\n      });\n      // Strength to CMD\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "@abilities.str.mod", target: "misc", subTarget: "cmd", modifier: "untyped" }, {inplace: false}),\n        source: {name: CONFIG.PF1.abilities["str"]},\n      });\n      // Energy Drain to CMD\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-@attributes.energyDrain", target: "misc", subTarget: "cmd", modifier: "untyped" }, {inplace: false}),\n        source: {name: game.i18n.localize("PF1.CondTypeEnergyDrain")},\n      });\n    }\n    \n    // Add Dexterity Modifier to Initiative\n    {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "@abilities.dex.mod", target: "misc", subTarget: "init", modifier: "untyped", priority: -100 }, {inplace: false}),\n        source: {name: CONFIG.PF1.abilities["dex"]},\n      });\n    }\n\n    // Add Ability modifiers and Energy Drain to saving throws\n    {\n      let abl;\n      // Ability Mod to Fortitude\n      abl = getProperty(data, "data.attributes.savingThrows.fort.ability");\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: `@abilities.${abl}.mod`, target: "savingThrows", subTarget: "fort", modifier: "untyped" }, {inplace: false}),\n        source: {name: CONFIG.PF1.abilities[abl]},\n      });\n      // Ability Mod to Reflex\n      abl = getProperty(data, "data.attributes.savingThrows.ref.ability");\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: `@abilities.${abl}.mod`, target: "savingThrows", subTarget: "ref", modifier: "untyped" }, {inplace: false}),\n        source: {name: CONFIG.PF1.abilities[abl]},\n      });\n      // Ability Mod to Will\n      abl = getProperty(data, "data.attributes.savingThrows.will.ability");\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: `@abilities.${abl}.mod`, target: "savingThrows", subTarget: "will", modifier: "untyped" }, {inplace: false}),\n        source: {name: CONFIG.PF1.abilities[abl]},\n      });\n      // Energy Drain\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-@attributes.energyDrain", target: "savingThrows", subTarget: "allSavingThrows", modifier: "penalty" }, {inplace: false}),\n        source: {name: game.i18n.localize("PF1.CondTypeEnergyDrain")},\n      });\n    }\n    // Natural armor\n    {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "@attributes.naturalAC", target: "ac", subTarget: "nac", modifier: "base" }, {inplace: false}),\n        source: {\n          name: game.i18n.localize("PF1.BuffTarACNatural"),\n        }\n      });\n    }\n    // Add armor bonuses from equipment\n    data.items.filter(obj => { return obj.type === "equipment" && obj.data.equipped; }).forEach(item => {\n      let armorTarget = "aac";\n      if (item.data.equipmentType === "shield") armorTarget = "sac";\n      // Push base armor\n      if (item.data.armor.value) {\n        changes.push({\n          raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: item.data.armor.value.toString(), target: "ac", subTarget: armorTarget, modifier: "base" }, {inplace: false}),\n          source: {\n            type: item.type,\n            name: item.name\n          }\n        });\n      }\n      // Push enhancement bonus to armor\n      if (item.data.armor.enh) {\n        changes.push({\n          raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: item.data.armor.enh.toString(), target: "ac", subTarget: armorTarget, modifier: "enh" }, {inplace: false}),\n          source: {\n            type: item.type,\n            name: item.name\n          }\n        });\n      }\n    });\n\n    // Add fly bonuses or penalties based on maneuverability\n    const flyKey = getProperty(data, "data.attributes.speed.fly.maneuverability");\n    let flyValue = 0;\n    if (flyKey != null) flyValue = CONFIG.PF1.flyManeuverabilityValues[flyKey];\n    if (flyValue !== 0) {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: flyValue.toString(), target: "skill", subTarget: "skill.fly", modifier: "untyped" }, {inplace: false}),\n        source: {\n          name: game.i18n.localize("PF1.FlyManeuverability"),\n        },\n      });\n    }\n    // Add swim and climb skill bonuses based on having speeds for them\n    {\n      const climbSpeed = getProperty(data, "data.attributes.speed.climb.total") || 0;\n      const swimSpeed = getProperty(data, "data.attributes.speed.swim.total") || 0;\n      if (climbSpeed > 0) {\n        changes.push({\n          raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "8", target: "skill", subTarget: "skill.clm", modifier: "racial" }, {inplace: false}),\n          source: {\n            name: game.i18n.localize("PF1.SpeedClimb"),\n          },\n        });\n      }\n      if (swimSpeed > 0) {\n        changes.push({\n          raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "8", target: "skill", subTarget: "skill.swm", modifier: "racial" }, {inplace: false}),\n          source: {\n            name: game.i18n.localize("PF1.SpeedSwim"),\n          },\n        });\n      }\n    }\n\n    // Add size bonuses to various attributes\n    const sizeKey = data.data.traits.size;\n    if (sizeKey !== "med") {\n      // AC\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: CONFIG.PF1.sizeMods[sizeKey].toString(), target: "ac", subTarget: "ac", modifier: "size" }, {inplace: false}),\n        source: {\n          type: "size"\n        }\n      });\n      // Stealth skill\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: CONFIG.PF1.sizeStealthMods[sizeKey].toString(), target: "skill", subTarget: "skill.ste", modifier: "size" }, {inplace: false}),\n        source: {\n          type: "size"\n        }\n      });\n      // Fly skill\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: CONFIG.PF1.sizeFlyMods[sizeKey].toString(), target: "skill", subTarget: "skill.fly", modifier: "size" }, {inplace: false}),\n        source: {\n          type: "size"\n        }\n      });\n      // CMB\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: CONFIG.PF1.sizeSpecialMods[sizeKey].toString(), target: "misc", subTarget: "cmb", modifier: "size" }, {inplace: false}),\n        source: {\n          type: "size"\n        }\n      });\n      // CMD\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: CONFIG.PF1.sizeSpecialMods[sizeKey].toString(), target: "misc", subTarget: "cmd", modifier: "size" }, {inplace: false}),\n        source: {\n          type: "size"\n        }\n      });\n    }\n\n    // Add conditions\n    for (let [con, v] of Object.entries(data.data.attributes.conditions || {})) {\n      if (!v) continue;\n\n      switch (con) {\n        case "blind":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "ac", subTarget: "ac", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondBlind") }\n          });\n          flags["loseDexToAC"] = true;\n          sourceInfo["data.attributes.ac.normal.total"] = sourceInfo["data.attributes.ac.normal.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.ac.touch.total"] = sourceInfo["data.attributes.ac.touch.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.cmd.total"] = sourceInfo["data.attributes.cmd.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.cmd.flatFootedTotal"] = sourceInfo["data.attributes.cmd.flatFootedTotal"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.ac.normal.total"].negative.push({ name: game.i18n.localize("PF1.CondBlind"), value: game.i18n.localize("PF1.ChangeFlagLoseDexToAC") });\n          sourceInfo["data.attributes.ac.touch.total"].negative.push({ name: game.i18n.localize("PF1.CondBlind"), value: game.i18n.localize("PF1.ChangeFlagLoseDexToAC") });\n          sourceInfo["data.attributes.cmd.total"].negative.push({ name: game.i18n.localize("PF1.CondBlind"), value: game.i18n.localize("PF1.ChangeFlagLoseDexToAC") });\n          sourceInfo["data.attributes.cmd.flatFootedTotal"].negative.push({ name: game.i18n.localize("PF1.CondBlind"), value: game.i18n.localize("PF1.ChangeFlagLoseDexToAC") });\n          break;\n        case "dazzled":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-1", target: "attack", subTarget: "attack", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondDazzled") }\n          });\n          break;\n        case "deaf":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-4", target: "misc", subTarget: "init", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondDeaf") }\n          });\n          break;\n        case "entangled":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-4", target: "ability", subTarget: "dex", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondEntangled") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "attack", subTarget: "attack", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondEntangled") }\n          });\n          break;\n        case "grappled":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-4", target: "ability", subTarget: "dex", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondGrappled") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "attack", subTarget: "attack", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondGrappled") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "misc", subTarget: "cmb", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondGrappled") }\n          });\n          break;\n        case "helpless":\n          flags["noDex"] = true;\n          sourceInfo["data.abilities.dex.total"] = sourceInfo["data.abilities.dex.total"] || { positive: [], negative: [] };\n          sourceInfo["data.abilities.dex.total"].negative.push({ name: game.i18n.localize("PF1.CondHelpless"), value: game.i18n.localize("PF1.ChangeFlagNoDex") });\n          break;\n        case "paralyzed":\n          flags["noDex"] = true;\n          flags["noStr"] = true;\n          sourceInfo["data.abilities.dex.total"] = sourceInfo["data.abilities.dex.total"] || { positive: [], negative: [] };\n          sourceInfo["data.abilities.dex.total"].negative.push({ name: game.i18n.localize("PF1.CondParalyzed"), value: game.i18n.localize("PF1.ChangeFlagNoDex") });\n          sourceInfo["data.abilities.str.total"] = sourceInfo["data.abilities.str.total"] || { positive: [], negative: [] };\n          sourceInfo["data.abilities.str.total"].negative.push({ name: game.i18n.localize("PF1.CondParalyzed"), value: game.i18n.localize("PF1.ChangeFlagNoStr") });\n          break;\n        case "pinned":\n          flags["loseDexToAC"] = true;\n          sourceInfo["data.attributes.ac.normal.total"] = sourceInfo["data.attributes.ac.normal.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.ac.touch.total"] = sourceInfo["data.attributes.ac.touch.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.cmd.total"] = sourceInfo["data.attributes.cmd.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.ac.normal.total"].negative.push({ name: game.i18n.localize("PF1.CondPinned"), value: game.i18n.localize("PF1.ChangeFlagLoseDexToAC") });\n          sourceInfo["data.attributes.ac.touch.total"].negative.push({ name: game.i18n.localize("PF1.CondPinned"), value: game.i18n.localize("PF1.ChangeFlagLoseDexToAC") });\n          sourceInfo["data.attributes.cmd.total"].negative.push({ name: game.i18n.localize("PF1.CondPinned"), value: game.i18n.localize("PF1.ChangeFlagLoseDexToAC") });\n          break;\n        case "fear":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "attack", subTarget: "attack", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondFear") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "savingThrows", subTarget: "allSavingThrows", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondFear") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "skills", subTarget: "skills", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondFear") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "abilityChecks", subTarget: "allChecks", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondFear") }\n          });\n          break;\n        case "sickened":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "attack", subTarget: "attack", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondSickened") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "damage", subTarget: "wdamage", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondSickened") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "savingThrows", subTarget: "allSavingThrows", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondSickened") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "skills", subTarget: "skills", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondSickened") }\n          });\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "abilityChecks", subTarget: "allChecks", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondSickened") }\n          });\n          break;\n        case "stunned":\n          changes.push({\n            raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "ac", subTarget: "ac", modifier: "penalty" }, {inplace: false}),\n            source: { name: game.i18n.localize("PF1.CondStunned") }\n          });\n          flags["loseDexToAC"] = true;\n          sourceInfo["data.attributes.ac.normal.total"] = sourceInfo["data.attributes.ac.normal.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.ac.touch.total"] = sourceInfo["data.attributes.ac.touch.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.cmd.total"] = sourceInfo["data.attributes.cmd.total"] || { positive: [], negative: [] };\n          sourceInfo["data.attributes.ac.normal.total"].negative.push({ name: "Stunned", value: "Lose Dex to AC" });\n          sourceInfo["data.attributes.ac.touch.total"].negative.push({ name: "Stunned", value: "Lose Dex to AC" });\n          sourceInfo["data.attributes.cmd.total"].negative.push({ name: "Stunned", value: "Lose Dex to AC" });\n          break;\n      }\n    }\n\n    // Handle fatigue and exhaustion so that they don\'t stack\n    if (data.data.attributes.conditions.exhausted) {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-6", target: "ability", subTarget: "str", modifier: "penalty" }, {inplace: false}),\n        source: { name: game.i18n.localize("PF1.CondExhausted") }\n      });\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-6", target: "ability", subTarget: "dex", modifier: "penalty" }, {inplace: false}),\n        source: { name: game.i18n.localize("PF1.CondExhausted") }\n      });\n    }\n    else if (data.data.attributes.conditions.fatigued) {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "ability", subTarget: "str", modifier: "penalty" }, {inplace: false}),\n        source: { name: game.i18n.localize("PF1.CondFatigued") }\n      });\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-2", target: "ability", subTarget: "dex", modifier: "penalty" }, {inplace: false}),\n        source: { name: game.i18n.localize("PF1.CondFatigued") }\n      });\n    }\n\n    // Apply level drain to hit points\n    if (!Number.isNaN(data.data.attributes.energyDrain) && data.data.attributes.energyDrain > 0) {\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-(@attributes.energyDrain * 5)", target: "misc", subTarget: "mhp", modifier: "untyped" }, {inplace: false}),\n        source: { name: game.i18n.localize("PF1.CondTypeEnergyDrain") }\n      });\n      changes.push({\n        raw: mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].defaultChange, { formula: "-(@attributes.energyDrain * 5)", target: "misc", subTarget: "vigor", modifier: "untyped" }, {inplace: false}),\n        source: { name: game.i18n.localize("PF1.CondTypeEnergyDrain") }\n      });\n    }\n  }\n\n  async _updateChanges({data=null}={}) {\n    let updateData = {};\n    let srcData1 = mergeObject(this.data, expandObject(data || {}), { inplace: false });\n    srcData1.items = this.items.reduce((cur, i) => {\n      const otherItem = srcData1.items.filter(o => o._id === i._id)[0];\n      if (otherItem) cur.push(mergeObject(i.data, otherItem, { inplace: false }));\n      else cur.push(i.data);\n      return cur;\n    }, []);\n    const changeObjects = srcData1.items.filter(obj => { return obj.data.changes != null; }).filter(obj => {\n      if (obj.type === "buff") return obj.data.active;\n      if (obj.type === "equipment" || obj.type === "weapon") return obj.data.equipped;\n      return true;\n    });\n\n    // Track previous values\n    const prevValues = {\n      mhp: this.data.data.attributes.hp.max,\n      wounds: getProperty(this.data, "data.attributes.wounds.max") || 0,\n      vigor: getProperty(this.data, "data.attributes.vigor.max") || 0,\n    };\n\n    // Gather change types\n    const changeData = {};\n    const changeDataTemplate = {\n      positive: {\n        value: 0,\n        sources: []\n      },\n      negative: {\n        value: 0,\n        sources: []\n      }\n    };\n    for (let [key, buffTarget] of Object.entries(CONFIG.PF1.buffTargets)) {\n      if (typeof buffTarget === "object") {\n        // Add specific skills as targets\n        if (key === "skill") {\n          for (let [s, skl] of Object.entries(this.data.data.skills)) {\n            if (skl == null) continue;\n            if (!skl.subSkills) {\n              changeData[`skill.${s}`] = {};\n              Object.keys(CONFIG.PF1.bonusModifiers).forEach(b => {\n                changeData[`skill.${s}`][b] = duplicate(changeDataTemplate);\n              });\n            }\n            else {\n              for (let s2 of Object.keys(skl.subSkills)) {\n                changeData[`skill.${s}.subSkills.${s2}`] = {};\n                Object.keys(CONFIG.PF1.bonusModifiers).forEach(b => {\n                  changeData[`skill.${s}.subSkills.${s2}`][b] = duplicate(changeDataTemplate);\n                });\n              }\n            }\n          }\n        }\n        // Add static targets\n        else {\n          for (let subKey of Object.keys(buffTarget)) {\n            if (subKey.startsWith("_")) continue;\n            changeData[subKey] = {};\n            Object.keys(CONFIG.PF1.bonusModifiers).forEach(b => {\n              changeData[subKey][b] = duplicate(changeDataTemplate);\n            });\n          }\n        }\n      }\n    };\n\n    // Create an array of changes\n    let allChanges = [];\n    changeObjects.forEach(item => {\n      item.data.changes.forEach(change => {\n        allChanges.push({\n          raw: change,\n          source: {\n            value: 0,\n            type: item.type,\n            subtype: this.constructor._getChangeItemSubtype(item),\n            name: item.name,\n            item: item\n          }\n        });\n      });\n    });\n\n    // Initialize data\n    let flags = {},\n      sourceInfo = {};\n    this._resetData(updateData, srcData1, flags, sourceInfo);\n    this._addDefaultChanges(srcData1, allChanges, flags, sourceInfo);\n\n    // Check flags\n    for (let obj of changeObjects) {\n      if (!obj.data.changeFlags) continue;\n      for (let [flagKey, flagValue] of Object.entries(obj.data.changeFlags)) {\n        if (flagValue === true) {\n          flags[flagKey] = true;\n\n          let targets = [];\n          let value = "";\n\n          switch (flagKey) {\n            case "loseDexToAC":\n              sourceInfo["data.attributes.ac.normal.total"] = sourceInfo["data.attributes.ac.normal.total"] || { positive: [], negative: [] };\n              sourceInfo["data.attributes.ac.touch.total"] = sourceInfo["data.attributes.ac.touch.total"] || { positive: [], negative: [] };\n              sourceInfo["data.attributes.cmd.total"] = sourceInfo["data.attributes.cmd.total"] || { positive: [], negative: [] };\n              targets = [\n                sourceInfo["data.attributes.ac.normal.total"].negative,\n                sourceInfo["data.attributes.ac.touch.total"].negative,\n                sourceInfo["data.attributes.cmd.total"].negative\n              ];\n              value = "Lose Dex to AC";\n              break;\n            case "noDex":\n              sourceInfo["data.abilities.dex.total"] = sourceInfo["data.abilities.dex.total"] || { positive: [], negative: [] };\n              targets = [sourceInfo["data.abilities.dex.total"].negative];\n              value = "0 Dex";\n              break;\n            case "noStr":\n              sourceInfo["data.abilities.str.total"] = sourceInfo["data.abilities.str.total"] || { positive: [], negative: [] };\n              targets = [sourceInfo["data.abilities.str.total"].negative];\n              value = "0 Str";\n              break;\n            case "oneInt":\n              sourceInfo["data.abilities.int.total"] = sourceInfo["data.abilities.int.total"] || { positive: [], negative: [] };\n              targets = [sourceInfo["data.abilities.int.total"].negative];\n              value = "1 Int";\n              break;\n            case "oneWis":\n              sourceInfo["data.abilities.wis.total"] = sourceInfo["data.abilities.wis.total"] || { positive: [], negative: [] };\n              targets = [sourceInfo["data.abilities.wis.total"].negative];\n              value = "1 Wis";\n              break;\n            case "oneCha":\n              sourceInfo["data.abilities.cha.total"] = sourceInfo["data.abilities.cha.total"] || { positive: [], negative: [] };\n              targets = [sourceInfo["data.abilities.cha.total"].negative];\n              value = "1 Cha";\n              break;\n          }\n\n          for (let t of Object.values(targets)) {\n            t.push({ type: obj.type, subtype: this.constructor._getChangeItemSubtype(obj), value: value });\n          }\n        }\n      }\n    }\n    for (let flagKey of Object.keys(flags)) {\n      if (!flags[flagKey]) continue;\n\n      switch (flagKey) {\n        case "noDex":\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.dex.total", 0);\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.dex.mod", -5);\n          break;\n        case "noStr":\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.str.total", 0);\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.str.mod", -5);\n          break;\n        case "oneInt":\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.int.total", 1);\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.int.mod", -5);\n          break;\n        case "oneWis":\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.wis.total", 1);\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.wis.mod", -5);\n          break;\n        case "oneCha":\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.cha.total", 1);\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.abilities.cha.mod", -5);\n          break;\n      }\n    }\n\n    // Sort changes\n    allChanges.sort(this._sortChanges.bind(this));\n\n    // Parse changes\n    let temp = [];\n    const origData = mergeObject(this.data, data != null ? expandObject(data) : {}, { inplace: false });\n    updateData = flattenObject({ data: mergeObject(origData.data, expandObject(updateData).data, { inplace: false }) });\n    this._addDynamicData({ updateData: updateData, data: srcData1, forceModUpdate: true, flags: flags });\n    allChanges.forEach((change, a) => {\n      const formula = change.raw.formula || "";\n      if (formula === "") return;\n      const changeTarget = change.raw.subTarget;\n      if (changeData[changeTarget] == null) return;\n      const rollData = this.getRollData(srcData1.data);\n\n      rollData.item = {};\n      if (change.source.item != null) {\n        rollData.item = change.source.item.data;\n      }\n\n      const roll = new Roll(formula, rollData);\n\n      try {\n        change.raw.value = roll.roll().total;\n      }\n      catch (e) {\n        ui.notifications.error(game.i18n.localize("PF1.ErrorItemFormula").format(change.source.item.name, this.name));\n      }\n      this._parseChange(change, changeData[changeTarget], flags);\n      temp.push(changeData[changeTarget]);\n\n      if (allChanges.length <= a+1 || allChanges[a+1].raw.subTarget !== changeTarget) {\n        const newData = this._applyChanges(changeTarget, temp, srcData1);\n        this._addDynamicData({ updateData: updateData, data: srcData1, changes: newData, flags: flags });\n        temp = [];\n      }\n    });\n\n    // Update encumbrance\n    this._computeEncumbrance(updateData, srcData1);\n    switch (srcData1.data.attributes.encumbrance.level) {\n      case 0:\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.acp.encumbrance", 0);\n        break;\n      case 1:\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.acp.encumbrance", 3);\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.maxDexBonus", Math.min(updateData["data.attributes.maxDexBonus"] || Number.POSITIVE_INFINITY, 3));\n        break;\n      case 2:\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.acp.encumbrance", 6);\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.maxDexBonus", Math.min(updateData["data.attributes.maxDexBonus"] || Number.POSITIVE_INFINITY, 1));\n        break;\n    }\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.acp.total", Math.max(updateData["data.attributes.acp.gear"], updateData["data.attributes.acp.encumbrance"]));\n\n    // Update skills and AC and CMD from Dexterity\n    {\n      this._updateSkills(updateData, srcData1);\n      const dex = srcData1.data.abilities.dex.mod;\n      const maxDex = srcData1.data.attributes.maxDexBonus;\n      const ac = {\n        normal: srcData1.data.attributes.ac.normal.total,\n        touch: srcData1.data.attributes.ac.touch.total,\n        ff: srcData1.data.attributes.ac.flatFooted.total,\n      };\n      const cmd = {\n        normal: srcData1.data.attributes.cmd.total,\n        ff: srcData1.data.attributes.cmd.flatFootedTotal,\n      };\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.ac.normal.total", ac.normal + (maxDex != null ? Math.min(maxDex, dex) : dex));\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.ac.touch.total", ac.touch + (maxDex != null ? Math.min(maxDex, dex) : dex));\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.ac.flatFooted.total", ac.ff + Math.min(0, dex));\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.cmd.total", cmd.normal + (maxDex != null ? Math.min(maxDex, dex) : dex));\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.cmd.flatFootedTotal", cmd.ff + Math.min(0, dex));\n    }\n\n    // Reduce final speed under certain circumstances\n    let armorItems = srcData1.items.filter(o => o.type === "equipment");\n    if ((updateData["data.attributes.encumbrance.level"] >= 1 && !flags.noEncumbrance) ||\n    (armorItems.filter(o => getProperty(o.data, "equipmentSubtype") === "mediumArmor" && o.data.equipped).length && !flags.mediumArmorFullSpeed) ||\n    (armorItems.filter(o => getProperty(o.data, "equipmentSubtype") === "heavyArmor" && o.data.equipped).length && !flags.heavyArmorFullSpeed)) {\n      for (let speedKey of Object.keys(srcData1.data.attributes.speed)) {\n        let value = updateData[`data.attributes.speed.${speedKey}.total`];\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, `data.attributes.speed.${speedKey}.total`, ActorPF.getReducedMovementSpeed(value));\n      }\n    }\n    // Reset spell slots\n    for (let spellbookKey of Object.keys(getProperty(srcData1, "data.attributes.spells.spellbooks"))) {\n      const spellbookAbilityKey = getProperty(srcData1, `data.attributes.spells.spellbooks.${spellbookKey}.ability`);\n      const spellbookAbilityMod = getProperty(srcData1, `data.abilities.${spellbookAbilityKey}.mod`);\n\n      for (let a = 0; a < 10; a++) {\n        let base = parseInt(getProperty(srcData1, `data.attributes.spells.spellbooks.${spellbookKey}.spells.spell${a}.base`));\n        if (Number.isNaN(base)) {\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, `data.attributes.spells.spellbooks.${spellbookKey}.spells.spell${a}.base`, null);\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, `data.attributes.spells.spellbooks.${spellbookKey}.spells.spell${a}.max`, 0);\n        }\n        else {\n          const value = (typeof spellbookAbilityMod === "number") ? (base + ActorPF.getSpellSlotIncrease(spellbookAbilityMod, a)) : base;\n          if (getProperty(srcData1, `data.attributes.spells.spellbooks.${spellbookKey}.autoSpellLevels`)) {\n            Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, `data.attributes.spells.spellbooks.${spellbookKey}.spells.spell${a}.max`, value);\n          }\n          else {\n            Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, `data.attributes.spells.spellbooks.${spellbookKey}.spells.spell${a}.max`, base);\n          }\n        }\n      }\n    }\n\n    // Add current hit points\n    if (updateData["data.attributes.hp.max"]) {\n      const hpDiff = updateData["data.attributes.hp.max"] - prevValues.mhp;\n      if (hpDiff !== 0) {\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.hp.value", Math.min(updateData["data.attributes.hp.max"], srcData1.data.attributes.hp.value + hpDiff));\n      }\n    }\n    if (updateData["data.attributes.wounds.max"]) {\n      const wDiff = updateData["data.attributes.wounds.max"] - prevValues.wounds;\n      if (wDiff !== 0) {\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.wounds.value", Math.min(updateData["data.attributes.wounds.max"], srcData1.data.attributes.wounds.value + wDiff));\n      }\n    }\n    if (updateData["data.attributes.vigor.max"]) {\n      const vDiff = updateData["data.attributes.vigor.max"] - prevValues.vigor;\n      if (vDiff !== 0) {\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData1, updateData, "data.attributes.vigor.value", Math.min(updateData["data.attributes.vigor.max"], srcData1.data.attributes.vigor.value + vDiff));\n      }\n    }\n\n\n    // Refresh source info\n    for (let [bt, change] of Object.entries(changeData)) {\n      for (let [ct, values] of Object.entries(change)) {\n        let customBuffTargets = this._getChangeFlat(bt, ct, srcData1.data);\n        if (!(customBuffTargets instanceof Array)) customBuffTargets = [customBuffTargets];\n\n        // Replace certain targets\n        // Replace ability penalties\n        customBuffTargets = customBuffTargets.filter(t => { return t != null; }).map(t => {\n          return t.replace(/^data\\.abilities\\.([a-zA-Z0-9]+)\\.penalty$/, "data.abilities.$1.total");\n        });\n\n        // Add sources\n        for (let ebt of Object.values(customBuffTargets)) {\n            sourceInfo[ebt] = sourceInfo[ebt] || { positive: [], negative: [] };\n            if (values.positive.value > 0) sourceInfo[ebt].positive.push(...values.positive.sources);\n            if (values.negative.value < 0) sourceInfo[ebt].negative.push(...values.negative.sources);\n        }\n      }\n    }\n\n    this._setSourceDetails(mergeObject(this.data, srcData1, { inplace: false }), sourceInfo, flags);\n\n    const diffData = diffObject(this.data, srcData1);\n\n    // Apply changes\n    if (this.collection != null && Object.keys(diffData).length > 0) {\n      let newData = {};\n      if (data != null) newData = flattenObject(mergeObject(data, flattenObject(diffData), { inplace: false }));\n      return { data: newData, diff: diffData };\n    }\n    return { data: {}, diff: {} };\n  }\n\n  _applyChanges(buffTarget, changeData, rollData) {\n    let consolidatedChanges = {};\n    let changes = {};\n    for (let change of changeData) {\n      for (let b of Object.keys(change)) {\n        changes[b] = { positive: 0, negative: 0 };\n      }\n      for (let [changeType, data] of Object.entries(change)) {\n        // Add positive value\n        if (data.positive.value !== 0) {\n          changes[changeType].positive += data.positive.value;\n        }\n        // Add negative value\n        if (data.negative.value !== 0) {\n            changes[changeType].negative += data.negative.value;\n        }\n      }\n    }\n\n    for (let [changeTarget, value] of Object.entries(changes)) {\n      if (value.positive !== 0 || value.negative !== 0) {\n        let flatTargets = this._getChangeFlat(buffTarget, changeTarget, rollData.data);\n        if (flatTargets == null) continue;\n\n        if (!(flatTargets instanceof Array)) flatTargets = [flatTargets];\n        for (let target of flatTargets) {\n          consolidatedChanges[target] = (consolidatedChanges[target] || 0) + value.positive + value.negative;\n\n           // Apply final rounding of health, if required.\n          if (["data.attributes.hp.max", "data.attributes.wounds.max", "data.attributes.vigor.max"].includes(target)) {\n            const healthConfig = game.settings.get("pf1", "healthConfig")\n            const continuous = {discrete: false, continuous: true}[healthConfig.continuity]\n            if (continuous) {\n              const round = {up: Math.ceil, nearest: Math.round, down: Math.floor}[healthConfig.rounding]\n              consolidatedChanges[target] = round(consolidatedChanges[target])\n            }\n          }\n        }\n      }\n    }\n    return consolidatedChanges;\n  }\n\n  _resetData(updateData, data, flags, sourceInfo) {\n    const data1 = data.data;\n    if (flags == null) flags = {};\n    const items = data.items;\n    const classes = items.filter(obj => { return obj.type === "class"; });\n    const useFractionalBaseBonuses = game.settings.get("pf1", "useFractionalBaseBonuses") === true;\n\n    // Reset HD\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.hd.total", data1.details.level.value);\n\n    // Reset CR\n    if (this.data.type === "npc") {\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.details.cr.total", this.getCR(data1));\n    }\n\n    // Reset abilities\n    for (let [a, abl] of Object.entries(data1.abilities)) {\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.abilities.${a}.penalty`, 0);\n      if (a === "str" && flags.noStr === true) continue;\n      if (a === "dex" && flags.noDex === true) continue;\n      if (a === "int" && flags.oneInt === true) continue;\n      if (a === "wis" && flags.oneWis === true) continue;\n      if (a === "cha" && flags.oneCha === true) continue;\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.abilities.${a}.checkMod`, 0);\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.abilities.${a}.total`, abl.value - Math.abs(abl.drain));\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.abilities.${a}.mod`, Math.floor((updateData[`data.abilities.${a}.total`] - 10) / 2));\n    }\n\n    // Reset maximum hit points\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.hp.max", getProperty(data, "data.attributes.hp.base") || 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.wounds.max", getProperty(data, "data.attributes.wounds.base") || 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.vigor.max", getProperty(data, "data.attributes.vigor.base") || 0);\n\n    // Reset AC\n    for (let type of Object.keys(data1.attributes.ac)) {\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.attributes.ac.${type}.total`, 10);\n    }\n\n    // Reset attack and damage bonuses\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.attack.general", 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.attack.melee", 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.attack.ranged", 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.damage.general", 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.damage.weapon", 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.damage.spell", 0);\n\n    // Reset saving throws\n    for (let a of Object.keys(data1.attributes.savingThrows)) {\n      {\n        const k = `data.attributes.savingThrows.${a}.total`;\n        if (useFractionalBaseBonuses) {\n          let highStart = false;\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, k,\n            Math.floor(classes.reduce((cur, obj) => {\n              const saveScale = getProperty(obj, `data.savingThrows.${a}.value`) || "";\n              if (saveScale === "high"){\n                const acc = highStart ? 0 : 2;\n                highStart = true;\n                return cur + obj.data.level / 2 + acc;\n              }\n              if (saveScale === "low") return cur + obj.data.level / 3;\n              return cur;\n            }, 0))\n          );\n\n          const v = updateData[k];\n          if (v !== 0) {\n            sourceInfo[k] = sourceInfo[k] || { positive: [], negative: [] };\n            sourceInfo[k].positive.push({ name: game.i18n.localize("PF1.Base"), value: updateData[k] });\n          }\n        }\n        else {\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, k,\n            classes.reduce((cur, obj) => {\n              const classType = getProperty(obj.data, "classType") || "base";\n              let formula = CONFIG.PF1.classSavingThrowFormulas[classType][obj.data.savingThrows[a].value];\n              if (formula == null) formula = "0";\n              const v = Math.floor(new Roll(formula, {level: obj.data.level}).roll().total);\n\n              if (v !== 0) {\n                sourceInfo[k] = sourceInfo[k] || { positive: [], negative: [] };\n                sourceInfo[k].positive.push({ name: getProperty(obj, "name"), value: v });\n              }\n\n              return cur + v;\n            }, 0)\n          );\n        }\n      }\n    }\n\n    // Reset ACP and Max Dex bonus\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.acp.gear", 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.maxDexBonus", null);\n    items.filter(obj => { return obj.type === "equipment" && obj.data.equipped; }).forEach(obj => {\n      let itemACP = Math.abs(obj.data.armor.acp);\n      if (obj.data.masterwork === true && (["armor", "shield"].includes(obj.data.equipmentType))) {\n        itemACP = Math.max(0, itemACP - 1);\n      }\n      \n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.acp.gear", updateData["data.attributes.acp.gear"] + itemACP);\n      if(obj.data.armor.dex != null) {\n        if (updateData["data.attributes.maxDexBonus"] == null) Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.maxDexBonus", Math.abs(obj.data.armor.dex));\n        else {\n          Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.maxDexBonus", Math.min(updateData["data.attributes.maxDexBonus"], Math.abs(obj.data.armor.dex)));\n        }\n      }\n    });\n\n    // Reset specific skill bonuses\n    for (let sklKey of this._getChangeFlat("skills", "", this.data.data)) {\n      if (hasProperty(data, sklKey)) Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, sklKey, 0);\n    }\n\n    // Reset movement speed\n    for (let speedKey of Object.keys(this.data.data.attributes.speed)) {\n      const base = getProperty(data, `data.attributes.speed.${speedKey}.base`);\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.attributes.speed.${speedKey}.total`, base || 0);\n    }\n\n    // Reset BAB, CMB and CMD\n    {\n      const k = "data.attributes.bab.total";\n      if (useFractionalBaseBonuses) {\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, k, Math.floor(classes.reduce((cur, obj) => {\n          const babScale = getProperty(obj, "data.bab") || "";\n          if (babScale === "high") return cur + obj.data.level;\n          if (babScale === "med") return cur + obj.data.level * 0.75;\n          if (babScale === "low") return cur + obj.data.level * 0.5;\n          return cur;\n        }, 0)));\n\n        const v = updateData[k];\n        if (v !== 0) {\n          sourceInfo[k] = sourceInfo[k] || { positive: [], negative: [] };\n          sourceInfo[k].positive.push({ name: game.i18n.localize("PF1.Base"), value: v });\n        }\n      }\n      else {\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, k, classes.reduce((cur, obj) => {\n          const formula = CONFIG.PF1.classBABFormulas[obj.data.bab] != null ? CONFIG.PF1.classBABFormulas[obj.data.bab] : "0";\n          const v = new Roll(formula, {level: obj.data.level}).roll().total;\n\n          if (v !== 0) {\n            sourceInfo[k] = sourceInfo[k] || { positive: [], negative: [] };\n            sourceInfo[k].positive.push({ name: getProperty(obj, "name"), value: v });\n          }\n\n          return cur + v;\n        }, 0));\n      }\n    }\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.cmb.total", 0);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.cmd.total", 10);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.cmd.flatFootedTotal", 10);\n\n    // Reset initiative\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, "data.attributes.init.total", getProperty(data, "data.attributes.init.value") || 0);\n\n    // Reset class skills\n    for (let [k, s] of Object.entries(getProperty(data, "data.skills"))) {\n      if (!s) continue;\n      const isClassSkill = classes.reduce((cur, o) => {\n        if ((getProperty(o, "data.classSkills") || {})[k] === true) return true;\n        return cur;\n      }, false);\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.skills.${k}.cs`, isClassSkill);\n      for (let k2 of Object.keys(getProperty(s, "subSkills") || {})) {\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.skills.${k}.subSkills.${k2}.cs`, isClassSkill);\n      }\n    }\n  }\n\n  _addDynamicData({updateData={}, data={}, changes={}, flags={}, forceModUpdate=false}={}) {\n    const prevMods = {};\n    const modDiffs = {};\n\n    // Reset ability modifiers\n    const abilities = Object.keys(getProperty(data, "data.abilities") || {});\n    for (let a of abilities) {\n      prevMods[a] = forceModUpdate ? 0 : updateData[`data.abilities.${a}.mod`];\n      if (a === "str" && flags.noStr ||\n        a === "dex" && flags.noDex ||\n        a === "int" && flags.oneInt ||\n        a === "wis" && flags.oneWis ||\n        a === "cha" && flags.oneCha) {\n        modDiffs[a] = forceModUpdate ? -5 : 0;\n        if (changes[`data.abilities.${a}.total`]) delete changes[`data.abilities.${a}.total`]; // Remove used mods to prevent doubling\n        continue;\n      }\n      const ablPenalty = Math.abs(updateData[`data.abilities.${a}.penalty`] || 0) + (updateData[`data.abilities.${a}.userPenalty`] || 0);\n\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.abilities.${a}.total`, updateData[`data.abilities.${a}.total`] + (changes[`data.abilities.${a}.total`] || 0));\n      if (changes[`data.abilities.${a}.total`]) delete changes[`data.abilities.${a}.total`]; // Remove used mods to prevent doubling\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.abilities.${a}.mod`, Math.floor((updateData[`data.abilities.${a}.total`] - 10) / 2));\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.abilities.${a}.mod`, Math.max(-5, updateData[`data.abilities.${a}.mod`] - Math.floor(updateData[`data.abilities.${a}.damage`] / 2) - Math.floor(ablPenalty / 2)));\n      modDiffs[a] = updateData[`data.abilities.${a}.mod`] - prevMods[a];\n    }\n\n    // Apply changes\n    for (let [changeTarget, value] of Object.entries(changes)) {\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, changeTarget, (updateData[changeTarget] || 0) + value);\n    }\n  }\n\n  _updateSkills(updateData, data) {\n    const data1 = data.data;\n    let energyDrainPenalty = Math.abs(data1.attributes.energyDrain);\n    for (let [sklKey, skl] of Object.entries(data1.skills)) {\n      if (skl == null) continue;\n\n      let acpPenalty = (skl.acp ? data1.attributes.acp.total : 0);\n      let ablMod = data1.abilities[skl.ability].mod;\n      let specificSkillBonus = skl.changeBonus || 0;\n\n      // Parse main skills\n      let sklValue = skl.rank + (skl.cs && skl.rank > 0 ? 3 : 0) + ablMod + specificSkillBonus - acpPenalty - energyDrainPenalty;\n      Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.skills.${sklKey}.mod`, sklValue);\n      // Parse sub-skills\n      for (let [subSklKey, subSkl] of Object.entries(skl.subSkills || {})) {\n        if (subSkl == null) continue;\n        if (getProperty(data1, `skills.${sklKey}.subSkills.${subSklKey}`) == null) continue;\n\n        acpPenalty = (subSkl.acp ? data1.attributes.acp.total : 0);\n        ablMod = data1.abilities[subSkl.ability].mod;\n        specificSkillBonus = subSkl.changeBonus || 0;\n        sklValue = subSkl.rank + (subSkl.cs && subSkl.rank > 0 ? 3 : 0) + ablMod + specificSkillBonus - acpPenalty - energyDrainPenalty;\n        Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(data, updateData, `data.skills.${sklKey}.subSkills.${subSklKey}.mod`, sklValue);\n      }\n    }\n  }\n\n  /**\n   * Augment the basic actor data with additional dynamic data.\n   */\n  prepareData() {\n    super.prepareData();\n\n    const actorData = this.data;\n    const data = actorData.data;\n\n    // Prepare Character data\n    if ( actorData.type === "character" ) this._prepareCharacterData(actorData);\n    else if ( actorData.type === "npc" ) this._prepareNPCData(data);\n\n    // Create arbitrary skill slots\n    for (let skillId of CONFIG.PF1.arbitrarySkills) {\n      if (data.skills[skillId] == null) continue;\n      let skill = data.skills[skillId];\n      skill.subSkills = skill.subSkills || {};\n      for (let subSkillId of Object.keys(skill.subSkills)) {\n        if (skill.subSkills[subSkillId] == null) delete skill.subSkills[subSkillId];\n      }\n    }\n\n    // Delete removed skills\n    for (let skillId of Object.keys(data.skills)) {\n      let skl = data.skills[skillId];\n      if (skl == null) {\n        delete data.skills[skillId];\n      }\n    }\n\n    // Set class tags\n    data.classes = {};\n    actorData.items.filter(obj => { return obj.type === "class"; }).forEach(cls => {\n      let tag = Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["createTag"])(cls.name);\n      let count = 1;\n      while (actorData.items.filter(obj => { return obj.type === "class" && obj.data.tag === tag && obj !== cls; }).length > 0) {\n        count++;\n        tag = Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["createTag"])(cls.name) + count.toString();\n      }\n      cls.data.tag = tag;\n\n      let healthConfig = game.settings.get("pf1", "healthConfig");\n      healthConfig  = cls.data.classType === "racial" ? healthConfig.hitdice.Racial : this.isPC ? healthConfig.hitdice.PC : healthConfig.hitdice.NPC;\n      const classType = cls.data.classType || "base";\n      data.classes[tag] = {\n        level: cls.data.level,\n        name: cls.name,\n        hd: cls.data.hd,\n        bab: cls.data.bab,\n        hp: healthConfig.auto,\n        savingThrows: {\n          fort: 0,\n          ref: 0,\n          will: 0,\n        },\n        fc: {\n          hp: classType === "base" ? cls.data.fc.hp.value : 0,\n          skill: classType === "base" ? cls.data.fc.skill.value : 0,\n          alt: classType === "base" ? cls.data.fc.alt.value : 0,\n        },\n      };\n\n      for (let k of Object.keys(data.classes[tag].savingThrows)) {\n        let formula = CONFIG.PF1.classSavingThrowFormulas[classType][cls.data.savingThrows[k].value];\n        if (formula == null) formula =  "0";\n        data.classes[tag].savingThrows[k] = new Roll(formula, {level: cls.data.level}).roll().total;\n      }\n    });\n\n\n    // Prepare modifier containers\n    data.attributes.mods = data.attributes.mods || {};\n    data.attributes.mods.skills = data.attributes.mods.skills || {};\n\n    // Set spell resistance\n    if (typeof data.attributes.sr.formula === "string" && data.attributes.sr.formula.length) {\n      try {\n        let roll = new Roll(data.attributes.sr.formula, data).roll();\n        data.attributes.sr.total = roll.total;\n      }\n      catch (e) {\n        console.error(`Could not calculate SR for actor ${this.name} with the following formula: \'${data.attributes.sr.formula}\'`);\n        data.attributes.sr.total = 0;\n      }\n    }\n    else {\n      data.attributes.sr.total = 0;\n    }\n\n    // Set spellbook info\n    for (let spellbook of Object.values(data.attributes.spells.spellbooks)) {\n      // Set CL\n      spellbook.cl.total = 0;\n      if (spellbook.cl.formula.length > 0) {\n        let roll = new Roll(spellbook.cl.formula, data).roll();\n        spellbook.cl.total += roll.total;\n      }\n      if (actorData.type === "npc") spellbook.cl.total += spellbook.cl.base;\n      if (spellbook.class === "_hd") {\n        spellbook.cl.total += data.attributes.hd.total;\n      }\n      else if (spellbook.class !== "" && data.classes[spellbook.class] != null) {\n        spellbook.cl.total += data.classes[spellbook.class].level;\n      }\n      // Add spell slots\n      spellbook.spells = spellbook.spells || {};\n      for (let a = 0; a < 10; a++) {\n        spellbook.spells[`spell${a}`] = spellbook.spells[`spell${a}`] || { value: 0, max: 0, base: null };\n      }\n    }\n\n    // Set labels\n    this.labels = {};\n    this.labels.race = this.race == null ? game.i18n.localize("PF1.Race") : game.i18n.localize("PF1.RaceTitle").format(this.race.name);\n    this.labels.alignment = CONFIG.PF1.alignments[this.data.data.details.alignment];\n\n    // Setup links\n    this.prepareItemLinks();\n  }\n\n  prepareItemLinks() {\n    if (!this.items) return;\n\n    for (let a of this.items) {\n      if (a.data.data.links == null) continue;\n\n      for (let l of Object.keys(a.data.data.links)) {\n        if (_misc_links_js__WEBPACK_IMPORTED_MODULE_5__["LinkFunctions"][l] != null) {\n          _misc_links_js__WEBPACK_IMPORTED_MODULE_5__["LinkFunctions"][l].call(this, a, a.data.data.links[l]);\n        }\n      }\n    }\n  }\n\n  _setSourceDetails(actorData, extraData, flags) {\n    if (flags == null) flags = {};\n    let sourceDetails = {};\n    // Get empty source arrays\n    for (let obj of Object.values(CONFIG.PF1.buffTargets)) {\n      for (let b of Object.keys(obj)) {\n        if (!b.startsWith("_")) {\n          let buffTargets = this._getChangeFlat(b, null, actorData.data);\n          if (!(buffTargets instanceof Array)) buffTargets = [buffTargets];\n          for (let bt of buffTargets) {\n            if (!sourceDetails[bt]) sourceDetails[bt] = [];\n          }\n        }\n      }\n    }\n    // Add additional source arrays not covered by changes\n    sourceDetails["data.attributes.bab.total"] = [];\n\n\n    // Add base values to certain bonuses\n    sourceDetails["data.attributes.ac.normal.total"].push({ name: game.i18n.localize("PF1.Base"), value: 10 });\n    sourceDetails["data.attributes.ac.touch.total"].push({ name: game.i18n.localize("PF1.Base"), value: 10 });\n    sourceDetails["data.attributes.ac.flatFooted.total"].push({ name: game.i18n.localize("PF1.Base"), value: 10 });\n    sourceDetails["data.attributes.cmd.total"].push({ name: game.i18n.localize("PF1.Base"), value: 10 });\n    sourceDetails["data.attributes.cmd.flatFootedTotal"].push({ name: game.i18n.localize("PF1.Base"), value: 10 });\n    for (let [a, abl] of Object.entries(actorData.data.abilities)) {\n      sourceDetails[`data.abilities.${a}.total`].push({ name: game.i18n.localize("PF1.Base"), value: abl.value });\n      // Add ability penalty, damage and drain\n      if (abl.damage != null && abl.damage !== 0) {\n        sourceDetails[`data.abilities.${a}.total`].push({ name: game.i18n.localize("PF1.AbilityDamage"), value: `-${Math.floor(Math.abs(abl.damage) / 2)} (Mod only)` });\n      }\n      if (abl.drain != null && abl.drain !== 0) {\n        sourceDetails[`data.abilities.${a}.total`].push({ name: game.i18n.localize("PF1.AbilityDrain"), value: -Math.abs(abl.drain) });\n      }\n    }\n\n    // Add AC and CMD details\n    {\n      const dex = actorData.data.abilities.dex.mod;\n      const maxDex = actorData.data.attributes.maxDexBonus;\n      const ac = {\n        normal: maxDex != null ? Math.min(maxDex, dex) : dex,\n        touch: maxDex != null ? Math.min(maxDex, dex) : dex,\n        ff: Math.min(0, dex),\n      };\n      const cmd = {\n        normal: maxDex != null ? Math.min(maxDex, dex) : dex,\n        ff: Math.min(0, dex),\n      };\n      if (ac.normal  !== 0) sourceDetails["data.attributes.ac.normal.total"].push({ name: game.i18n.localize("PF1.AbilityDex"), value: ac.normal });\n      if (ac.touch   !== 0) sourceDetails["data.attributes.ac.touch.total"].push({ name: game.i18n.localize("PF1.AbilityDex"), value: ac.touch });\n      if (ac.ff      !== 0) sourceDetails["data.attributes.ac.flatFooted.total"].push({ name: game.i18n.localize("PF1.AbilityDex"), value: ac.ff });\n      if (cmd.normal !== 0) sourceDetails["data.attributes.cmd.total"].push({ name: game.i18n.localize("PF1.AbilityDex"), value: cmd.normal });\n      if (cmd.ff     !== 0) sourceDetails["data.attributes.cmd.flatFootedTotal"].push({ name: game.i18n.localize("PF1.AbilityDex"), value: cmd.ff });\n    }\n\n    // Add extra data\n    for (let [changeTarget, changeGrp] of Object.entries(extraData)) {\n      for (let grp of Object.values(changeGrp)) {\n        if (grp.length > 0) {\n          sourceDetails[changeTarget] = sourceDetails[changeTarget] || [];\n          for (let src of grp) {\n            let srcInfo = this.constructor._translateSourceInfo(src.type, src.subtype, src.name);\n            // if (this.name === "Testy") console.log(changeTarget, src, srcInfo)\n            sourceDetails[changeTarget].push({\n              name: srcInfo,\n              value: src.value\n            });\n          }\n        }\n      }\n    }\n\n    // if (this.name === "Testy") console.log(sourceDetails)\n    this.sourceDetails = sourceDetails;\n  }\n\n  async refresh() {\n    if (this.hasPerm(game.user, "OWNER")) {\n      return this.update({});\n    }\n  }\n\n  /**\n   * Prepare Character type specific data\n   */\n  _prepareCharacterData(actorData) {\n    const data = actorData.data;\n\n    // Experience bar\n    let prior = this.getLevelExp(data.details.level.value - 1 || 0),\n      req = data.details.xp.max - prior;\n    data.details.xp.pct = Math.min(Math.round((data.details.xp.value - prior) * 100 / (req || 1)), 99.5);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare NPC type specific data\n   */\n  _prepareNPCData(data) {\n    // Kill Experience\n    try {\n      const crTotal = getProperty(this.data, "data.details.cr.total") || 1;\n      data.details.xp.value = this.getCRExp(crTotal);\n    }\n    catch (e) {\n      data.details.xp.value = this.getCRExp(1);\n    }\n  }\n\n  /**\n   * Return reduced movement speed.\n   * @param {Number} value - The non-reduced movement speed.\n   * @returns {Number} The reduced movement speed.\n   */\n  static getReducedMovementSpeed(value) {\n    const incr = game.settings.get("pf1", "units") === "metric" ? 1.5 : 5\n    \n    if (value <= 0) return value;\n    if (value < 2*incr) return incr;\n    value = Math.floor(value / incr) * incr;\n\n    let result = 0,\n      counter = 2;\n    for (let a = incr; a <= value; a += counter * incr) {\n      result += incr;\n      if (counter === 1) counter = 2;\n      else counter = 1;\n    }\n\n    return result;\n  }\n\n  /**\n   * Return increased amount of spell slots by ability score modifier.\n   * @param {Number} mod - The associated ability modifier.\n   * @param {Number} level - Spell level.\n   * @returns {Number} Amount of spell levels to increase.\n   */\n  static getSpellSlotIncrease(mod, level) {\n    if (level === 0) return 0;\n    if (mod <= 0) return 0;\n    return Math.max(0, Math.ceil(((mod + 1) - level) / 4));\n  }\n\n  /**\n   * Return the amount of experience required to gain a certain character level.\n   * @param level {Number}  The desired level\n   * @return {Number}       The XP required\n   */\n  getLevelExp(level) {\n    const expConfig = game.settings.get("pf1", "experienceConfig");\n    const expTrack = expConfig.track;\n    // Preset experience tracks\n    if (["fast", "medium", "slow"].includes(expTrack)) {\n      const levels = CONFIG.PF1.CHARACTER_EXP_LEVELS[expTrack];\n      return levels[Math.min(level, levels.length - 1)];\n    }\n    // Custom formula experience track\n    let totalXP = 0;\n    if (expConfig.custom.formula.length > 0) {\n      for (let a = 0; a < level; a++) {\n        const rollData = this.getRollData();\n        rollData.level = a+1;\n        const roll = new Roll(expConfig.custom.formula, rollData).roll();\n        totalXP += roll.total;\n      }\n    }\n    return Math.max(1, totalXP);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return the amount of experience granted by killing a creature of a certain CR.\n   * @param cr {Number}     The creature\'s challenge rating\n   * @return {Number}       The amount of experience granted per kill\n   */\n  getCRExp(cr) {\n    if (cr < 1.0) return Math.max(400 * cr, 10);\n    return CONFIG.PF1.CR_EXP_LEVELS[cr];\n  }\n\n  /* -------------------------------------------- */\n  /*  Socket Listeners and Handlers\n  /* -------------------------------------------- */\n\n  /**\n   * Extend the default update method to enhance data before submission.\n   * See the parent Entity.update method for full details.\n   *\n   * @param {Object} data     The data with which to update the Actor\n   * @param {Object} options  Additional options which customize the update workflow\n   * @return {Promise}        A Promise which resolves to the updated Entity\n   */\n  async update(data, options={}) {\n    // Fix skill ranks after TinyMCE edit\n    let expandedData = expandObject(data);\n    if (expandedData.data != null && expandedData.data.skills != null) {\n      for (let [s, skl] of Object.entries(expandedData.data.skills)) {\n        let curSkl = this.data.data.skills[s];\n        if (skl == null) continue;\n        if (typeof skl.rank !== "number") skl.rank = 0;\n        if (skl.subSkills != null) {\n          for (let skl2 of Object.values(skl.subSkills)) {\n            if (skl2 == null) continue;\n            if (typeof skl2.rank !== "number") skl2.rank = 0;\n          }\n        }\n\n        // Rename custom skills\n        if (curSkl != null && curSkl.custom && skl.name != null) {\n          let tag = Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["createTag"])(skl.name || "skill");\n          let count = 1;\n          const skillData = getProperty(this.data, `data.skills.${tag}`) || {};\n          while (this.data.data.skills[tag] != null && this.data.data.skills[tag] != curSkl) {\n            count++;\n            tag = Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["createTag"])(skillData.name || "skill") + count.toString();\n          }\n\n          if (s !== tag) {\n            expandedData.data.skills[tag] = mergeObject(curSkl, skl);\n            expandedData.data.skills[s] = null;\n          }\n        }\n      }\n      data = flattenObject(expandedData);\n    }\n\n    // Make certain variables absolute\n    const _absoluteKeys = Object.keys(this.data.data.abilities).reduce((arr, abl) => {\n      arr.push(`data.abilities.${abl}.userPenalty`, `data.abilities.${abl}.damage`, `data.abilities.${abl}.drain`);\n      return arr;\n    }, []).concat("data.attributes.energyDrain").filter(k => { return data[k] != null; });\n    for (const k of _absoluteKeys) {\n      data[k] = Math.abs(data[k]);\n    }\n\n    // Apply changes in Actor size to Token width/height\n    if ( data["data.traits.size"] && this.data.data.traits.size !== data["data.traits.size"] ) {\n      let size = CONFIG.PF1.tokenSizes[data["data.traits.size"]];\n      let tokens = this.getActiveTokens();\n      if (this.isToken) tokens.push(this.token);\n      tokens.forEach(o => { o.update({ width: size.w, height: size.h, scale: size.scale }); });\n      if (!this.isToken) {\n        data["token.width"] = size.w;\n        data["token.height"] = size.h;\n        data["token.scale"] = size.scale;\n      }\n    }\n\n    // Send resource updates to item\n    let updatedResources = [];\n    for (let key of Object.keys(data)) {\n      if (key.match(/^data\\.resources\\.([a-zA-Z0-9]+)/)) {\n        const resourceTag = RegExp.$1;\n        if (updatedResources.includes(resourceTag)) continue;\n        updatedResources.push(resourceTag);\n\n        const resource = this.data.data.resources[resourceTag];\n        if (resource != null) {\n          const itemId = resource._id;\n          const item = this.getOwnedItem(itemId);\n          if (item == null) continue;\n\n          const itemUpdateData = {};\n          let key = `data.resources.${resourceTag}.value`;\n          if (data[key] != null && data[key] !== item.data.data.uses.value) {\n            itemUpdateData["data.uses.value"] = data[key];\n          }\n          key = `data.resources.${resourceTag}.max`;\n          if (data[key] != null && data[key] !== item.data.data.uses.max) {\n            itemUpdateData["data.uses.max"] = data[key];\n          }\n          if (Object.keys(itemUpdateData).length > 0) item.update(itemUpdateData);\n        }\n      }\n    }\n\n    // Clean up old item resources\n    for (let [tag, res] of Object.entries(getProperty(this.data, "data.resources") || {})) {\n      if (!res) continue;\n      if (!res._id) continue;\n      const itemId = res._id;\n      const item = this.getOwnedItem(itemId);\n      // Remove resource from token bars\n      if (item == null) {\n        const tokens = this.getActiveTokens();\n        tokens.forEach(token => {\n          ["bar1", "bar2"].forEach(b => {\n            const barAttr = token.getBarAttribute(b);\n            if (barAttr == null) {\n              return;\n            }\n            if (barAttr.attribute === `resources.${tag}`) {\n              const tokenUpdateData = {};\n              tokenUpdateData[`${b}.attribute`] = null;\n              token.update(token.scene._id, tokenUpdateData);\n            }\n          });\n        });\n      }\n      // Remove resource\n      if (item == null || Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["createTag"])(item.name) !== tag) {\n        data[`data.resources.-=${tag}`] = null;\n      }\n    }\n\n    this._updateExp(data);\n\n    // Update changes\n    let diff = data;\n    if (options.updateChanges !== false) {\n      const updateObj = await this._updateChanges({ data: data });\n      if (updateObj.diff.items) delete updateObj.diff.items;\n      diff = mergeObject(diff, updateObj.diff);\n    }\n    // Diff token data\n    if (data.token != null) {\n      diff.token = diffObject(this.data.token, data.token);\n    }\n\n    if (Object.keys(diff).length) {\n      return super.update(diff, options);\n    }\n    return false;\n  }\n\n  _onUpdate(data, options, userId, context) {\n    if (hasProperty(data, "data.attributes.vision.lowLight") || hasProperty(data, "data.attributes.vision.darkvision")) {\n      canvas.sight.initializeTokens();\n    }\n\n    for (let i of this.items.values()) {\n      let itemUpdateData = {};\n\n      i._updateMaxUses(itemUpdateData, { actorData: data });\n\n      const itemDiff = diffObject(flattenObject(i.data), itemUpdateData);\n      if (Object.keys(itemDiff).length > 0) i.update(itemDiff);\n    }\n\n    return super._onUpdate(data, options, userId, context);\n  }\n\n  /**\n   * Makes sure experience values are correct in update data.\n   * @param {Object} data - The update data, as per ActorPF.update()\n   * @returns {Boolean} Whether to force an update or not.\n   */\n  _updateExp(data) {\n    const classes = this.items.filter(o => o.type === "class" && o.data.data.classType !== "mythic");\n    console.log(classes);\n    const level = classes.reduce((cur, o) => {\n      return cur + o.data.data.level;\n    }, 0);\n    if (getProperty(this.data, "data.details.level.value") !== level) {\n      data["data.details.level.value"] = level;\n    }\n\n    // The following is not for NPCs\n    if (this.data.type !== "character") return;\n\n    // Translate update exp value to number\n    let newExp = data["data.details.xp.value"],\n      resetExp = false;\n    if (typeof newExp === "string") {\n      if (newExp.match(/^\\+([0-9]+)$/)) {\n        newExp = this.data.data.details.xp.value + parseInt(RegExp.$1);\n      }\n      else if (newExp.match(/^-([0-9]+)$/)) {\n        newExp = this.data.data.details.xp.value - parseInt(RegExp.$1);\n      }\n      else if (newExp === "") {\n        resetExp = true;\n      }\n      else {\n        newExp = parseInt(newExp);\n        if (Number.isNaN(newExp)) newExp = this.data.data.details.xp.value;\n      }\n\n      if (typeof newExp === "number" && newExp !== getProperty(this.data, "data.details.xp.value")) {\n        data["data.details.xp.value"] = newExp;\n      }\n    }\n    const maxExp = this.getLevelExp(level);\n    if (maxExp !== getProperty(this.data, "data.details.xp.max")) {\n      data["data.details.xp.max"] = maxExp;\n    }\n\n    const minExp = level > 0 ? this.getLevelExp(level - 1) : 0;\n    if (resetExp) data["data.details.xp.value"] = minExp;\n  }\n\n  async _onCreate(data, options, userId, context) {\n    if (userId === game.user._id) {\n      await this._updateChanges();\n    }\n\n    super._onCreate(data, options, userId, context);\n  }\n\n  updateItemResources(item) {\n    if (!(item instanceof Item)) return;\n    if (!this.hasPerm(game.user, "OWNER")) return;\n\n    if (item.data.data.uses != null && item.data.data.activation != null && item.data.data.activation.type !== "") {\n      const itemTag = Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["createTag"])(item.data.name);\n      let curUses = item.data.data.uses;\n\n      if (this.data.data.resources == null) this.data.data.resources = {};\n      if (this.data.data.resources[itemTag] == null) this.data.data.resources[itemTag] = { value: 0, max: 1, _id: "" };\n\n      const updateData = {};\n      if (this.data.data.resources[itemTag].value !== curUses.value) {\n        updateData[`data.resources.${itemTag}.value`] = curUses.value;\n      }\n      if (this.data.data.resources[itemTag].max !== curUses.max) {\n        updateData[`data.resources.${itemTag}.max`] = curUses.max;\n      }\n      if (this.data.data.resources[itemTag]._id !== item._id ) {\n        updateData[`data.resources.${itemTag}._id`] = item._id;\n      }\n      if (Object.keys(updateData).length > 0) this.update(updateData);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * See the base Actor class for API documentation of this method\n   */\n  async createOwnedItem(itemData, options) {\n    let t = itemData.type;\n    let initial = {};\n    // Assume NPCs are always proficient with weapons and always have spells prepared\n    if ( !this.isPC ) {\n      if ( t === "weapon" ) initial["data.proficient"] = true;\n      if ( ["weapon", "equipment"].includes(t) ) initial["data.equipped"] = true;\n    }\n    if ( t === "spell" ) {\n      if (this.sheet != null && this.sheet._spellbookTab != null) {\n        initial["data.spellbook"] = this.sheet._spellbookTab;\n      }\n    }\n\n    mergeObject(itemData, initial);\n    return super.createOwnedItem(itemData, options);\n  }\n\n  /* -------------------------------------------- */\n  /*  Rolls                                       */\n  /* -------------------------------------------- */\n\n  /**\n   * Cast a Spell, consuming a spell slot of a certain level\n   * @param {ItemPF} item   The spell being cast by the actor\n   * @param {MouseEvent} ev The click event\n   */\n  async useSpell(item, ev, {skipDialog=false}={}) {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n    if ( item.data.type !== "spell" ) throw new Error("Wrong Item type");\n\n    if (getProperty(item.data, "data.preparation.mode") !== "atwill" && item.getSpellUses() <= 0) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoSpellsLeft"));\n\n    // Invoke the Item roll\n    if (item.hasAction) return item.useAttack({ev: ev, skipDialog: skipDialog});\n    item.addSpellUses(-1);\n    return item.roll();\n  }\n\n  async createAttackFromWeapon(item) {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    if (item.data.type !== "weapon") throw new Error("Wrong Item type");\n\n    // Get attack template\n    let attackData = { data: {} };\n    for (const template of game.data.system.template.Item.attack.templates) {\n      mergeObject(attackData.data, game.data.system.template.Item.templates[template]);\n    }\n    mergeObject(attackData.data, duplicate(game.data.system.template.Item.attack));\n    attackData = flattenObject(attackData);\n\n    // Add ability modifiers\n    const isMelee = getProperty(item.data, "data.weaponSubtype") !== "ranged" && !getProperty(item.data, "data.properties.thr");\n    if (isMelee) attackData["data.ability.attack"] = "str";\n    else attackData["data.ability.attack"] = "dex";\n    if (isMelee || item.data.data.properties["thr"] === true) {\n      attackData["data.ability.damage"] = "str";\n      if (item.data.data.weaponSubtype === "2h" && isMelee) attackData["data.ability.damageMult"] = 1.5;\n    }\n\n    // Add misc things\n    attackData["type"] = "attack";\n    attackData["name"] = item.data.name;\n    attackData["data.masterwork"] = item.data.data.masterwork;\n    attackData["data.attackType"] = "weapon";\n    attackData["data.enh"] = item.data.data.enh;\n    attackData["data.ability.critRange"] = item.data.data.weaponData.critRange || 20;\n    attackData["data.ability.critMult"] = item.data.data.weaponData.critMult || 2;\n    attackData["data.actionType"] = isMelee ? "mwak" : "rwak";\n    attackData["data.activation.type"] = "attack";\n    attackData["data.duration.units"] = "inst";\n    attackData["img"] = item.data.img;\n\n    // Add additional attacks\n    let extraAttacks = [];\n    for (let a = 5; a < this.data.data.attributes.bab.total; a += 5) {\n      extraAttacks = extraAttacks.concat([[`-${a}`, `${game.i18n.localize("PF1.Attack")} ${Math.floor((a+5) / 5)}`]]);\n    }\n    if (extraAttacks.length > 0) attackData["data.attackParts"] = extraAttacks;\n\n    // Add damage formula\n    if (item.data.data.weaponData.damageRoll) {\n      const die = item.data.data.weaponData.damageRoll || "1d4";\n      let part = die;\n      let dieCount = 1,\n        dieSides = 4;\n      if (die.match(/^([0-9]+)d([0-9]+)$/)) {\n        dieCount = parseInt(RegExp.$1);\n        dieSides = parseInt(RegExp.$2);\n        // const weaponSize = Object.keys(CONFIG.PF1.sizeChart).indexOf(item.data.data.weaponData.size) - 4;\n        part = `sizeRoll(${dieCount}, ${dieSides}, @size, @critMult)`;\n      }\n      const bonusFormula = getProperty(item.data, "data.weaponData.damageFormula");\n      if (bonusFormula != null && bonusFormula.length) part = `${part} + ${bonusFormula}`;\n      attackData["data.damage.parts"] = [[part, item.data.data.weaponData.damageType || ""]];\n    }\n\n    // Add attack bonus formula\n    {\n      const bonusFormula = getProperty(item.data, "data.weaponData.attackFormula");\n      if (bonusFormula != null && bonusFormula.length) attackData["data.attackBonus"] = bonusFormula;\n    }\n\n    // Add range\n    if (!isMelee && getProperty(item.data, "data.weaponData.range") != null) {\n      attackData["data.range.units"] = "ft";\n      attackData["data.range.value"] = getProperty(item.data, "data.weaponData.range").toString();\n    }\n\n    // Create attack\n    if (hasProperty(attackData, "data.templates")) delete attackData["data.templates"];\n    const itemData = await this.createOwnedItem(expandObject(attackData));\n\n    // Create link\n    const link = {\n      id: itemData._id,\n      dataType: "data",\n    };\n    const links = [...(getProperty(item.data, "data.links.children") || []), link];\n    await item.update({"data.links.children": links});\n\n    ui.notifications.info(game.i18n.localize("PF1.NotificationCreatedAttack").format(item.data.name));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll a Skill Check\n   * Prompt the user for input regarding Advantage/Disadvantage and any Situational Bonus\n   * @param {string} skillId      The skill id (e.g. "ins")\n   * @param {Object} options      Options which configure how the skill check is rolled\n   */\n  rollSkill(skillId, options={}) {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    let skl, sklName;\n    const skillParts = skillId.split("."),\n      isSubSkill = skillParts[1] === "subSkills" && skillParts.length === 3;\n    if (isSubSkill) {\n      skillId = skillParts[0];\n      skl = this.data.data.skills[skillId].subSkills[skillParts[2]];\n      sklName = `${CONFIG.PF1.skills[skillId]} (${skl.name})`;\n    }\n    else {\n      skl = this.data.data.skills[skillId];\n      if (skl.name != null) sklName = skl.name;\n      else sklName = CONFIG.PF1.skills[skillId];\n    }\n\n    // Add contextual attack string\n    let notes = [];\n    const rollData = duplicate(this.data.data);\n    const noteObjects = this.getContextNotes(`skill.${isSubSkill ? skillParts[2] : skillId}`);\n    for (let noteObj of noteObjects) {\n      rollData.item = {};\n      if (noteObj.item != null) rollData.item = duplicate(noteObj.item.data.data);\n\n      for (let note of noteObj.notes) {\n        notes.push(...note.split(/[\\n\\r]+/).map(o => TextEditor.enrichHTML(o, {rollData: rollData})));\n      }\n    }\n    // Add untrained note\n    if (skl.rt && skl.rank === 0) {\n      notes.push(game.i18n.localize("PF1.Untrained"));\n    }\n\n    let props = [];\n    if (notes.length > 0) props.push({ header: "Notes", value: notes });\n    return _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].d20Roll({\n      event: options.event,\n      fastForward: options.skipDialog === true,\n      staticRoll: options.staticRoll,\n      parts: ["@mod"],\n      data: {mod: skl.mod},\n      title: game.i18n.localize("PF1.SkillCheck").format(sklName),\n      speaker: ChatMessage.getSpeaker({actor: this}),\n      chatTemplate: "systems/pf1/templates/chat/roll-ext.html",\n      chatTemplateData: { hasProperties: props.length > 0, properties: props }\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll a generic ability test or saving throw.\n   * Prompt the user for input on which variety of roll they want to do.\n   * @param {String} abilityId     The ability id (e.g. "str")\n   * @param {Object} options      Options which configure how ability tests or saving throws are rolled\n   */\n  rollAbility(abilityId, options={}) {\n    this.rollAbilityTest(abilityId, options);\n  }\n\n  rollBAB(options={}) {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    return _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].d20Roll({\n      event: options.event,\n      parts: ["@mod"],\n      data: {mod: this.data.data.attributes.bab.total},\n      title: game.i18n.localize("PF1.BAB"),\n      speaker: ChatMessage.getSpeaker({actor: this}),\n      takeTwenty: false\n    });\n  }\n\n  rollCMB(options={}) {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    // Add contextual notes\n    let notes = [];\n    const rollData = duplicate(this.data.data);\n    const noteObjects = this.getContextNotes("misc.cmb");\n    for (let noteObj of noteObjects) {\n      rollData.item = {};\n      if (noteObj.item != null) rollData.item = duplicate(noteObj.item.data.data);\n\n      for (let note of noteObj.notes) {\n        if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["isMinimumCoreVersion"])("0.5.2")) {\n          let noteStr = "";\n          if (note.length > 0) {\n            noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].messageRoll({\n              data: rollData,\n              msgStr: note\n            });\n          }\n          if (noteStr.length > 0) notes.push(...noteStr.split(/[\\n\\r]+/));\n        }\n        else notes.push(...note.split(/[\\n\\r]+/).map(o => TextEditor.enrichHTML(o, {rollData: rollData})));\n      }\n    }\n    // Add grapple note\n    if (this.data.data.attributes.conditions.grappled) {\n      notes.push("+2 to Grapple");\n    }\n\n    let props = [];\n    if (notes.length > 0) props.push({ header: game.i18n.localize("PF1.Notes"), value: notes });\n    return _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].d20Roll({\n      event: options.event,\n      parts: ["@mod"],\n      data: {mod: this.data.data.attributes.cmb.total},\n      title: game.i18n.localize("PF1.CMB"),\n      speaker: ChatMessage.getSpeaker({actor: this}),\n      takeTwenty: false,\n      chatTemplate: "systems/pf1/templates/chat/roll-ext.html",\n      chatTemplateData: { hasProperties: props.length > 0, properties: props }\n    });\n  }\n\n  getDefenseHeaders() {\n    const data = this.data.data;\n    const headers = [];\n\n    const reSplit = CONFIG.PF1.re.traitSeparator;\n    let misc = [];\n\n    // Damage reduction\n    if (data.traits.dr.length) {\n      headers.push({ header: game.i18n.localize("PF1.DamRed"), value: data.traits.dr.split(reSplit) });\n    }\n    // Energy resistance\n    if (data.traits.eres.length) {\n      headers.push({ header: game.i18n.localize("PF1.EnRes"), value: data.traits.eres.split(reSplit) });\n    }\n    // Damage vulnerabilities\n    if (data.traits.dv.value.length || data.traits.dv.custom.length) {\n      const value = [].concat(\n        data.traits.dv.value.map(obj => { return CONFIG.PF1.damageTypes[obj]; }),\n        data.traits.dv.custom.length > 0 ? data.traits.dv.custom.split(";") : [],\n      );\n      headers.push({ header: game.i18n.localize("PF1.DamVuln"), value: value });\n    }\n    // Condition resistance\n    if (data.traits.cres.length) {\n      headers.push({ header: game.i18n.localize("PF1.ConRes"), value: data.traits.cres.split(reSplit) });\n    }\n    // Immunities\n    if (data.traits.di.value.length || data.traits.di.custom.length ||\n      data.traits.ci.value.length || data.traits.ci.custom.length) {\n      const value = [].concat(\n        data.traits.di.value.map(obj => { return CONFIG.PF1.damageTypes[obj]; }),\n        data.traits.di.custom.length > 0 ? data.traits.di.custom.split(";") : [],\n        data.traits.ci.value.map(obj => { return CONFIG.PF1.conditionTypes[obj]; }),\n        data.traits.ci.custom.length > 0 ? data.traits.ci.custom.split(";") : [],\n      );\n      headers.push({ header: game.i18n.localize("PF1.ImmunityPlural"), value: value });\n    }\n    // Spell Resistance\n    if (data.attributes.sr.total > 0) {\n      misc.push(game.i18n.localize("PF1.SpellResistanceNote").format(data.attributes.sr.total));\n    }\n\n    if (misc.length > 0) {\n      headers.push({ header: game.i18n.localize("PF1.MiscShort"), value: misc });\n    }\n\n    return headers;\n  }\n\n  async rollInitiative() {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    let formula = Object(_combat_js__WEBPACK_IMPORTED_MODULE_4__["_getInitiativeFormula"])(this);\n    let overrideRollMode = null,\n      bonus = "",\n      stop = false;\n    if (keyboard.isDown("Shift")) {\n      const dialogData = await Combat.showInitiativeDialog(formula);\n      overrideRollMode = dialogData.rollMode;\n      bonus = dialogData.bonus || "";\n      stop = dialogData.stop || false;\n    }\n\n    if (stop) return;\n\n    const actorData = this.getRollData();\n    // Add bonus\n    actorData.bonus = bonus;\n    if (bonus.length > 0) formula += " + @bonus";\n\n    // Roll initiative\n    const rollMode = overrideRollMode;\n    const roll = new Roll(formula, actorData).roll();\n\n    // Construct chat message data\n    let messageData = {\n      speaker: {\n        scene: canvas.scene._id,\n        actor: this._id,\n        token: this.token ? this.token._id : null,\n        alias: this.token ? this.token.name : null,\n      },\n      flavor: game.i18n.localize("PF1.RollsForInitiative").format(this.token ? this.token.name : this.name),\n    };\n    roll.toMessage(messageData, {rollMode});\n  }\n\n  rollSavingThrow(savingThrowId, options={}) {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    // Add contextual notes\n    let notes = [];\n    const rollData = duplicate(this.data.data);\n    const noteObjects = this.getContextNotes(`savingThrow.${savingThrowId}`);\n    for (let noteObj of noteObjects) {\n      rollData.item = {};\n      if (noteObj.item != null) rollData.item = duplicate(noteObj.item.data.data);\n\n      for (let note of noteObj.notes) {\n        if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["isMinimumCoreVersion"])("0.5.2")) {\n          let noteStr = "";\n          if (note.length > 0) {\n            noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].messageRoll({\n              data: rollData,\n              msgStr: note\n            });\n          }\n          if (noteStr.length > 0) notes.push(...noteStr.split(/[\\n\\r]+/));\n        }\n        else notes.push(...note.split(/[\\n\\r]+/).map(o => TextEditor.enrichHTML(o, {rollData: rollData})));\n      }\n    }\n\n    // Roll saving throw\n    let props = this.getDefenseHeaders();\n    if (notes.length > 0) props.push({ header: game.i18n.localize("PF1.Notes"), value: notes });\n    const label = CONFIG.PF1.savingThrows[savingThrowId];\n    const savingThrow = this.data.data.attributes.savingThrows[savingThrowId];\n    return _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].d20Roll({\n      event: options.event,\n      parts: ["@mod"],\n      situational: true,\n      data: { mod: savingThrow.total },\n      title: game.i18n.localize("PF1.SavingThrowRoll").format(label),\n      speaker: ChatMessage.getSpeaker({actor: this}),\n      takeTwenty: false,\n      chatTemplate: "systems/pf1/templates/chat/roll-ext.html",\n      chatTemplateData: { hasProperties: props.length > 0, properties: props }\n    });\n  };\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll an Ability Test\n   * Prompt the user for input regarding Advantage/Disadvantage and any Situational Bonus\n   * @param {String} abilityId    The ability ID (e.g. "str")\n   * @param {Object} options      Options which configure how ability tests are rolled\n   */\n  rollAbilityTest(abilityId, options={}) {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    // Add contextual notes\n    let notes = [];\n    const rollData = duplicate(this.data.data);\n    const noteObjects = this.getContextNotes(`abilityChecks.${abilityId}`);\n    for (let noteObj of noteObjects) {\n      rollData.item = {};\n      if (noteObj.item != null) rollData.item = duplicate(noteObj.item.data.data);\n\n      for (let note of noteObj.notes) {\n        if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["isMinimumCoreVersion"])("0.5.2")) {\n          let noteStr = "";\n          if (note.length > 0) {\n            noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].messageRoll({\n              data: rollData,\n              msgStr: note\n            });\n          }\n          if (noteStr.length > 0) notes.push(...noteStr.split(/[\\n\\r]+/));\n        }\n        else notes.push(...note.split(/[\\n\\r]+/).map(o => TextEditor.enrichHTML(o, {rollData: rollData})));\n      }\n    }\n\n    let props = this.getDefenseHeaders();\n    if (notes.length > 0) props.push({ header: "Notes", value: notes });\n    const label = CONFIG.PF1.abilities[abilityId];\n    const abl = this.data.data.abilities[abilityId];\n    return _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].d20Roll({\n      event: options.event,\n      parts: ["@mod + @checkMod - @energyDrain"],\n      data: {mod: abl.mod, checkMod: abl.checkMod, energyDrain: this.data.data.attributes.energyDrain},\n      title: game.i18n.localize("PF1.AbilityTest").format(label),\n      speaker: ChatMessage.getSpeaker({actor: this}),\n      chatTemplate: "systems/pf1/templates/chat/roll-ext.html",\n      chatTemplateData: { hasProperties: props.length > 0, properties: props }\n    });\n  }\n\n  /**\n   * Show defenses in chat\n   */\n  rollDefenses() {\n    if (!this.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n    const rollData = duplicate(this.data.data);\n\n    // Add contextual AC notes\n    let acNotes = [];\n    if (this.data.data.attributes.acNotes.length > 0) acNotes = this.data.data.attributes.acNotes.split(/[\\n\\r]+/);\n    const acNoteObjects = this.getContextNotes("misc.ac");\n    for (let noteObj of acNoteObjects) {\n      rollData.item = {};\n      if (noteObj.item != null) rollData.item = duplicate(noteObj.item.data.data);\n\n      for (let note of noteObj.notes) {\n        if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["isMinimumCoreVersion"])("0.5.2")) {\n          let noteStr = "";\n          if (note.length > 0) {\n            noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].messageRoll({\n              data: rollData,\n              msgStr: note\n            });\n          }\n          if (noteStr.length > 0) acNotes.push(...noteStr.split(/[\\n\\r]+/));\n        }\n        else acNotes.push(...note.split(/[\\n\\r]+/).map(o => TextEditor.enrichHTML(o, {rollData: rollData})));\n      }\n    }\n\n    // Add contextual CMD notes\n    let cmdNotes = [];\n    if (this.data.data.attributes.cmdNotes.length > 0) cmdNotes = this.data.data.attributes.cmdNotes.split(/[\\n\\r]+/);\n    const cmdNoteObjects = this.getContextNotes("misc.cmd");\n    for (let noteObj of cmdNoteObjects) {\n      rollData.item = {};\n      if (noteObj.item != null) rollData.item = duplicate(noteObj.item.data.data);\n\n      for (let note of noteObj.notes) {\n        if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["isMinimumCoreVersion"])("0.5.2")) {\n          let noteStr = "";\n          if (note.length > 0) {\n            noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].messageRoll({\n              data: rollData,\n              msgStr: note\n            });\n          }\n          if (noteStr.length > 0) cmdDotes.push(...noteStr.split(/[\\n\\r]+/));\n        }\n        else cmdNotes.push(...note.split(/[\\n\\r]+/).map(o => TextEditor.enrichHTML(o, {rollData: rollData})));\n      }\n    }\n\n    // Add contextual SR notes\n    let srNotes = [];\n    if (this.data.data.attributes.srNotes.length > 0) srNotes = this.data.data.attributes.srNotes.split(/[\\n\\r]+/);\n    const srNoteObjects = this.getContextNotes("misc.sr");\n    for (let noteObj of srNoteObjects) {\n      rollData.item = {};\n      if (noteObj.item != null) rollData.item = duplicate(noteObj.item.data.data);\n\n      for (let note of noteObj.notes) {\n        if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["isMinimumCoreVersion"])("0.5.2")) {\n          let noteStr = "";\n          if (note.length > 0) {\n            noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].messageRoll({\n              data: rollData,\n              msgStr: note\n            });\n          }\n          if (noteStr.length > 0) srNotes.push(...noteStr.split(/[\\n\\r]+/));\n        }\n        else srNotes.push(...note.split(/[\\n\\r]+/).map(o => TextEditor.enrichHTML(o, {rollData: rollData})));\n      }\n    }\n\n    // Add misc data\n    const reSplit = CONFIG.PF1.re.traitSeparator;\n    // Damage Reduction\n    let drNotes = [];\n    if (this.data.data.traits.dr.length) {\n      drNotes = this.data.data.traits.dr.split(reSplit);\n    }\n    // Energy Resistance\n    let energyResistance = [];\n    if (this.data.data.traits.eres.length) {\n      energyResistance.push(...this.data.data.traits.eres.split(reSplit));\n    }\n    // Damage Immunity\n    if (this.data.data.traits.di.value.length || this.data.data.traits.di.custom.length) {\n      const values = [\n        ...this.data.data.traits.di.value.map(obj => { return CONFIG.PF1.damageTypes[obj]; }),\n        ...this.data.data.traits.di.custom.length > 0 ? this.data.data.traits.di.custom.split(reSplit) : [],\n      ];\n      energyResistance.push(...values.map(o => game.i18n.localize("PF1.ImmuneTo").format(o)));\n    }\n    // Damage Vulnerability\n    if (this.data.data.traits.dv.value.length || this.data.data.traits.dv.custom.length) {\n      const values = [\n        ...this.data.data.traits.dv.value.map(obj => { return CONFIG.PF1.damageTypes[obj]; }),\n        ...this.data.data.traits.dv.custom.length > 0 ? this.data.data.traits.dv.custom.split(reSplit) : [],\n      ];\n      energyResistance.push(...values.map(o => game.i18n.localize("PF1.VulnerableTo").format(o)));\n    }\n\n    // Create message\n    const d = this.data.data;\n    const data = {\n      actor: this,\n      name: this.name,\n      tokenId: this.token ? `${this.token.scene._id}.${this.token.id}` : null,\n      ac: {\n        normal: d.attributes.ac.normal.total,\n        touch: d.attributes.ac.touch.total,\n        flatFooted: d.attributes.ac.flatFooted.total,\n        notes: acNotes,\n      },\n      cmd: {\n        normal: d.attributes.cmd.total,\n        flatFooted: d.attributes.cmd.flatFootedTotal,\n        notes: cmdNotes,\n      },\n      misc: {\n        sr: d.attributes.sr.total,\n        srNotes: srNotes,\n        drNotes: drNotes,\n        energyResistance: energyResistance,\n      },\n    };\n    // Add regeneration and fast healing\n    if ((getProperty(d, "traits.fastHealing") || "").length || (getProperty(d, "traits.regen") || "").length) {\n      data.regen = {\n        regen: d.traits.regen,\n        fastHealing: d.traits.fastHealing,\n      };\n    }\n    Object(_chat_js__WEBPACK_IMPORTED_MODULE_3__["createCustomChatMessage"])("systems/pf1/templates/chat/defenses.html", data, {\n      speaker: ChatMessage.getSpeaker({ actor: this.actor }),\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Apply rolled dice damage to the token or tokens which are currently controlled.\n   * This allows for damage to be scaled by a multiplier to account for healing, critical hits, or resistance\n   *\n   * @param {Number} value   The amount of damage to deal.\n   * @return {Promise}\n   */\n  static async applyDamage(value) {\n    const promises = [];\n    for (let t of canvas.tokens.controlled) {\n      let a = t.actor,\n          hp = a.data.data.attributes.hp,\n          tmp = parseInt(hp.temp) || 0,\n          dt = value > 0 ? Math.min(tmp, value) : 0;\n      if (!a.hasPerm(game.user, "OWNER")) {\n        ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n        continue;\n      }\n      promises.push(t.actor.update({\n        "data.attributes.hp.temp": tmp - dt,\n        "data.attributes.hp.value": Math.clamped(hp.value - (value - dt), -100, hp.max)\n      }));\n    }\n    return Promise.all(promises);\n  }\n\n  getSkill(key) {\n    for (let [k, s] of Object.entries(this.data.data.skills)) {\n      if (k === key) return s;\n      if (s.subSkills != null) {\n        for (let [k2, s2] of Object.entries(s.subSkills)) {\n          if (k2 === key) return s2;\n        }\n      }\n    }\n    return null;\n  }\n\n  get allNotes() {\n    let result = [];\n\n    const noteItems = this.items.filter(o => { return o.data.data.contextNotes != null; });\n\n    for (let o of noteItems) {\n      if (o.type === "buff" && !o.data.data.active) continue;\n      if ((o.type === "equipment" || o.type === "weapon") && !o.data.data.equipped) continue;\n      if (!o.data.data.contextNotes || o.data.data.contextNotes.length === 0) continue;\n      result.push({ notes: o.data.data.contextNotes, item: o });\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an array with all the active context-sensitive notes for the given context on this actor.\n   * @param {String} context - The context to draw from.\n   */\n  getContextNotes(context) {\n    let result = this.allNotes;\n\n    // Attacks\n    if (context.match(/^attacks\\.(.+)/)) {\n      const key = RegExp.$1;\n      for (let note of result) {\n        note.notes = note.notes.filter(o => {\n          return (o.target === "attacks" && o.subTarget === key);\n        }).map(o => { return o.text; });\n      }\n\n      return result;\n    }\n\n    // Skill\n    if (context.match(/^skill\\.(.+)/)) {\n      const skillKey = RegExp.$1;\n      const skill = this.getSkill(skillKey);\n      const ability = skill.ability;\n      for (let note of result) {\n        note.notes = note.notes.filter(o => {\n          return (o.target === "skill" && o.subTarget === context) || (o.target === "skills" && (o.subTarget === `${ability}Skills` || o.subTarget === "skills"));\n        }).map(o => { return o.text; });\n      }\n\n      if (skill.notes != null && skill.notes !== "") {\n        result.push({ notes: [skill.notes], item: null });\n      }\n\n      return result;\n    }\n\n    // Saving throws\n    if (context.match(/^savingThrow\\.(.+)/)) {\n      const saveKey = RegExp.$1;\n      for (let note of result) {\n        note.notes = note.notes.filter(o => {\n          return o.target === "savingThrows" && (o.subTarget === saveKey || o.subTarget === "allSavingThrows");\n        }).map(o => { return o.text; });\n      }\n\n      if (this.data.data.attributes.saveNotes != null && this.data.data.attributes.saveNotes !== "") {\n        result.push({ notes: [this.data.data.attributes.saveNotes], item: null });\n      }\n\n      return result;\n    }\n\n    // Ability checks\n    if (context.match(/^abilityChecks\\.(.+)/)) {\n      const ablKey = RegExp.$1;\n      for (let note of result) {\n        note.notes = note.notes.filter(o => {\n          return o.target === "abilityChecks" && (o.subTarget === `${ablKey}Checks` || o.subTarget === "allChecks");\n        }).map(o => { return o.text; });\n      }\n\n      return result;\n    }\n\n    // Misc\n    if (context.match(/^misc\\.(.+)/)) {\n      const miscKey = RegExp.$1;\n      for (let note of result) {\n        note.notes = note.notes.filter(o => {\n          return o.target === "misc" && o.subTarget === miscKey;\n        }).map(o => { return o.text; });\n      }\n\n      if (miscKey === "cmb" && this.data.data.attributes.cmbNotes != null && this.data.data.attributes.cmbNotes !== "") {\n        result.push({ notes: [this.data.data.attributes.cmbNotes], item: null });\n      }\n\n      return result;\n    }\n\n    return [];\n  }\n\n  async createEmbeddedEntity(embeddedName, createData, options={}) {\n    let noArray = false;\n    if (!(createData instanceof Array)) {\n      createData = [createData];\n      noArray = true;\n    }\n\n    for (let obj of createData) {\n      // Don\'t auto-equip transferred items\n      if (obj._id != null && ["weapon", "equipment"].includes(obj.type)) {\n        obj.data.equipped = false;\n      }\n    }\n\n    return super.createEmbeddedEntity(embeddedName, (noArray ? createData[0] : createData), options);\n  }\n\n  _computeEncumbrance(updateData, srcData) {\n    const carry = this.getCarryCapacity(srcData);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.attributes.encumbrance.levels.light", carry.light);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.attributes.encumbrance.levels.medium", carry.medium);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.attributes.encumbrance.levels.heavy", carry.heavy);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.attributes.encumbrance.levels.carry", carry.heavy * 2);\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.attributes.encumbrance.levels.drag", carry.heavy * 5);\n\n    const carriedWeight = Math.max(0, this.getCarriedWeight(srcData));\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.attributes.encumbrance.carriedWeight", Math.round(carriedWeight * 10) / 10);\n\n    // Determine load level\n    let encLevel = 0;\n    if (carriedWeight > 0) {\n      if (carriedWeight >= srcData.data.attributes.encumbrance.levels.light) encLevel++;\n      if (carriedWeight >= srcData.data.attributes.encumbrance.levels.medium) encLevel++;\n    }\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.attributes.encumbrance.level", encLevel);\n  }\n\n  _calculateCoinWeight(data) {\n    return Object.values(data.data.currency).reduce((cur, amount) => {\n      return cur + amount;\n    }, 0) / 50;\n  }\n\n  getCarryCapacity(srcData) {\n    // Determine carrying capacity\n    const carryStr = srcData.data.abilities.str.total + srcData.data.abilities.str.carryBonus;\n    let carryMultiplier = srcData.data.abilities.str.carryMultiplier;\n    const size = srcData.data.traits.size;\n    if (srcData.data.attributes.quadruped) carryMultiplier *= CONFIG.PF1.encumbranceMultipliers.quadruped[size];\n    else carryMultiplier *= CONFIG.PF1.encumbranceMultipliers.normal[size];\n    const table = CONFIG.PF1.encumbranceLoads;\n\n    let heavy = Math.floor(table[carryStr] * carryMultiplier);\n    if (carryStr >= table.length) {\n      heavy = Math.floor(table[table.length-1] * (1 + (0.3 * (carryStr - (table.length-1)))));\n    }\n    // 1 Kg = 0.5 Kg\n    if(game.settings.get("pf1", "units") === "metric") {\n      heavy = heavy / 2\n    }\n      \n    return {\n      light: Math.floor(heavy / 3),\n      medium: Math.floor(heavy / 3 * 2),\n      heavy: heavy,\n    };\n  }\n\n  getCarriedWeight(srcData) {\n    // Determine carried weight\n    const physicalItems = srcData.items.filter(o => { return o.data.weight != null; });\n    return physicalItems.reduce((cur, o) => {\n      if (!o.data.carried) return cur;\n      return cur + (o.data.weight * o.data.quantity);\n    }, this._calculateCoinWeight(srcData));\n  }\n\n  /**\n   * @returns {number} The total amount of currency this actor has, in gold pieces\n   */\n  mergeCurrency() {\n    const carried = getProperty(this.data.data, "currency");\n    const alt = getProperty(this.data.data, "altCurrency");\n    return (carried ? carried.pp * 10 + carried.gp + carried.sp / 10 + carried.cp / 100 : 0) +\n      (alt ? alt.pp * 10 + alt.gp + alt.sp / 10 + alt.cp / 100 : 0);\n  }\n\n  /**\n   * Import a new owned Item from a compendium collection\n   * The imported Item is then added to the Actor as an owned item.\n   *\n   * @param collection {String}     The name of the pack from which to import\n   * @param entryId {String}        The ID of the compendium entry to import\n   */\n  importItemFromCollection(collection, entryId) {\n    const pack = game.packs.find(p => p.collection === collection);\n    if (pack.metadata.entity !== "Item") return;\n\n    return pack.getEntity(entryId).then(ent => {\n      console.log(`${vtt} | Importing Item ${ent.name} from ${collection}`);\n\n      let data = duplicate(ent.data);\n      if (this.sheet != null && this.sheet.rendered) {\n        data = mergeObject(data, this.sheet.getDropData(data));\n      }\n      delete data._id;\n      return this.createOwnedItem(data);\n    });\n  }\n\n  _createConsumableSpellDialog(itemData) {\n    new Dialog({\n      title: game.i18n.localize("PF1.CreateItemForSpell").format(itemData.name),\n      content: game.i18n.localize("PF1.CreateItemForSpell").format(itemData.name),\n      buttons: {\n        potion: {\n          icon: \'<i class="fas fa-prescription-bottle"></i>\',\n          label: "Potion",\n          callback: () => this.createConsumableSpell(itemData, "potion"),\n        },\n        scroll: {\n          icon: \'<i class="fas fa-scroll"></i>\',\n          label: "Scroll",\n          callback: () => this.createConsumableSpell(itemData, "scroll"),\n        },\n        wand: {\n          icon: \'<i class="fas fa-magic"></i>\',\n          label: "Wand",\n          callback: () => this.createConsumableSpell(itemData, "wand"),\n        },\n      },\n      default: "potion",\n    }).render(true);\n  }\n\n  async createConsumableSpell(itemData, type) {\n    let data = await _item_entity_js__WEBPACK_IMPORTED_MODULE_1__["ItemPF"].toConsumable(itemData, type);\n\n    if (data._id) delete data._id;\n    this.createEmbeddedEntity("OwnedItem", data);\n  }\n\n  getRollData(data=null) {\n    if (data == null) data = this.data.data;\n    const result = mergeObject(data, {\n      size: Object.keys(CONFIG.PF1.sizeChart).indexOf(getProperty(data, "traits.size")) - 4,\n    }, { inplace: false });\n\n    return result;\n  }\n\n  getCR(data=null) {\n    if (this.data.type !== "npc") return 0;\n    if (data == null) data = this.data.data;\n\n    const base = data.details.cr.base;\n    if (this.items == null) return base;\n\n    // Gather CR from templates\n    const templates = this.items.filter(o => o.type === "feat" && o.data.data.featType === "template");\n    return templates.reduce((cur, o) => {\n      const crOffset = o.data.data.crOffset;\n      if (typeof crOffset === "string" && crOffset.length) cur += new Roll(crOffset, this.getRollData(data)).roll().total;\n      return cur;\n    }, base);\n  }\n\n  async deleteEmbeddedEntity(embeddedName, data, options={}) {\n    if (embeddedName === "OwnedItem") {\n      if (!(data instanceof Array)) data = [data];\n\n      // Add children to list of items to be deleted\n      const _addChildren = async function(id) {\n        const item = this.items.find(o => o._id === id);\n        const children = await item.getLinkedItems("children");\n        for (let child of children) {\n          if (!data.includes(child._id)) {\n            data.push(child._id);\n            await _addChildren.call(this, child._id);\n          }\n        }\n      }\n      for (let id of data) {\n        await _addChildren.call(this, id);\n      }\n    }\n\n    super.deleteEmbeddedEntity(embeddedName, data, options);\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/actor/entity.js?')},"./module/actor/sheets/base.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPF", function() { return ActorSheetPF; });\n/* harmony import */ var _apps_trait_selector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../apps/trait-selector.js */ "./module/apps/trait-selector.js");\n/* harmony import */ var _apps_actor_rest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../apps/actor-rest.js */ "./module/apps/actor-rest.js");\n/* harmony import */ var _apps_actor_flags_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../apps/actor-flags.js */ "./module/apps/actor-flags.js");\n/* harmony import */ var _dice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../dice.js */ "./module/dice.js");\n/* harmony import */ var _token_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../token-config.js */ "./module/token-config.js");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib.js */ "./module/lib.js");\n/* harmony import */ var _apps_point_buy_calculator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../apps/point-buy-calculator.js */ "./module/apps/point-buy-calculator.js");\n/* harmony import */ var _widgets_item_picker_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../widgets/item-picker.js */ "./module/widgets/item-picker.js");\n\n\n\n\n\n\n\n\n\n/**\n * Extend the basic ActorSheet class to do all the PF things!\n * This sheet is an Abstract layer which is not used.\n *\n * @type {ActorSheet}\n */\nclass ActorSheetPF extends ActorSheet {\n  constructor(...args) {\n    super(...args);\n\n    this.options.submitOnClose = false;\n\n    /**\n     * The scroll position on the active tab\n     * @type {number}\n     */\n    this._scrollTab = {};\n    this._initialTab = {};\n\n    /**\n     * Track the set of item filters which are applied\n     * @type {Set}\n     */\n    this._filters = {\n      inventory: new Set(),\n      spellbook: new Set(),\n      features: new Set(),\n      buffs: new Set()\n    };\n\n    /**\n     * Track item updates from the actor sheet.\n     * @type {Object[]}\n     */\n    this._itemUpdates = [];\n  }\n\n  get currentPrimaryTab() {\n    const primaryElem = this.element.find(\'nav[data-group="primary"] .item.active\');\n    if (primaryElem.length !== 1 || primaryElem.attr("data-tab") !== "inventory") return null;\n    return primaryElem.attr("data-tab");\n  }\n\n  get currentSpellbookKey() {\n    const elems = this.element.find("nav.spellbooks .item.active");\n    if (elems.length !== 1) return Object.keys(getProperty(this.data, "data.attributes.spells.spellbook") || { "primary": null })[0];\n    return elems.attr("data-tab");\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Add some extra data when rendering the sheet to reduce the amount of logic required within the template.\n   */\n  getData() {\n    // Basic data\n    let isOwner = this.entity.owner;\n    const data = {\n      owner: isOwner,\n      limited: this.entity.limited,\n      options: this.options,\n      editable: this.isEditable,\n      cssClass: isOwner ? "editable" : "locked",\n      isCharacter: this.entity.data.type === "character",\n      hasRace: false,\n      config: CONFIG.PF1,\n      useBGSkills: this.entity.data.type === "character" && game.settings.get("pf1", "allowBackgroundSkills"),\n      spellFailure: this.entity.spellFailure,\n      isGM: game.user.isGM,\n      race: this.actor.race != null ? duplicate(this.actor.race.data) : null,\n    };\n\n    // The Actor and its Items\n    data.actor = duplicate(this.actor.data);\n    data.items = this.actor.items.map(i => {\n      i.data.labels = i.labels;\n      i.data.hasAttack = i.hasAttack;\n      i.data.hasMultiAttack = i.hasMultiAttack;\n      i.data.hasDamage = i.hasDamage;\n      i.data.hasEffect = i.hasEffect;\n      i.data.hasAction = i.hasAction || i.isCharged;\n      i.data.showUnidentifiedData = i.showUnidentifiedData;\n      if (i.showUnidentifiedData) i.data.name = getProperty(i.data, "data.unidentified.name") || getProperty(i.data, "data.identifiedName") || i.data.name;\n      else i.data.name = getProperty(i.data, "data.identifiedName") || i.data.name;\n      return i.data;\n    });\n    data.items.sort((a, b) => (a.sort || 0) - (b.sort || 0));\n    data.data = data.actor.data;\n    data.labels = this.actor.labels || {};\n    data.filters = this._filters;\n\n    // Hit point sources\n    if (this.actor.sourceDetails != null) data.sourceDetails = expandObject(this.actor.sourceDetails);\n    else data.sourceDetails = null;\n\n    // Ability Scores\n    for ( let [a, abl] of Object.entries(data.actor.data.abilities)) {\n      abl.label = CONFIG.PF1.abilities[a];\n      abl.sourceDetails = data.sourceDetails != null ? data.sourceDetails.data.abilities[a].total : [];\n    }\n\n    // Armor Class\n    for (let [a, ac] of Object.entries(data.actor.data.attributes.ac)) {\n      ac.label = CONFIG.PF1.ac[a];\n      ac.valueLabel = CONFIG.PF1.acValueLabels[a];\n      ac.sourceDetails = data.sourceDetails != null ? data.sourceDetails.data.attributes.ac[a].total : [];\n    }\n\n    // Saving Throws\n    for (let [a, savingThrow] of Object.entries(data.actor.data.attributes.savingThrows)) {\n      savingThrow.label = CONFIG.PF1.savingThrows[a];\n      savingThrow.sourceDetails = data.sourceDetails != null ? data.sourceDetails.data.attributes.savingThrows[a].total : [];\n    }\n\n    // Update skill labels\n    for ( let [s, skl] of Object.entries(data.actor.data.skills)) {\n      skl.label = CONFIG.PF1.skills[s];\n      skl.arbitrary = CONFIG.PF1.arbitrarySkills.includes(s);\n      skl.sourceDetails = (data.sourceDetails != null && data.sourceDetails.data.skills[s] != null) ? data.sourceDetails.data.skills[s].changeBonus : [];\n      if (skl.subSkills != null) {\n        for (let [s2, skl2] of Object.entries(skl.subSkills)) {\n          if (data.sourceDetails == null) continue;\n          if (data.sourceDetails.data.skills[s] == null) continue;\n          if (data.sourceDetails.data.skills[s].subSkills == null) continue;\n          skl2.sourceDetails = data.sourceDetails.data.skills[s].subSkills[s2] != null ? data.sourceDetails.data.skills[s].subSkills[s2].changeBonus : [];\n        }\n      }\n    }\n\n    // Update spellbook info\n    for (let spellbook of Object.values(data.actor.data.attributes.spells.spellbooks)) {\n      const cl = spellbook.cl.total;\n      spellbook.range = {\n        close: 25 + 5 * Math.floor(cl / 2),\n        medium: 100 + 10 * cl,\n        long: 400 + 40 * cl\n      };\n    }\n\n    // Control items\n    data.items.filter(obj => { return obj.type === "spell"; })\n    .forEach(obj => {\n      obj.isPrepared = obj.data.preparation.mode === "prepared";\n    });\n\n    // Update traits\n    this._prepareTraits(data.actor.data.traits);\n\n    // Prepare owned items\n    this._prepareItems(data);\n\n    // Compute encumbrance\n    data.encumbrance = this._computeEncumbrance(data);\n\n    // Prepare skillsets\n    data.skillsets = this._prepareSkillsets(data.actor.data.skills);\n\n    // Skill rank counting\n    const skillRanks = { allowed: 0, used: 0, bgAllowed: 0, bgUsed: 0, sentToBG: 0 };\n    // Count used skill ranks\n    for (let skl of Object.values(this.actor.data.data.skills)) {\n      if (skl.subSkills != null) {\n        for (let subSkl of Object.values(skl.subSkills)) {\n          if (data.useBGSkills && skl.background) {\n            skillRanks.bgUsed += subSkl.rank;\n          }\n          else {\n            skillRanks.used += subSkl.rank;\n          }\n        }\n      }\n      else if (data.useBGSkills && skl.background) {\n        skillRanks.bgUsed += skl.rank;\n      }\n      else {\n        skillRanks.used += skl.rank;\n      }\n    }\n    // Count allowed skill ranks\n    this.actor.data.items.filter(obj => { return obj.type === "class" && obj.data.classType !== "mythic"; }).forEach(cls => {\n      const clsLevel = cls.data.level;\n      const clsSkillsPerLevel = cls.data.skillsPerLevel;\n      const fcSkills = cls.data.fc.skill.value;\n      skillRanks.allowed += (Math.max(1, clsSkillsPerLevel + this.actor.data.data.abilities.int.mod) * clsLevel) + fcSkills;\n      if (data.useBGSkills) skillRanks.bgAllowed = this.actor.data.data.details.level.value * 2;\n    });\n    if (this.actor.data.data.details.bonusSkillRankFormula !== "") {\n      let roll = new Roll(\n        this.actor.data.data.details.bonusSkillRankFormula,\n        duplicate(this.actor.data.data)\n      ).roll();\n      skillRanks.allowed += roll.total;\n    }\n    // Calculate used background skills\n    if (data.useBGSkills) {\n      if (skillRanks.bgUsed > skillRanks.bgAllowed) {\n        skillRanks.sentToBG = (skillRanks.bgUsed - skillRanks.bgAllowed);\n        skillRanks.allowed -= skillRanks.sentToBG;\n        skillRanks.bgAllowed += skillRanks.sentToBG;\n      }\n    }\n    data.skillRanks = skillRanks;\n\n    // Fetch the game settings relevant to sheet rendering.\n    data.healthConfig =  game.settings.get("pf1", "healthConfig");\n\n    // Return data to the sheet\n    return data\n  }\n\n  /* -------------------------------------------- */\n\n  _prepareTraits(traits) {\n    const map = {\n      // "dr": CONFIG.PF1.damageTypes,\n      "di": CONFIG.PF1.damageTypes,\n      "dv": CONFIG.PF1.damageTypes,\n      "ci": CONFIG.PF1.conditionTypes,\n      "languages": CONFIG.PF1.languages,\n      "armorProf": CONFIG.PF1.armorProficiencies,\n      "weaponProf": CONFIG.PF1.weaponProficiencies\n    };\n    for ( let [t, choices] of Object.entries(map) ) {\n      const trait = traits[t];\n      if ( !trait ) continue;\n      let values = [];\n      if ( trait.value ) {\n        values = trait.value instanceof Array ? trait.value : [trait.value];\n      }\n      trait.selected = values.reduce((obj, t) => {\n        obj[t] = choices[t];\n        return obj;\n      }, {});\n\n      // Add custom entry\n      if ( trait.custom ) {\n        trait.custom.split(CONFIG.PF1.re.traitSeparator).forEach((c, i) => trait.selected[`custom${i+1}`] = c.trim());\n      }\n      trait.cssClass = !isObjectEmpty(trait.selected) ? "" : "inactive";\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Insert a spell into the spellbook object when rendering the character sheet\n   * @param {Object} data     The Actor data being prepared\n   * @param {Array} spells    The spell data being prepared\n   * @param {String} bookKey  The key of the spellbook being prepared\n   * @private\n   */\n  _prepareSpellbook(data, spells, bookKey) {\n    const owner = this.actor.owner;\n    const book = this.actor.data.data.attributes.spells.spellbooks[bookKey];\n\n    // Reduce spells to the nested spellbook structure\n    let spellbook = {};\n    for (let a = 0; a < 10; a++) {\n      spellbook[a] = {\n        level: a,\n        usesSlots: true,\n        spontaneous: book.spontaneous,\n        canCreate: owner === true,\n        canPrepare: (data.actor.type === "character"),\n        label: CONFIG.PF1.spellLevels[a],\n        spells: [],\n        uses: book.spells["spell"+a].value || 0,\n        baseSlots: book.spells["spell"+a].base,\n        slots: book.spells["spell"+a].max || 0,\n        dataset: { type: "spell", level: a, spellbook: bookKey },\n      };\n    }\n    spells.forEach(spell => {\n      const lvl = spell.data.level || 0;\n      spellbook[lvl].spells.push(spell);\n    });\n\n    // Sort the spellbook by section order\n    spellbook = Object.values(spellbook);\n    spellbook.sort((a, b) => a.level - b.level);\n    return spellbook;\n  }\n\n  _prepareSkillsets(skillset) {\n    let result = {\n      all: { skills: {} },\n      adventure: { skills: {} },\n      background: { skills: {} }\n    };\n\n    // sort skills by label\n    let keys = Object.keys(skillset).sort(function(a,b) {\n      if (skillset[a].custom && !skillset[b].custom) return 1;\n      if (!skillset[a].custom && skillset[b].custom) return -1;\n      return (\'\' + skillset[a].label).localeCompare(skillset[b].label)\n    });\n\n    keys.forEach( a => {\n      let skl = skillset[a]\n      result.all.skills[a] = skl;\n      if (skl.background) result.background.skills[a] = skl;\n      else result.adventure.skills[a] = skl;\n    })\n\n    return result;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Determine whether an Owned Item will be shown based on the current set of filters\n   * @return {boolean}\n   * @private\n   */\n  _filterItems(items, filters) {\n    return items.filter(item => {\n      const data = item.data;\n\n      // Action usage\n      for ( let f of ["action", "bonus", "reaction"] ) {\n        if ( filters.has(f) ) {\n          if ((data.activation && (data.activation.type !== f))) return false;\n        }\n      }\n\n      if ( filters.has("prepared") ) {\n        if ( data.level === 0 || ["pact", "innate"].includes(data.preparation.mode) ) return true;\n        if ( this.actor.data.type === "npc" ) return true;\n        return data.preparation.prepared;\n      }\n\n      // Equipment-specific filters\n      if ( filters.has("equipped") ) {\n        if (data.equipped && data.equipped !== true) return false;\n      }\n\n      // Whether active\n      if (filters.has("active")) {\n        if (!data.active) return false;\n      }\n\n      return true;\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the font-awesome icon used to display a certain level of skill proficiency\n   * @private\n   */\n  _getProficiencyIcon(level) {\n    const icons = {\n      0: \'<i class="far fa-circle"></i>\',\n      0.5: \'<i class="fas fa-adjust"></i>\',\n      1: \'<i class="fas fa-check"></i>\',\n      2: \'<i class="fas fa-check-double"></i>\'\n    };\n    return icons[level];\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Compute the level and percentage of encumbrance for an Actor.\n   *\n   * @param {Object} actorData      The data object for the Actor being rendered\n   * @return {Object}               An object describing the character\'s encumbrance level\n   * @private\n   */\n  _computeEncumbrance(actorData) {\n    const carriedWeight = actorData.data.attributes.encumbrance.carriedWeight;\n    const load = {\n      light: actorData.data.attributes.encumbrance.levels.light,\n      medium: actorData.data.attributes.encumbrance.levels.medium,\n      heavy: actorData.data.attributes.encumbrance.levels.heavy\n    };\n    const carryLabel = game.settings.get("pf1", "units") === "metric" ? game.i18n.localize("PF1.CarryLabelKg").format(carriedWeight) : game.i18n.localize("PF1.CarryLabel").format(carriedWeight);\n    const enc = {\n      pct: {\n        light: Math.max(0, Math.min(carriedWeight * 100 / load.light, 99.5)),\n        medium: Math.max(0, Math.min((carriedWeight - load.light) * 100 / (load.medium - load.light), 99.5)),\n        heavy: Math.max(0, Math.min((carriedWeight - load.medium) * 100 / (load.heavy - load.medium), 99.5)),\n      },\n      encumbered: {\n        light: actorData.data.attributes.encumbrance.level >= 1,\n        medium: actorData.data.attributes.encumbrance.level >= 2,\n        heavy: actorData.data.attributes.encumbrance.carriedWeight >= actorData.data.attributes.encumbrance.levels.heavy,\n      },\n      light: actorData.data.attributes.encumbrance.levels.light,\n      medium: actorData.data.attributes.encumbrance.levels.medium,\n      heavy: actorData.data.attributes.encumbrance.levels.heavy,\n      value: actorData.data.attributes.encumbrance.carriedWeight,\n      carryLabel: carryLabel,\n    };\n\n    return enc;\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Listeners and Handlers\n  /* -------------------------------------------- */\n\n  /**\n   * Activate event listeners using the prepared sheet HTML\n   * @param html {HTML}   The prepared HTML object ready to be rendered into the DOM\n   */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    this.createTabs(html);\n\n    // Tooltips\n    html.mousemove(ev => this._moveTooltips(ev));\n\n    // Activate Item Filters\n    const filterLists = html.find(".filter-list");\n    filterLists.each(this._initializeFilterItemList.bind(this));\n    filterLists.on("click", ".filter-item", this._onToggleFilter.bind(this));\n\n    // Item summaries\n    html.find(\'.item .item-name h4\').click(event => this._onItemSummary(event));\n\n    // Item Dragging\n    let handler = ev => this._onDragItemStart(ev);\n    html.find(\'li.item\').each((i, li) => {\n      if ( li.classList.contains("inventory-header") ) return;\n      li.setAttribute("draggable", true);\n      li.addEventListener("dragstart", handler, false);\n    });\n\n    // Everything below here is only needed if the sheet is editable\n    if (!this.options.editable) return;\n\n    // Trigger form submission from textarea elements.\n    html.find("textarea").change(this._onSubmit.bind(this));\n\n    // Show configureable fields\n    html.find(".config .config-control").click(this._onConfigControl.bind(this));\n\n    /* -------------------------------------------- */\n    /*  Abilities, Skills, Defenses and Traits\n    /* -------------------------------------------- */\n\n    // Ability Checks\n    html.find(\'.ability-name\').click(this._onRollAbilityTest.bind(this));\n\n    // BAB Check\n    html.find(".attribute.bab .attribute-name").click(this._onRollBAB.bind(this));\n\n    // CMB Check\n    html.find(".attribute.cmb .attribute-name").click(this._onRollCMB.bind(this));\n\n    // Initiative Check\n    html.find(".attribute.initiative .attribute-name").click(this._onRollInitiative.bind(this));\n\n    // Saving Throw\n    html.find(".defenses .saving-throw .attribute-name").click(this._onRollSavingThrow.bind(this));\n\n    // Add arbitrary skill\n    html.find(".skill.arbitrary .skill-create").click(ev => this._onArbitrarySkillCreate(ev));\n\n    // Delete arbitrary skill\n    html.find(".sub-skill > .skill-controls > .skill-delete").click(ev => this._onArbitrarySkillDelete(ev));\n\n    // Add custom skill\n    html.find(".skill-controls.skills .skill-create").click(ev => this._onSkillCreate(ev));\n\n    // Delete custom skill\n    html.find(".skill > .skill-controls > .skill-delete").click(ev => this._onSkillDelete(ev));\n\n    // Quick Item Action control\n    html.find(".item-actions a").mouseup(ev => this._quickItemActionControl(ev));\n\n    // Roll Skill Checks\n    html.find(".skill > .skill-name > .rollable").click(this._onRollSkillCheck.bind(this));\n    html.find(".sub-skill > .skill-name > .rollable").click(this._onRollSubSkillCheck.bind(this));\n\n    // Trait Selector\n    html.find(\'.trait-selector\').click(this._onTraitSelector.bind(this));\n\n    // Configure Special Flags\n    html.find(\'.configure-flags\').click(this._onConfigureFlags.bind(this));\n\n    // Roll defenses\n    html.find(".defense-rolls .generic-defenses .rollable").click(ev => { this.actor.rollDefenses(); });\n\n    // Rest\n    html.find(".rest").click(this._onRest.bind(this));\n\n    // Race controls\n    html.find(".race-container .item-control").click(this._onRaceControl.bind(this));\n\n    // Point Buy Calculator\n    html.find("button.pointbuy-calculator").click(this._onPointBuyCalculator.bind(this));\n\n    // Alignment\n    html.find(".control.alignment").click(this._onControlAlignment.bind(this));\n\n    /* -------------------------------------------- */\n    /*  Inventory\n    /* -------------------------------------------- */\n\n    // Owned Item management\n    html.find(\'.item-create\').click(ev => this._onItemCreate(ev));\n    html.find(\'.item-edit\').click(this._onItemEdit.bind(this));\n    html.find(\'.item-delete\').click(this._onItemDelete.bind(this));\n\n    // Item Rolling\n    html.find(\'.item .item-image\').click(event => this._onItemRoll(event));\n\n    // Quick add item quantity\n    html.find("a.item-control.item-quantity-add").click(ev => { this._quickChangeItemQuantity(ev, 1); });\n    // Quick subtract item quantity\n    html.find("a.item-control.item-quantity-subtract").click(ev => { this._quickChangeItemQuantity(ev, -1); });\n\n    // Quick (un)equip item\n    html.find("a.item-control.item-equip").click(ev => { this._quickEquipItem(ev); });\n\n    // Quick carry item\n    html.find("a.item-control.item-carry").click(ev => { this._quickCarryItem(ev); });\n\n    // Quick (un)identify item\n    html.find("a.item-control.item-identify").click(ev => { this._quickIdentifyItem(ev); });\n\n    // Quick toggle item property\n    html.find("a.item-control.item-toggle-data").click(this._itemToggleData.bind(this));\n\n    // Duplicate item\n    html.find("a.item-control.item-duplicate").click(this._duplicateItem.bind(this));\n\n    /* -------------------------------------------- */\n    /*  Feats\n    /* -------------------------------------------- */\n\n    html.find(".item-detail.item-uses input[type=\'text\']:not(:disabled)").off("change").change(this._setFeatUses.bind(this));\n\n    /* -------------------------------------------- */\n    /*  Spells\n    /* -------------------------------------------- */\n\n    html.find(".item-list .spell-uses input[type=\'number\'][data-type=\'amount\']").off("change").change(this._setSpellUses.bind(this));\n    html.find(".item-list .spell-uses input[type=\'number\'][data-type=\'max\']").off("change").change(this._setMaxSpellUses.bind(this));\n\n    html.find(".spellcasting-concentration .rollable").click(this._onRollConcentration.bind(this));\n\n    html.find(".spellcasting-cl .rollable").click(this._onRollCL.bind(this));\n\n    /* -------------------------------------------- */\n    /*  Buffs\n    /* -------------------------------------------- */\n\n    html.find(".item-detail.item-active input[type=\'checkbox\']").off("change").change(this._setItemActive.bind(this));\n\n    html.find(".item-detail.item-level input[type=\'text\']").off("change").change(this._setBuffLevel.bind(this));\n  }\n\n  createTabs(html) {\n    const tabGroups = {\n      "primary": {\n        "inventory": {},\n        "feats": {},\n        "skillset": {},\n        "buffs": {},\n        "attacks": {},\n        "spellbooks": {},\n      },\n    };\n    // Add spellbooks to tabGroups\n    for (let a of Object.keys(this.actor.data.data.attributes.spells.spellbooks)) {\n      tabGroups["primary"]["spellbooks"][`spells_${a}`] = {};\n    }\n    _lib_js__WEBPACK_IMPORTED_MODULE_5__["createTabs"].call(this, html, tabGroups);\n  }\n\n  /* -------------------------------------------- */\n\n  _moveTooltips(event) {\n    $(event.currentTarget).find(".tooltip:hover .tooltipcontent").css("left", `${event.clientX}px`).css("top", `${event.clientY + 24}px`);\n  }\n\n  /**\n   * Initialize Item list filters by activating the set of filters which are currently applied\n   * @private\n   */\n  _initializeFilterItemList(i, ul) {\n    const set = this._filters[ul.dataset.filter];\n    const filters = ul.querySelectorAll(".filter-item");\n    for ( let li of filters ) {\n      if ( set.has(li.dataset.filter) ) li.classList.add("active");\n    }\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Listeners and Handlers                */\n  /* -------------------------------------------- */\n\n  /**\n   * Handle click events for the Traits tab button to configure special Character Flags\n   */\n  _onConfigureFlags(event) {\n    event.preventDefault();\n    new _apps_actor_flags_js__WEBPACK_IMPORTED_MODULE_2__["ActorSheetFlags"](this.actor).render(true);\n  }\n\n  _onRest(event) {\n    event.preventDefault();\n    new _apps_actor_rest_js__WEBPACK_IMPORTED_MODULE_1__["ActorRestDialog"](this.actor).render(true);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle rolling of an item from the Actor sheet, obtaining the Item instance and dispatching to it\'s roll method\n   * @private\n   */\n  _onItemRoll(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n\n    if (item == null) return;\n    return item.roll();\n  }\n\n  _setFeatUses(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n\n    const value = Number(event.currentTarget.value);\n    const updateData = {};\n    this.setItemUpdate(item._id, "data.uses.value", value);\n  }\n\n  _setSpellUses(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n\n    const value = Number(event.currentTarget.value);\n    this.setItemUpdate(item._id, "data.preparation.preparedAmount", value);\n  }\n  _setMaxSpellUses(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n\n    const value = Number(event.currentTarget.value);\n    this.setItemUpdate(item._id, "data.preparation.maxAmount", value);\n  }\n\n  _setBuffLevel(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n\n    const value = Number(event.currentTarget.value);\n    this.setItemUpdate(item._id, "data.level", value);\n  }\n\n  _onRollConcentration(event) {\n    event.preventDefault();\n\n    const spellbookKey = $(event.currentTarget).closest(".spellbook-group").data("tab");\n    const spellbook = this.actor.data.data.attributes.spells.spellbooks[spellbookKey];\n    const rollData = duplicate(this.actor.data.data);\n    rollData.cl = spellbook.cl.total;\n\n    // Add contextual concentration string\n    let notes = [];\n    if (spellbook.concentrationNotes.length > 0) {\n      if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_5__["isMinimumCoreVersion"])("0.5.2")) {\n        let noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_3__["DicePF"].messageRoll({\n          data: rollData,\n          msgStr: spellbook.concentrationNotes\n        });\n        notes.push(...noteStr.split(/[\\n\\r]+/));\n      }\n      else notes.push(...spellbook.concentrationNotes.split(/[\\n\\r]+/));\n    }\n\n    let props = [];\n    if (notes.length > 0) props.push({ header: game.i18n.localize("PF1.Notes"), value: notes });\n    let formulaRoll = 0;\n    if (spellbook.concentrationFormula.length) formulaRoll = new Roll(spellbook.concentrationFormula, rollData).roll().total;\n    return _dice_js__WEBPACK_IMPORTED_MODULE_3__["DicePF"].d20Roll({\n      event: event,\n      parts: ["@cl + @mod + @concentrationBonus + @formulaBonus"],\n      data: {\n        cl: spellbook.cl.total,\n        mod: this.actor.data.data.abilities[spellbook.ability].mod,\n        concentrationBonus: spellbook.concentration,\n        formulaBonus: formulaRoll,\n      },\n      title: game.i18n.localize("PF1.ConcentrationCheck"),\n      speaker: ChatMessage.getSpeaker({actor: this}),\n      takeTwenty: false,\n      chatTemplate: "systems/pf1/templates/chat/roll-ext.html",\n      chatTemplateData: { hasProperties: props.length > 0, properties: props }\n    });\n  }\n\n  _onRollCL(event) {\n    event.preventDefault();\n\n    const spellbookKey = $(event.currentTarget).closest(".spellbook-group").data("tab");\n    const spellbook = this.actor.data.data.attributes.spells.spellbooks[spellbookKey];\n    const rollData = duplicate(this.actor.data.data);\n\n    // Add contextual caster level string\n    let notes = [];\n    if (spellbook.clNotes.length > 0) {\n      if (!Object(_lib_js__WEBPACK_IMPORTED_MODULE_5__["isMinimumCoreVersion"])("0.5.2")) {\n        let noteStr = _dice_js__WEBPACK_IMPORTED_MODULE_3__["DicePF"].messageRoll({\n          data: rollData,\n          msgStr: spellbook.clNotes\n        });\n        notes.push(...noteStr.split(/[\\n\\r]+/));\n      }\n      else notes.push(...spellbook.clNotes.split(/[\\n\\r]+/));\n    }\n\n    let props = [];\n    if (notes.length > 0) props.push({ header: game.i18n.localize("PF1.Notes"), value: notes });\n    return _dice_js__WEBPACK_IMPORTED_MODULE_3__["DicePF"].d20Roll({\n      event: event,\n      parts: [`@cl`],\n      data: { cl: spellbook.cl.total },\n      title: game.i18n.localize("PF1.CasterLevelCheck"),\n      speaker: ChatMessage.getSpeaker({actor: this}),\n      takeTwenty: false,\n      chatTemplate: "systems/pf1/templates/chat/roll-ext.html",\n      chatTemplateData: { hasProperties: props.length > 0, properties: props }\n    });\n  }\n\n  _setItemActive(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n\n    const value = $(event.currentTarget).prop("checked");\n    const updateData = {};\n    updateData["data.active"] = value;\n    if (item.hasPerm(game.user, "OWNER")) item.update(updateData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle attempting to recharge an item usage by rolling a recharge check\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  _onItemRecharge(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n    return item.rollRecharge();\n  };\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle rolling of an item from the Actor sheet, obtaining the Item instance and dispatching to it\'s roll method\n   * @private\n   */\n  _onItemSummary(event) {\n    event.preventDefault();\n    let li = $(event.currentTarget).parents(".item"),\n        item = this.actor.getOwnedItem(li.attr("data-item-id")),\n        chatData = item.getChatData({secrets: this.actor.owner});\n\n    // Toggle summary\n    if ( li.hasClass("expanded") ) {\n      let summary = li.children(".item-summary");\n      summary.slideUp(200, () => summary.remove());\n    } else {\n      let div = $(`<div class="item-summary">${chatData.description.value}</div>`);\n      let props = $(`<div class="item-properties"></div>`);\n      chatData.properties.forEach(p => props.append(`<span class="tag">${p}</span>`));\n      div.append(props);\n      li.append(div.hide());\n      div.slideDown(200);\n    }\n    li.toggleClass("expanded");\n  }\n\n  /* -------------------------------------------- */\n\n  _onArbitrarySkillCreate(event) {\n    event.preventDefault();\n    const skillId = $(event.currentTarget).parents(".skill").attr("data-skill");\n    const mainSkillData = this.actor.data.data.skills[skillId];\n    const skillData = {\n      name: "",\n      ability: mainSkillData.ability,\n      rank: 0,\n      notes: "",\n      mod: 0,\n      rt: mainSkillData.rt,\n      cs: mainSkillData.cs,\n      acp: mainSkillData.acp,\n    };\n\n    // Get tag\n    let count = 1;\n    let tag = `${skillId}${count}`;\n    while (mainSkillData.subSkills[tag] != null) {\n      count++;\n      tag = `${skillId}${count}`;\n    }\n\n    const updateData = {};\n    updateData[`data.skills.${skillId}.subSkills.${tag}`] = skillData;\n    if (this.actor.hasPerm(game.user, "OWNER")) this.actor.update(updateData);\n  }\n\n  _onSkillCreate(event) {\n    event.preventDefault();\n    const isBackground = $(event.currentTarget).parents(".skills-list").attr("data-background") === "true";\n    const skillData = {\n      name: "",\n      ability: "int",\n      rank: 0,\n      notes: "",\n      mod: 0,\n      rt: false,\n      cs: false,\n      acp: false,\n      background: isBackground,\n      custom: true\n    };\n\n    let tag = Object(_lib_js__WEBPACK_IMPORTED_MODULE_5__["createTag"])(skillData.name || "skill");\n    let count = 1;\n    while (this.actor.data.data.skills[tag] != null) {\n      count++;\n      tag = Object(_lib_js__WEBPACK_IMPORTED_MODULE_5__["createTag"])(skillData.name || "skill") + count.toString();\n    }\n\n    const updateData = {};\n    updateData[`data.skills.${tag}`] = skillData;\n    if (this.actor.hasPerm(game.user, "OWNER")) this.actor.update(updateData);\n  }\n\n  _onArbitrarySkillDelete(event) {\n    event.preventDefault();\n    const mainSkillId = $(event.currentTarget).parents(".sub-skill").attr("data-main-skill");\n    const subSkillId = $(event.currentTarget).parents(".sub-skill").attr("data-skill");\n\n    const updateData = {};\n    updateData[`data.skills.${mainSkillId}.subSkills.-=${subSkillId}`] = null;\n    if (this.actor.hasPerm(game.user, "OWNER")) this.actor.update(updateData);\n  }\n\n  _onSkillDelete(event) {\n    event.preventDefault();\n    const skillId = $(event.currentTarget).parents(".skill").attr("data-skill");\n\n    const updateData = {};\n    updateData[`data.skills.-=${skillId}`] = null;\n    if (this.actor.hasPerm(game.user, "OWNER")) this.actor.update(updateData);\n  }\n\n  async _onRaceControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    // Add race\n    if (a.classList.contains("add")) {\n      const itemData = {\n        name: "New Race",\n        type: "race",\n      };\n      this.actor.createOwnedItem(itemData);\n    }\n    // Edit race\n    else if (a.classList.contains("edit")) {\n      this._onItemEdit(event);\n    }\n    // Delete race\n    else if (a.classList.contains("delete")) {\n      this._onItemDelete(event);\n    }\n  }\n\n  async _onPointBuyCalculator(event) {\n    event.preventDefault();\n\n    new _apps_point_buy_calculator_js__WEBPACK_IMPORTED_MODULE_6__["PointBuyCalculator"](this).render(true);\n  }\n\n  async _onControlAlignment(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    const items = Object.entries(CONFIG.PF1.alignmentsShort).reduce((cur, o) => {\n      cur.push({ value: o[0], label: o[1] });\n      return cur;\n    }, []);\n    const w = new _widgets_item_picker_js__WEBPACK_IMPORTED_MODULE_7__["Widget_ItemPicker"](alignment => {\n      this.actor.update({"data.details.alignment": alignment});\n    }, {items: items, columns: 3});\n    w.render($(a));\n  }\n\n  async _quickItemActionControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n    const itemId = $(event.currentTarget).parents(".item").attr("data-item-id");\n    const item = this.actor.getOwnedItem(itemId);\n\n    // Quick Attack\n    if (a.classList.contains("item-attack")) {\n      await item.use({ev: event, skipDialog: event.shiftKey});\n    }\n  }\n\n  async _quickChangeItemQuantity(event, add=1) {\n    event.preventDefault();\n    const itemId = $(event.currentTarget).parents(".item").attr("data-item-id");\n    const item = this.actor.getOwnedItem(itemId);\n\n    const curQuantity = getProperty(item.data, "data.quantity") || 0;\n    const newQuantity = Math.max(0, curQuantity + add);\n    item.update({ "data.quantity": newQuantity });\n  }\n\n  async _quickEquipItem(event) {\n    event.preventDefault();\n    const itemId = $(event.currentTarget).parents(".item").attr("data-item-id");\n    const item = this.actor.getOwnedItem(itemId);\n\n    if (hasProperty(item.data, "data.equipped")) {\n      item.update({ "data.equipped": !item.data.data.equipped });\n    }\n  }\n\n  async _quickCarryItem(event) {\n    event.preventDefault();\n    const itemId = $(event.currentTarget).parents(".item").attr("data-item-id");\n    const item = this.actor.getOwnedItem(itemId);\n\n    if (hasProperty(item.data, "data.carried")) {\n      item.update({ "data.carried": !item.data.data.carried });\n    }\n  }\n\n  async _quickIdentifyItem(event) {\n    event.preventDefault();\n    if (!game.user.isGM) {\n      ui.notifications.error("You are not allowed to identify items");\n      return;\n    }\n    const itemId = $(event.currentTarget).parents(".item").attr("data-item-id");\n    const item = this.actor.getOwnedItem(itemId);\n\n    if (hasProperty(item.data, "data.identified")) {\n      item.update({ "data.identified": !item.data.data.identified });\n    }\n  }\n\n  async _itemToggleData(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    const itemId = $(a).parents(".item").attr("data-item-id");\n    const item = this.actor.getOwnedItem(itemId);\n    const property = $(a).attr("name");\n\n    const updateData = {};\n    updateData[property] = !getProperty(item.data, property);\n    item.update(updateData);\n  }\n\n  async _duplicateItem(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    const itemId = $(a).parents(".item").attr("data-item-id");\n    const item = this.actor.getOwnedItem(itemId);\n    const data = duplicate(item.data);\n\n    delete data._id;\n    data.name = `${data.name} (Copy)`;\n    if (data.links) data.links = {};\n\n    this.actor.createOwnedItem(data);\n  }\n\n  /**\n   * Handle creating a new Owned Item for the actor using initial data defined in the HTML dataset\n   * @private\n   */\n  _onItemCreate(event) {\n    event.preventDefault();\n    const header = event.currentTarget;\n    const type = header.dataset.type;\n    const typeName = header.dataset.typeName || header.dataset.type;\n    const itemData = {\n      name: `New ${typeName.capitalize()}`,\n      type: type,\n      data: duplicate(header.dataset)\n    };\n    delete itemData.data["type"];\n    return this.actor.createOwnedItem(itemData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle editing an existing Owned Item for the Actor\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  _onItemEdit(event) {\n    event.preventDefault();\n    const li = event.currentTarget.closest(".item");\n    const item = this.actor.getOwnedItem(li.dataset.itemId);\n    item.sheet.render(true);\n  }\n\n  /**\n   * Handle deleting an existing Owned Item for the Actor\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  _onItemDelete(event) {\n    event.preventDefault();\n\n    const button = event.currentTarget;\n    if (button.disabled) return;\n\n    const li = event.currentTarget.closest(".item");\n    if (keyboard.isDown("Shift")) {\n      this.actor.deleteOwnedItem(li.dataset.itemId);\n    }\n    else {\n      button.disabled = true;\n\n      const msg = `<p>${game.i18n.localize("PF1.DeleteItemConfirmation")}</p>`;\n      Dialog.confirm({\n        title: game.i18n.localize("PF1.DeleteItem"),\n        content: msg,\n        yes: () => {\n          this.actor.deleteOwnedItem(li.dataset.itemId);\n          button.disabled = false;\n        },\n        no: () => button.disabled = false\n      });\n    }\n  }\n\n  /**\n   * Handle rolling an Ability check, either a test or a saving throw\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  _onRollAbilityTest(event) {\n    event.preventDefault();\n    let ability = event.currentTarget.parentElement.dataset.ability;\n    this.actor.rollAbility(ability, {event: event});\n  }\n\n  _onRollBAB(event) {\n    event.preventDefault();\n    this.actor.rollBAB({event: event});\n  }\n\n  _onRollCMB(event) {\n    event.preventDefault();\n    this.actor.rollCMB({event: event});\n  }\n\n  _onRollInitiative(event) {\n    event.preventDefault();\n    this.actor.rollInitiative();\n  }\n\n  _onRollSavingThrow(event) {\n    event.preventDefault();\n    let savingThrow = event.currentTarget.parentElement.dataset.savingthrow;\n    this.actor.rollSavingThrow(savingThrow, {event: event});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Organize and classify Owned Items\n   * @private\n   */\n  _prepareItems(data) {\n    // Set item tags\n    for (let [key, res] of Object.entries(getProperty(this.actor.data, "data.resources"))) {\n      if (!res) continue;\n      const id = res._id;\n      if (!id) continue;\n      const item = this.actor.items.find(o => o._id === id);\n      if (!item) continue;\n      item.data.tag = key;\n    }\n\n    // Categorize items as inventory, spellbook, features, and classes\n    const inventory = {\n      weapon: { label: game.i18n.localize("PF1.InventoryWeapons"), canCreate: true, hasActions: false, items: [], canEquip: true, dataset: { type: "weapon" } },\n      equipment: { label: game.i18n.localize("PF1.InventoryArmorEquipment"), canCreate: true, hasActions: false, items: [], canEquip: true, dataset: { type: "equipment" }, hasSlots: true },\n      consumable: { label: game.i18n.localize("PF1.InventoryConsumables"), canCreate: true, hasActions: true, items: [], canEquip: false, dataset: { type: "consumable" } },\n      gear: { label: CONFIG.PF1.lootTypes["gear"], canCreate: true, hasActions: false, items: [], canEquip: false, dataset: { type: "loot", "type-name": game.i18n.localize("PF1.LootTypeGearSingle"), "sub-type": "gear" } },\n      ammo: { label: CONFIG.PF1.lootTypes["ammo"], canCreate: true, hasActions: false, items: [], canEquip: false, dataset: { type: "loot", "type-name": game.i18n.localize("PF1.LootTypeAmmoSingle"), "sub-type": "ammo" } },\n      misc: { label: CONFIG.PF1.lootTypes["misc"], canCreate: true, hasActions: false, items: [], canEquip: false, dataset: { type: "loot", "type-name": game.i18n.localize("PF1.Misc"), "sub-type": "misc" } },\n      tradeGoods: { label: CONFIG.PF1.lootTypes["tradeGoods"], canCreate: true, hasActions: false, items: [], canEquip: false, dataset: { type: "loot", "type-name": game.i18n.localize("PF1.LootTypeTradeGoodsSingle"), "sub-type": "tradeGoods" } },\n      all: { label: game.i18n.localize("PF1.All"), canCreate: false, hasActions: true, items: [], canEquip: true, dataset: {} },\n    };\n\n    // Partition items by category\n    let [items, spells, feats, classes, attacks] = data.items.reduce((arr, item) => {\n      item.img = item.img || DEFAULT_TOKEN;\n      item.isStack = item.data.quantity ? item.data.quantity > 1 : false;\n      item.hasUses = item.data.uses && (item.data.uses.max > 0);\n      item.isCharged = ["day", "week", "charges"].includes(getProperty(item, "data.uses.per"));\n\n      const itemQuantity = getProperty(item, "data.quantity") != null ? getProperty(item, "data.quantity") : 1;\n      const itemCharges = getProperty(item, "data.uses.value") != null ? getProperty(item, "data.uses.value") : 1;\n      item.empty = itemQuantity <= 0 || (item.isCharged && itemCharges <= 0);\n      if ( item.type === "spell" ) arr[1].push(item);\n      else if ( item.type === "feat" ) arr[2].push(item);\n      else if ( item.type === "class" ) arr[3].push(item);\n      else if (item.type === "attack") arr[4].push(item);\n      else if (["weapon", "equipment", "consumable", "loot"].includes(item.type)) arr[0].push(item);\n      return arr;\n    }, [[], [], [], [], []]);\n\n    // Apply active item filters\n    items = this._filterItems(items, this._filters.inventory);\n    spells = this._filterItems(spells, this._filters.spellbook);\n    feats = this._filterItems(feats, this._filters.features);\n\n    // Organize Spellbook\n    let spellbookData = {};\n    const spellbooks = data.actor.data.attributes.spells.spellbooks;\n    for (let [a, spellbook] of Object.entries(spellbooks)) {\n      const spellbookSpells = spells.filter(obj => { return obj.data.spellbook === a; });\n      spellbookData[a] = {\n        data: this._prepareSpellbook(data, spellbookSpells, a),\n        prepared: spellbookSpells.filter(obj => { return obj.data.preparation.mode === "prepared" && obj.data.preparation.prepared; }).length,\n        orig: spellbook\n      };\n    }\n\n    // Organize Inventory\n    for ( let i of items ) {\n      const subType = i.type === "loot" ? i.data.subType || "gear" : i.data.subType;\n      i.data.quantity = i.data.quantity || 0;\n      i.data.weight = i.data.weight || 0;\n      i.totalWeight = Math.round(i.data.quantity * i.data.weight * 10) / 10;\n      i.units = game.settings.get("pf1", "units") === "metric" ? game.i18n.localize("PF1.Kgs") : game.i18n.localize("PF1.Lbs")\n      if (inventory[i.type] != null) inventory[i.type].items.push(i);\n      if (subType != null && inventory[subType] != null) inventory[subType].items.push(i);\n      inventory.all.items.push(i);\n    }\n\n    // Organize Features\n    const features = {\n      classes: { label: game.i18n.localize("PF1.ClassPlural"), items: [], canCreate: true, hasActions: false, dataset: { type: "class" }, isClass: true },\n      template: { label: game.i18n.localize("PF1.TemplatePlural"), items: [], canCreate: true, hasActions: false, dataset: { type: "feat", "type-name": game.i18n.localize("PF1.FeatTypeTemplate"), "feat-type": "template" } },\n      feat: { label: game.i18n.localize("PF1.FeatPlural"), items: [], canCreate: true, hasActions: true, dataset: { type: "feat", "feat-type": "feat" } },\n      classFeat: { label: game.i18n.localize("PF1.ClassFeaturePlural"), items: [], canCreate: true, hasActions: true, dataset: { type: "feat", "type-name": game.i18n.localize("PF1.FeatTypeClassFeat"), "feat-type": "classFeat" } },\n      trait: { label: game.i18n.localize("PF1.TraitPlural"), items: [], canCreate: true, hasActions: true, dataset: { type: "feat", "type-name": game.i18n.localize("PF1.FeatTypeTraits"), "feat-type": "trait" } },\n      racial: { label: game.i18n.localize("PF1.RacialTraitPlural"), items: [], canCreate: true, hasActions: true, dataset: { type: "feat", "type-name": game.i18n.localize("PF1.FeatTypeRacial"), "feat-type": "racial" } },\n      misc: { label: game.i18n.localize("PF1.Misc"), items: [], canCreate: true, hasActions: true, dataset: { type: "feat", "type-name": game.i18n.localize("PF1.Misc"), "feat-type": "misc" } },\n      all: { label: game.i18n.localize("PF1.All"), items: [], canCreate: false, hasActions: true, dataset: { type: "feat" } },\n    };\n\n    for (let f of feats) {\n      let k = f.data.featType;\n      if (f.data.abilityType && f.data.abilityType !== "none") {\n        f.abilityType = CONFIG.PF1.abilityTypes[f.data.abilityType].long;\n        f.abilityTypeShort = CONFIG.PF1.abilityTypes[f.data.abilityType].short;\n      }\n      else {\n        f.abilityType = "";\n        f.abilityTypeShort = "";\n      }\n      features[k].items.push(f);\n      features.all.items.push(f);\n    }\n    classes.sort((a, b) => b.level - a.level);\n    features.classes.items = classes;\n\n    // Buffs\n    let buffs = data.items.filter(obj => { return obj.type === "buff"; });\n    buffs = this._filterItems(buffs, this._filters.buffs);\n    const buffSections = {\n      temp: { label: game.i18n.localize("PF1.Temporary"), items: [], hasActions: false, dataset: { type: "buff", "buff-type": "temp" } },\n      perm: { label: game.i18n.localize("PF1.Permanent"), items: [], hasActions: false, dataset: { type: "buff", "buff-type": "perm" } },\n      item: { label: game.i18n.localize("PF1.Item"), items: [], hasActions: false, dataset: { type: "buff", "buff-type": "item" } },\n      misc: { label: game.i18n.localize("PF1.Misc"), items: [], hasActions: false, dataset: { type: "buff", "buff-type": "misc" } },\n      all: { label: game.i18n.localize("PF1.All"), items: [], hasActions: false, dataset: { type: "buff" } },\n    };\n\n    for (let b of buffs) {\n      let s = b.data.buffType;\n      if (!buffSections[s]) continue;\n      buffSections[s].items.push(b);\n      buffSections.all.items.push(b);\n    }\n\n    // Attacks\n    const attackSections = {\n      weapon: { label: game.i18n.localize("PF1.AttackTypeWeaponPlural"), items: [], canCreate: true, initial: false, showTypes: false, dataset: { type: "attack", "attack-type": "weapon" } },\n      natural: { label: game.i18n.localize("PF1.AttackTypeNaturalPlural"), items: [], canCreate: true, initial: false, showTypes: false, dataset: { type: "attack", "attack-type": "natural" } },\n      ability: { label: game.i18n.localize("PF1.AttackTypeAbilityPlural"), items: [], canCreate: true, initial: false, showTypes: false, dataset: { type: "attack", "attack-type": "ability" } },\n      racialAbility: { label: game.i18n.localize("PF1.AttackTypeRacialPlural"), items: [], canCreate: true, initial: false, showTypes: false, dataset: { type: "attack", "attack-type": "racialAbility" } },\n      item: { label: game.i18n.localize("PF1.Items"), items: [], canCreate: true, initial: false, showTypes: false, dataset: { type: "attack", "attack-type": "item" } },\n      misc: { label: game.i18n.localize("PF1.Misc"), items: [], canCreate: true, initial: false, showTypes: false, dataset: { type: "attack", "attack-type": "misc" } },\n      all: { label: game.i18n.localize("PF1.All"), items: [], canCreate: false, initial: true, showTypes: true, dataset: { type: "attack" } },\n    };\n\n    for (let a of attacks) {\n      let s = a.data.attackType;\n      if (!attackSections[s]) continue;\n      attackSections[s].items.push(a);\n      attackSections.all.items.push(a);\n    }\n\n    // Assign and return\n    data.inventory = Object.values(inventory);\n    data.spellbookData = spellbookData;\n    data.features = Object.values(features);\n    data.buffs = buffSections;\n    data.attacks = attackSections;\n  }\n\n  /**\n   * Handle rolling a Skill check\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  _onRollSkillCheck(event) {\n    event.preventDefault();\n    const skill = event.currentTarget.parentElement.parentElement.dataset.skill;\n    this.actor.rollSkill(skill, {event: event});\n  }\n\n  _onRollSubSkillCheck(event) {\n    event.preventDefault();\n    const mainSkill = event.currentTarget.parentElement.parentElement.dataset.mainSkill;\n    const skill = event.currentTarget.parentElement.parentElement.dataset.skill;\n    this.actor.rollSkill(`${mainSkill}.subSkills.${skill}`, {event: event});\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle toggling of filters to display a different set of owned items\n   * @param {Event} event     The click event which triggered the toggle\n   * @private\n   */\n  _onToggleFilter(event) {\n    event.preventDefault();\n    const li = event.currentTarget;\n    const set = this._filters[li.parentElement.dataset.filter];\n    const filter = li.dataset.filter;\n    if ( set.has(filter) ) set.delete(filter);\n    else set.add(filter);\n    this.render();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle spawning the ActorTraitSelector application which allows a checkbox of multiple trait options\n   * @param {Event} event   The click event which originated the selection\n   * @private\n   */\n  _onTraitSelector(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n    const label = a.parentElement.querySelector("label");\n    const options = {\n      name: label.getAttribute("for"),\n      title: label.innerText,\n      choices: CONFIG.PF1[a.dataset.options]\n    };\n    new _apps_trait_selector_js__WEBPACK_IMPORTED_MODULE_0__["ActorTraitSelector"](this.actor, options).render(true)\n  }\n\n  _onConfigureToken(event) {\n    event.preventDefault();\n\n    // Determine the Token for which to configure\n    const token = this.token || new Token(this.actor.data.token);\n\n    // Render the Token Config application\n    new _token_config_js__WEBPACK_IMPORTED_MODULE_4__["TokenConfigPF"](token, {\n      left: Math.max(this.position.left - 560 - 10, 10),\n      top: this.position.top,\n      configureDefault: !this.token\n    }).render(true);\n  }\n\n  async saveMCEContent(updateData=null) {\n    let manualUpdate = false;\n    if (updateData == null) {\n      manualUpdate = true;\n      updateData = {};\n    }\n\n    for (const [key, editor] of Object.entries(this.editors)) {\n      if (editor.mce == null) continue;\n\n      updateData[key] = editor.mce.getContent();\n    }\n\n    if (manualUpdate && Object.keys(updateData).length > 0) await this.actor.update(updateData);\n  }\n\n  setItemUpdate(id, key, value) {\n    let obj = this._itemUpdates.filter(o => { return o._id === id; })[0];\n    if (obj == null) {\n      obj = { _id: id };\n      this._itemUpdates.push(obj);\n    }\n\n    obj[key] = value;\n    this._updateItems();\n  }\n\n  async _render(...args) {\n    // Trick to avoid error on elements with changing name\n    let focus = this.element.find(":focus");\n    focus = focus.length ? focus[0] : null;\n    if (focus && focus.name.match(/^data\\.skills\\.(?:[a-zA-Z0-9]*)\\.name$/)) focus.blur();\n\n    return super._render(...args);\n  }\n\n  async _onSubmit(event, {updateData=null, preventClose=false}={}) {\n    event.preventDefault();\n    await this._updateItems();\n\n    return super._onSubmit(event, {updateData, preventClose});\n  }\n\n  async _updateItems() {\n    let promises = [];\n\n    const updates = duplicate(this._itemUpdates);\n    this._itemUpdates = [];\n\n    for (const data of updates) {\n      const item = this.actor.items.filter(o => { return o._id === data._id; })[0];\n      if (item == null) continue;\n\n      delete data._id;\n      if (item.hasPerm(game.user, "OWNER")) promises.push(item.update(data));\n    }\n\n    await Promise.all(promises);\n  }\n\n  /**\n   * @override\n   */\n  async _onDrop(event) {\n    event.preventDefault();\n\n    // Try to extract the data\n    let data;\n    try {\n      data = JSON.parse(event.dataTransfer.getData(\'text/plain\'));\n      if (data.type !== "Item") return;\n    } catch (err) {\n      return false;\n    }\n\n    let itemData = {};\n    let dataType = "";\n\n    // Case 1 - Import from a Compendium pack\n    const actor = this.actor;\n    if (data.pack) {\n      dataType = "compendium";\n      const pack = game.packs.find(p => p.collection === data.pack);\n      const packItem = await pack.getEntity(data.id);\n      if (packItem != null) itemData = packItem.data;\n    }\n\n    // Case 2 - Data explicitly provided\n    else if (data.data) {\n      let sameActor = data.actorId === actor._id;\n      if (sameActor && actor.isToken) sameActor = data.tokenId === actor.token.id;\n      if (sameActor) return this._onSortItem(event, data.data); // Sort existing items\n\n      dataType = "data";\n      itemData = data.data;\n    }\n\n    // Case 3 - Import from World entity\n    else {\n      dataType = "world";\n      itemData = game.items.get(data.id).data;\n    }\n\n    return this.importItem(mergeObject(itemData, this.getDropData(itemData), { inplace: false }), dataType);\n  }\n\n  getDropData(origData) {\n    let result = {};\n\n    // Set spellbook for spell\n    if (getProperty(origData, "type") === "spell") setProperty(result, "data.spellbook", this.currentSpellbookKey);\n\n    return result;\n  }\n\n  async importItem(itemData, dataType) {\n    if (itemData.type === "spell" && this.currentPrimaryTab === "inventory") {\n      return this.actor._createConsumableSpellDialog(itemData);\n    }\n\n    if (itemData._id) delete itemData._id;\n    return this.actor.createEmbeddedEntity("OwnedItem", itemData);\n  }\n\n  async _onConfigControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n    const f = $(a).attr("for");\n    const html = this.element;\n\n    $(a).css("display", "none");\n\n    // Show CR field\n    if (f === "cr") {\n      const elem = html.find(\'input[for="data.details.cr"]\');\n      elem.attr("value", _lib_js__WEBPACK_IMPORTED_MODULE_5__["CR"].fromNumber(this.actor.data.data.details.cr.base));\n      elem.attr("name", "data.details.cr.base");\n      elem.prop("disabled", false);\n      elem.focus();\n      elem.select();\n    }\n\n    // Show base Spell Slots field\n    else if (f === "spellSlots") {\n      const elem = $(a).closest(".spell-uses").find(".base");\n      elem.css("display", "block");\n      elem.focus();\n      elem.select();\n    }\n  }\n\n  async _updateObject(event, formData) {\n    // Translate CR\n    const cr = formData["data.details.cr.base"];\n    if (typeof cr === "string") formData["data.details.cr.base"] = _lib_js__WEBPACK_IMPORTED_MODULE_5__["CR"].fromString(cr);\n\n    return super._updateObject(event, formData);\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/actor/sheets/base.js?')},"./module/actor/sheets/character.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFCharacter", function() { return ActorSheetPFCharacter; });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ "./module/actor/sheets/base.js");\n\n\n\n/**\n * An Actor sheet for player character type actors in the PF system.\n * Extends the base ActorSheetPF class.\n * @type {ActorSheetPF}\n */\nclass ActorSheetPFCharacter extends _base_js__WEBPACK_IMPORTED_MODULE_0__["ActorSheetPF"] {\n\n  /**\n   * Define default rendering options for the NPC sheet\n   * @return {Object}\n   */\n\tstatic get defaultOptions() {\n\t  return mergeObject(super.defaultOptions, {\n      classes: ["pf1", "sheet", "actor", "character"],\n      width: 720,\n      height: 840\n    });\n  }\n\n  static get name() {\n    return game.i18n.localize("PF1.ActorSheetPFCharacter");\n  }\n\n  /* -------------------------------------------- */\n  /*  Rendering                                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Get the correct HTML template path to use for rendering this particular sheet\n   * @type {String}\n   */\n  get template() {\n    if ( !game.user.isGM && this.actor.limited ) return "systems/pf1/templates/actors/limited-sheet.html";\n    return "systems/pf1/templates/actors/character-sheet.html";\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Add some extra data when rendering the sheet to reduce the amount of logic required within the template.\n   */\n  getData() {\n    const data = super.getData();\n    const xpSettings = game.settings.get("pf1", "experienceConfig");\n\n    // Experience Tracking\n    data["disableExperience"] = xpSettings.disableExperienceTracking;\n\n    data.hasClasses = this.actor.items.filter(o => o.type === "class").length > 0;\n\n    // Return data for rendering\n    return data;\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Listeners and Handlers\n  /* -------------------------------------------- */\n\n  /**\n   * Activate event listeners using the prepared sheet HTML\n   * @param html {HTML}   The prepared HTML object ready to be rendered into the DOM\n   */\n\tactivateListeners(html) {\n    super.activateListeners(html);\n    if ( !this.options.editable ) return;\n\n    // Inventory Functions\n    html.find(".currency-convert").click(this._onConvertCurrency.bind(this));\n\n    // Spell Preparation\n    html.find(\'.toggle-prepared\').click(this._onPrepareItem.bind(this));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle toggling the prepared status of an Owned Item within the Actor\n   * @param {Event} event   The triggering click event\n   * @private\n   */\n  _onPrepareItem(event) {\n    event.preventDefault();\n    const itemId = event.currentTarget.closest(".item").dataset.itemId;\n    const item = this.actor.getOwnedItem(itemId);\n    return item.update({"data.preparation.prepared": !item.data.data.preparation.prepared});\n  }\n\n  /* -------------------------------------------- */\n\n  async _onConvertCurrency(event) {\n    event.preventDefault();\n    const curr = duplicate(this.actor.data.data.currency);\n    const convert = {\n      cp: {into: "sp", each: 10},\n      sp: {into: "gp", each: 10 },\n      gp: {into: "pp", each: 10 }\n    };\n    for ( let [c, t] of Object.entries(convert) ) {\n      let change = Math.floor(curr[c] / t.each);\n      curr[c] -= (change * t.each);\n      curr[t.into] += change;\n    }\n    return this.actor.update({"data.currency": curr});\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/actor/sheets/character.js?')},"./module/actor/sheets/npc-lite.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFNPCLite", function() { return ActorSheetPFNPCLite; });\n/* harmony import */ var _npc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./npc.js */ "./module/actor/sheets/npc.js");\n\n\nclass ActorSheetPFNPCLite extends _npc_js__WEBPACK_IMPORTED_MODULE_0__["ActorSheetPFNPC"] {\n\n  /**\n   * Define default rendering options for the NPC sheet\n   * @return {Object}\n   */\n\tstatic get defaultOptions() {\n\t  return mergeObject(super.defaultOptions, {\n      classes: ["pf1", "sheet", "actor", "npc", "lite"],\n      width: 440,\n      height: 200,\n    });\n  }\n    \n  get template() {\n    if ( !game.user.isGM && this.actor.limited ) return "systems/pf1/templates/actors/limited-sheet.html";\n    return "systems/pf1/templates/actors/npc-sheet-lite.html";\n  }\n\n  static get name() {\n    return game.i18n.localize("PF1.ActorSheetPFNPCLite");\n  }\n}\n\n//# sourceURL=webpack://pf1/./module/actor/sheets/npc-lite.js?')},"./module/actor/sheets/npc-loot.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFNPCLoot", function() { return ActorSheetPFNPCLoot; });\n/* harmony import */ var _npc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./npc.js */ "./module/actor/sheets/npc.js");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib.js */ "./module/lib.js");\n\n\n\nclass ActorSheetPFNPCLoot extends _npc_js__WEBPACK_IMPORTED_MODULE_0__["ActorSheetPFNPC"] {\n\n  /**\n   * Define default rendering options for the NPC sheet\n   * @return {Object}\n   */\n\tstatic get defaultOptions() {\n\t  return mergeObject(super.defaultOptions, {\n      classes: ["pf1", "sheet", "actor", "npc", "loot"],\n      width: 560,\n      height: 420,\n    });\n  }\n    \n  get template() {\n    return "systems/pf1/templates/actors/npc-sheet-loot.html";\n  }\n\n  static get name() {\n    return game.i18n.localize("PF1.ActorSheetPFNPCLoot");\n  }\n\n  getData() {\n    const data = super.getData();\n\n    data.isLootSheet = true;\n    data.inventoryTotalValue = this.calculateTotalItemValue() + this.actor.mergeCurrency();\n\n    return data;\n  }\n\n  calculateTotalItemValue() {\n    const items = this.actor.items;\n    return Math.floor(items.reduce((cur, i) => {\n      return cur + (i.data.data.price * i.data.data.quantity);\n    }, 0) * 100) / 100;\n  }\n\n  createTabs(html) {\n    const tabGroups = {\n      "inventory": {},\n    };\n    _lib_js__WEBPACK_IMPORTED_MODULE_1__["createTabs"].call(this, html, tabGroups);\n  }\n}\n\n//# sourceURL=webpack://pf1/./module/actor/sheets/npc-loot.js?')},"./module/actor/sheets/npc.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFNPC", function() { return ActorSheetPFNPC; });\n/* harmony import */ var _sheets_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../sheets/base.js */ "./module/actor/sheets/base.js");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib.js */ "./module/lib.js");\n\n\n\n/**\n * An Actor sheet for NPC type characters in the D&D5E system.\n * Extends the base ActorSheetPF class.\n * @type {ActorSheetPF}\n */\nclass ActorSheetPFNPC extends _sheets_base_js__WEBPACK_IMPORTED_MODULE_0__["ActorSheetPF"] {\n\n  /**\n   * Define default rendering options for the NPC sheet\n   * @return {Object}\n   */\n\tstatic get defaultOptions() {\n\t  return mergeObject(super.defaultOptions, {\n      classes: ["pf1", "sheet", "actor", "npc"],\n      width: 720,\n      height: 800\n    });\n  }\n\n  /* -------------------------------------------- */\n  /*  Rendering                                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Get the correct HTML template path to use for rendering this particular sheet\n   * @type {String}\n   */\n  get template() {\n    if ( !game.user.isGM && this.actor.limited ) return "systems/pf1/templates/actors/limited-sheet.html";\n    return "systems/pf1/templates/actors/npc-sheet.html";\n  }\n\n  static get name() {\n    return game.i18n.localize("PF1.ActorSheetPFNPC");\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Add some extra data when rendering the sheet to reduce the amount of logic required within the template.\n   */\n  getData() {\n    const data = super.getData();\n\n    // Challenge Rating\n    try {\n      data.labels.cr = _lib_js__WEBPACK_IMPORTED_MODULE_1__["CR"].fromNumber(getProperty(this.actor.data, "data.details.cr.total"));\n    }\n    catch (e) {\n      try {\n        data.labels.cr = _lib_js__WEBPACK_IMPORTED_MODULE_1__["CR"].fromNumber(getProperty(this.actor.data, "data.details.cr"));\n      }\n      catch (e) {\n        data.labels.cr = _lib_js__WEBPACK_IMPORTED_MODULE_1__["CR"].fromNumber(1);\n      }\n    }\n    return data;\n  }\n\n  /* -------------------------------------------- */\n  /*  Object Updates                              */\n  /* -------------------------------------------- */\n\n  /**\n   * This method is called upon form submission after form data is validated\n   * @param event {Event}       The initial triggering submission event\n   * @param formData {Object}   The object of validated form data with which to update the object\n   * @private\n   */\n  async _updateObject(event, formData) {\n\n    // Parent ActorSheet update steps\n    super._updateObject(event, formData);\n  }\n\n  /* -------------------------------------------- */\n  /*  Event Listeners and Handlers                */\n  /* -------------------------------------------- */\n\n  /**\n   * Activate event listeners using the prepared sheet HTML\n   * @param html {HTML}   The prepared HTML object ready to be rendered into the DOM\n   */\n\tactivateListeners(html) {\n    super.activateListeners(html);\n\n    // Rollable Health Formula\n    html.find(".health .rollable").click(this._onRollHealthFormula.bind(this));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle rolling NPC health values using the provided formula\n   * @param {Event} event     The original click event\n   * @private\n   */\n  _onRollHealthFormula(event) {\n    event.preventDefault();\n    const formula = this.actor.data.data.attributes.hp.formula;\n    if ( !formula ) return;\n    const hp = new Roll(formula).roll().total;\n    AudioHelper.play({src: CONFIG.sounds.dice});\n    this.actor.update({"data.attributes.hp.value": hp, "data.attributes.hp.max": hp});\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/actor/sheets/npc.js?')},"./module/apps/actor-flags.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorSheetFlags", function() { return ActorSheetFlags; });\nclass ActorSheetFlags extends BaseEntitySheet {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    return mergeObject(options, {\n      id: "actor-flags",\n      classes: ["pf1"],\n      template: "systems/pf1/templates/apps/actor-flags.html",\n      width: 500,\n      closeOnSubmit: true\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configure the title of the special traits selection window to include the Actor name\n   * @type {String}\n   */\n  get title() {\n    return `${game.i18n.localize(\'PF1.FlagsTitle\')}: ${this.object.name}`;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare data used to render the special Actor traits selection UI\n   * @return {Object}\n   */\n  getData() {\n    const data = super.getData();\n    data.flags = this._getFlags();\n    return data;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare an object of flags data which groups flags by section\n   * Add some additional data for rendering\n   * @return {Object}\n   */\n  _getFlags() {\n    const flags = {};\n    for ( let [k, v] of Object.entries(CONFIG.PF1.characterFlags) ) {\n      if ( !flags.hasOwnProperty(v.section) ) flags[v.section] = {};\n      let flag = duplicate(v);\n      flag.type = v.type.name;\n      flag.isCheckbox = v.type === Boolean;\n      flag.isSelect = v.hasOwnProperty(\'choices\');\n      flag.value = this.entity.getFlag("PF1", k);\n      flags[v.section][k] = flag;\n    }\n    return flags;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update the Actor using the configured flags\n   * Remove/unset any flags which are no longer configured\n   */\n  _updateObject(event, formData) {\n    const actor = this.object;\n\n    // Iterate over the flags which may be configured\n    const updateData = {};\n    for ( let [k, v] of Object.entries(CONFIG.pf1.characterFlags) ) {\n      if ( [undefined, null, "", false].includes(formData[k]) ) updateData[`-=${k}`] = null;\n      else if ( (v.type === Number) && (formData[k] === 0) ) updateData[`-=${k}`] = null;\n      else updateData[k] = formData[k];\n    }\n\n    // Set the new flags in bulk\n    actor.update({\'flags.pf1\': updateData});\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/apps/actor-flags.js?')},"./module/apps/actor-rest.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorRestDialog", function() { return ActorRestDialog; });\nclass ActorRestDialog extends BaseEntitySheet {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    return mergeObject(options, {\n      id: "actor-flags",\n      classes: ["pf1", "actor-rest"],\n      template: "systems/pf1/templates/apps/actor-rest.html",\n      width: 500,\n      closeOnSubmit: true\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Configure the title of the special traits selection window to include the Actor name\n   * @type {String}\n   */\n  get title() {\n    return `${game.i18n.localize(\'PF1.Rest\')}: ${this.object.name}`;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update the Actor using the configured options\n   * Remove/unset any flags which are no longer configured\n   */\n  _updateObject(event, formData) {\n    const actor = this.object;\n    const actorData = actor.data.data;\n\n    const updateData = {};\n    // Restore health and ability damage\n    if (formData["restoreHealth"] === true) {\n      const hd = actorData.attributes.hd.total;\n      let heal = {\n        hp: hd,\n        abl: 1,\n      };\n      if (formData["longTermCare"] === true) {\n        heal.hp *= 2;\n        heal.abl *= 2;\n      }\n\n      updateData["data.attributes.hp.value"] = Math.min(actorData.attributes.hp.value + heal.hp, actorData.attributes.hp.max);\n      for (let [key, abl] of Object.entries(actorData.abilities)) {\n        let dmg = Math.abs(abl.damage);\n        updateData[`data.abilities.${key}.damage`] = Math.max(0, dmg - heal.abl);\n      }\n    }\n\n    // Restore daily uses of spells, feats, etc.\n    if (formData["restoreDailyUses"] === true) {\n      let items = [],\n        hasItemUpdates = false;\n      for (let a = 0; a < actor.data.items.length; a++) {\n        let item = actor.data.items[a];\n        items[a] = item;\n        let itemUpdate = {};\n        const itemData = item.data;\n\n        if (itemData.uses && itemData.uses.per === "day" && itemData.uses.value !== itemData.uses.max) {\n          hasItemUpdates = true;\n          itemUpdate["data.uses.value"] = itemData.uses.max;\n        }\n        else if (item.type === "spell") {\n          const spellbook = getProperty(actorData, `attributes.spells.spellbooks.${itemData.spellbook}`),\n            isSpontaneous = spellbook.spontaneous;\n          if (!isSpontaneous && itemData.preparation.preparedAmount < itemData.preparation.maxAmount) {\n            hasItemUpdates = true;\n            itemUpdate["data.preparation.preparedAmount"] = itemData.preparation.maxAmount;\n          }\n        }\n\n        items[a] = mergeObject(item, itemUpdate, { enforceTypes: false, inplace: false });\n      }\n      if (hasItemUpdates) updateData.items = items;\n\n      // Restore spontaneous spellbooks\n      for (let [key, spellbook] of Object.entries(actorData.attributes.spells.spellbooks)) {\n        if (spellbook.spontaneous) {\n          for (let sl of Object.keys(CONFIG.PF1.spellLevels)) {\n            updateData[`data.attributes.spells.spellbooks.${key}.spells.spell${sl}.value`] = getProperty(actorData, `attributes.spells.spellbooks.${key}.spells.spell${sl}.max`);\n          }\n        }\n      }\n    }\n\n    actor.update(updateData);\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/apps/actor-rest.js?')},"./module/apps/compendium-browser.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompendiumBrowser", function() { return CompendiumBrowser; });\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib.js */ "./module/lib.js");\n\n\nclass CompendiumBrowser extends Application {\n  constructor(...args) {\n    super(...args);\n\n    this.items = [];\n\n    this.filters = [];\n\n    this.activeFilters = {};\n\n    this._data = {\n      loaded: false,\n      data: {},\n      promise: null,\n    };\n\n    // Preload compendiums\n    if (game.settings.get("pf1", "preloadCompendiums") === true) {\n      this.loadData();\n    }\n  }\n\n  loadData() {\n    return new Promise(resolve => {\n      let promise = this._data.promise;\n      if (promise == null) {\n        promise = this._gatherData();\n        this._data.promise = promise;\n      }\n\n      promise.then(() => {\n        this._data.loaded = true;\n        this._data.promise = null;\n        resolve(this._data.data);\n      });\n    });\n  }\n\n  async _gatherData() {\n    await this._fetchMetadata();\n\n    this._data.data = {\n      filters: this.filters,\n      collection: this.items,\n    };\n  }\n\n  static get defaultOptions() {\n    return mergeObject(super.defaultOptions, {\n      template: "systems/pf1/templates/apps/compendium-browser.html",\n      width: 720,\n      height: window.innerHeight - 60,\n      top: 30,\n      left: 40,\n    });\n  }\n\n  get typeName() {\n    switch (this.type) {\n      case "spells":\n        return game.i18n.localize("PF1.Spells");\n      case "items":\n        return game.i18n.localize("PF1.Items");\n      case "feats":\n        return game.i18n.localize("PF1.Features");\n      case "bestiary":\n        return game.i18n.localize("PF1.Creatures");\n      case "classes":\n        return game.i18n.localize("PF1.ItemTypeClass");\n    }\n    return this.type;\n  }\n\n  get type() {\n    return this.options.type;\n  }\n\n  get title() {\n    return [this.typeName, "Browser"].join(" ");\n  }\n\n  get entityType() {\n    return this.options.entityType;\n  }\n\n  _onProgress(progress) {\n    progress.loaded++;\n    progress.pct = Math.round(progress.loaded * 10 / progress.total) * 10;\n    SceneNavigation._onLoadProgress(progress.message, progress.pct);\n  }\n\n  async _fetchMetadata() {\n    this.items = [];\n\n    // Initialize progress bar\n    const progress = { pct: 0, message: game.i18n.localize("PF1.LoadingCompendiumBrowser"), loaded: -1, total: game.packs.size };\n    this._onProgress(progress);\n\n    // Load compendiums\n    for (let p of game.packs.values()) {\n      if (p.private && !game.user.isGM) {\n        this._onProgress(progress);\n        continue;\n      }\n      if (p.entity !== this.entityType) {\n        this._onProgress(progress);\n        continue;\n      }\n\n      const items = await p.getContent();\n      for (let i of items) {\n        if (!this._filterItems(i)) continue;\n        this.items.push(this._mapItem(p, i));\n      }\n      this._onProgress(progress);\n    }\n\n    // Sort items\n    this.items.sort((a, b) => {\n      if (a.item.name < b.item.name) return -1;\n      if (a.item.name > b.item.name) return 1;\n      return 0;\n    });\n\n    // Return if no appropriate items were found\n    if (this.items.length === 0) {\n      return;\n    }\n\n    // Gather filter data\n    switch (this.type) {\n      case "spells":\n        this._fetchSpellFilters();\n        break;\n      case "items":\n        this._fetchItemFilters();\n        break;\n      case "bestiary":\n        this._fetchBestiaryFilters();\n        break;\n      case "feats":\n        this._fetchFeatFilters();\n        break;\n      case "classes":\n        this._fetchClassFilters();\n        break;\n    }\n\n    this.activeFilters = this.filters.reduce((cur, f) => {\n      cur[f.path] = [];\n      return cur;\n    }, {});\n  }\n\n  _filterItems(item) {\n    if (this.type === "spells" && item.type !== "spell") return false;\n    if (this.type === "items" && !["weapon", "equipment", "loot", "consumable"].includes(item.type)) return false;\n    if (this.type === "feats" && item.type !== "feat") return false;\n    if (this.type === "classes" && item.type !== "class") return false;\n    return true;\n  }\n\n  _mapItem(pack, item) {\n    const result = {\n      collection: pack.collection,\n      item: {\n        _id: item._id,\n        name: item.name,\n        type: item.type,\n        img: item.img,\n        data: item.data.data,\n      },\n    };\n\n    // Feat-specific variables\n    if (this.type === "feats") {\n      if (!this.extraFilters) {\n        this.extraFilters = {\n          "tags": [],\n          "associations": {\n            "class": [],\n          },\n        };\n      }\n\n      result.item.tags = (getProperty(item.data, "data.tags") || []).reduce((cur, o) => {\n        if (!this.extraFilters["tags"].includes(o[0])) this.extraFilters["tags"].push(o[0]);\n        cur.push(o[0]);\n        return cur;\n      }, []);\n\n      result.item.assocations = {\n        "class": (getProperty(item.data, "data.featType") === "classFeat" ? getProperty(item.data, "data.associations.classes") || [] : []).reduce((cur, o) => {\n          if (!this.extraFilters.associations["class"].includes(o[0])) this.extraFilters.associations["class"].push(o[0]);\n          cur.push(o[0]);\n          return cur;\n        }, []),\n      };\n    }\n\n    // Item-specific variables\n    if (this.type === "items") {\n      if (!this.extraFilters) {\n        this.extraFilters = {};\n      }\n\n      result.item.weaponProps = Object.entries(getProperty(item.data, "data.properties") || []).reduce((cur, o) => {\n        if (o[1]) cur.push(o[0]);\n        return cur;\n      }, []);\n    }\n\n    // Spell-specific variables\n    if (this.type === "spells") {\n      if (!this.extraFilters) {\n        this.extraFilters = {\n          "learnedAt.class": [],\n          "learnedAt.domain": [],\n          "learnedAt.subDomain": [],\n          "learnedAt.elementalSchool": [],\n          "learnedAt.bloodline": [],\n          "data.subschool": [],\n          "spellTypes": [],\n        };\n      }\n\n      result.item.allSpellLevels = [];\n\n      // Add class/domain/etc filters\n      result.item.learnedAt = {\n        "class": (getProperty(item.data, "data.learnedAt.class") || []).reduce((cur, o) => {\n          if (!this.extraFilters["learnedAt.class"].includes(o[0])) this.extraFilters["learnedAt.class"].push(o[0]);\n          if (!result.item.allSpellLevels.includes(o[1])) result.item.allSpellLevels.push(o[1]);\n          cur.push(o[0]);\n          return cur;\n        }, []),\n        "domain": (getProperty(item.data, "data.learnedAt.domain") || []).reduce((cur, o) => {\n          if (!this.extraFilters["learnedAt.domain"].includes(o[0])) this.extraFilters["learnedAt.domain"].push(o[0]);\n          if (!result.item.allSpellLevels.includes(o[1])) result.item.allSpellLevels.push(o[1]);\n          cur.push(o[0]);\n          return cur;\n        }, []),\n        "subDomain": (getProperty(item.data, "data.learnedAt.subDomain") || []).reduce((cur, o) => {\n          if (!this.extraFilters["learnedAt.subDomain"].includes(o[0])) this.extraFilters["learnedAt.subDomain"].push(o[0]);\n          if (!result.item.allSpellLevels.includes(o[1])) result.item.allSpellLevels.push(o[1]);\n          cur.push(o[0]);\n          return cur;\n        }, []),\n        "elementalSchool": (getProperty(item.data, "data.learnedAt.elementalSchool") || []).reduce((cur, o) => {\n          if (!this.extraFilters["learnedAt.elementalSchool"].includes(o[0])) this.extraFilters["learnedAt.elementalSchool"].push(o[0]);\n          if (!result.item.allSpellLevels.includes(o[1])) result.item.allSpellLevels.push(o[1]);\n          cur.push(o[0]);\n          return cur;\n        }, []),\n        "bloodline": (getProperty(item.data, "data.learnedAt.bloodline") || []).reduce((cur, o) => {\n          if (!this.extraFilters["learnedAt.bloodline"].includes(o[0])) this.extraFilters["learnedAt.bloodline"].push(o[0]);\n          if (!result.item.allSpellLevels.includes(o[1])) result.item.allSpellLevels.push(o[1]);\n          cur.push(o[0]);\n          return cur;\n        }, []),\n        "spellLevel": {\n          "class": (getProperty(item.data, "data.learnedAt.class") || []).reduce((cur, o) => {\n            cur[o[0]] = o[1];\n            return cur;\n          }, {}),\n          "domain": (getProperty(item.data, "data.learnedAt.domain") || []).reduce((cur, o) => {\n            cur[o[0]] = o[1];\n            return cur;\n          }, {}),\n          "subDomain": (getProperty(item.data, "data.learnedAt.subDomain") || []).reduce((cur, o) => {\n            cur[o[0]] = o[1];\n            return cur;\n          }, {}),\n          "elementalSchool": (getProperty(item.data, "data.learnedAt.elementalSchool") || []).reduce((cur, o) => {\n            cur[o[0]] = o[1];\n            return cur;\n          }, {}),\n          "bloodline": (getProperty(item.data, "data.learnedAt.bloodline") || []).reduce((cur, o) => {\n            cur[o[0]] = o[1];\n            return cur;\n          }, {}),\n        },\n      };\n\n      // Add subschools\n      {\n        const subschool = getProperty(item.data, "data.subschool");\n        if (subschool && !this.extraFilters["data.subschool"].includes(subschool)) this.extraFilters["data.subschool"].push(subschool);\n      }\n      // Add spell types\n      {\n        const spellTypes = getProperty(item.data, "data.types") ? getProperty(item.data, "data.types").split(CONFIG.PF1.re.traitSeparator) : []\n        result.item.spellTypes = spellTypes;\n        for (let st of spellTypes) {\n          if (!this.extraFilters["spellTypes"].includes(st)) this.extraFilters["spellTypes"].push(st);\n        }\n      }\n    }\n\n    // Bestiary-specific variables\n    if (this.type === "bestiary") {\n      if (!this.extraFilters) {\n        this.extraFilters = {\n          "data.details.cr.total": [],\n          "subTypes": [],\n        };\n      }\n      result.item.creatureType = "";\n      result.item.subTypes = [];\n\n      // Add CR filters\n      if (item.data.type === "npc") {\n        const cr = getProperty(item.data, "data.details.cr.total");\n        if (cr && !this.extraFilters["data.details.cr.total"].includes(cr)) this.extraFilters["data.details.cr.total"].push(cr);\n      }\n      // Get creature (sub)type\n      const race = item.race;\n      if (race != null) {\n        result.item.creatureType = getProperty(race.data, "data.creatureType");\n        result.item.subTypes = getProperty(race.data, "data.subTypes").map(o => {\n          if (!this.extraFilters["subTypes"].includes(o[0])) this.extraFilters["subTypes"].push(o[0]);\n          return o[0];\n        });\n      }\n    }\n\n    // Class-specific filters\n    if (this.type === "classes") {\n      if (!this.extraFilters) {\n        this.extraFilters = {\n          "data.hd": [],\n          "data.skillsPerLevel": [],\n        };\n      }\n\n      // Add HD\n      {\n        const hd = item.data.data.hd;\n        if (hd && !this.extraFilters["data.hd"].includes(hd)) this.extraFilters["data.hd"].push(hd);\n      }\n      // Add skills per level\n      {\n        const s = item.data.data.skillsPerLevel;\n        if (s && !this.extraFilters["data.skillsPerLevel"].includes(s)) this.extraFilters["data.skillsPerLevel"].push(s);\n      }\n    }\n\n    return result;\n  }\n\n  async getData() {\n    if (!this._data.loaded) await this.loadData();\n\n    return this._data.data;\n  }\n\n  async refresh() {\n    await this.loadData();\n    this.render(false);\n  }\n\n  _fetchSpellFilters() {\n    this.filters = [\n      {\n        path: "data.school",\n        label: game.i18n.localize("PF1.SpellSchool"),\n        items: Object.entries(CONFIG.PF1.spellSchools).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      {\n        path: "data.subschool",\n        label: game.i18n.localize("PF1.SubSchool"),\n        items: this.extraFilters["data.subschool"].reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      {\n        path: "spellTypes",\n        label: game.i18n.localize("PF1.TypePlural"),\n        items: this.extraFilters["spellTypes"].reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      {\n        path: "learnedAt.class",\n        label: game.i18n.localize("PF1.ClassPlural"),\n        items: this.extraFilters["learnedAt.class"].reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      {\n        path: "learnedAt.domain",\n        label: game.i18n.localize("PF1.Domain"),\n        items: this.extraFilters["learnedAt.domain"].reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      {\n        path: "learnedAt.subDomain",\n        label: game.i18n.localize("PF1.SubDomain"),\n        items: this.extraFilters["learnedAt.subDomain"].reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      // {\n      //   path: "learnedAt.elementalSchool",\n      //   label: game.i18n.localize("PF1.ElementalSchool"),\n      //   items: this.extraFilters["learnedAt.elementalSchool"].reduce((cur, o) => {\n      //     cur.push({ key: o, name: o });\n      //     return cur;\n      //   }, []),\n      // },\n      {\n        path: "learnedAt.bloodline",\n        label: game.i18n.localize("PF1.Bloodline"),\n        items: this.extraFilters["learnedAt.bloodline"].reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      {\n        path: "_spellLevel",\n        label: game.i18n.localize("PF1.SpellLevel"),\n        items: Object.entries(CONFIG.PF1.spellLevels).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n    ];\n  }\n\n  _fetchItemFilters() {\n    this.filters = [\n      {\n        path: "type",\n        label: game.i18n.localize("PF1.Type"),\n        items: [\n          { key: "weapon", name: game.i18n.localize("PF1.ItemTypeWeapon") },\n          { key: "equipment", name: game.i18n.localize("PF1.ItemTypeEquipment") },\n          { key: "consumable", name: game.i18n.localize("PF1.ItemTypeConsumable") },\n          { key: "loot", name: game.i18n.localize("PF1.Misc") },\n        ],\n      },\n      {\n        path: "data.weaponType",\n        label: game.i18n.localize("PF1.WeaponType"),\n        items: Object.entries(CONFIG.PF1.weaponTypes).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1]._label });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.weaponSubtype",\n        label: game.i18n.localize("PF1.WeaponSubtype"),\n        items: Object.values(CONFIG.PF1.weaponTypes).reduce((cur, o) => {\n          cur = cur.concat((Object.entries(o).filter(i => !i[0].startsWith("_")).reduce((arr, i) => {\n            if (!cur.filter(a => a.key === i[0]).length) {\n              arr.push({ key: i[0], name: i[1] });\n            }\n            return arr;\n          }, [])));\n          return cur;\n        }, []),\n      },\n      {\n        path: "weaponProps",\n        label: game.i18n.localize("PF1.WeaponProperties"),\n        items: Object.entries(CONFIG.PF1.weaponProperties).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.equipmentType",\n        label: game.i18n.localize("PF1.EquipmentType"),\n        items: Object.entries(CONFIG.PF1.equipmentTypes).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1]._label });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.equipmentSubtype",\n        label: game.i18n.localize("PF1.EquipmentSubtype"),\n        items: Object.values(CONFIG.PF1.equipmentTypes).reduce((cur, o) => {\n          cur = cur.concat((Object.entries(o).filter(i => !i[0].startsWith("_")).reduce((arr, i) => {\n            if (!cur.filter(a => a.key === i[0]).length) {\n              arr.push({ key: i[0], name: i[1] });\n            }\n            return arr;\n          }, [])));\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.slot",\n        label: game.i18n.localize("PF1.Slot"),\n        items: Object.values(CONFIG.PF1.equipmentSlots).reduce((cur, o) => {\n          cur = cur.concat((Object.entries(o).filter(i => !i[0].startsWith("_")).reduce((arr, i) => {\n            if (!cur.filter(a => a.key === i[0]).length) {\n              arr.push({ key: i[0], name: i[1] });\n            }\n            return arr;\n          }, [])));\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.consumableType",\n        label: game.i18n.localize("PF1.ConsumableType"),\n        items: Object.entries(CONFIG.PF1.consumableTypes).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.subType",\n        label: game.i18n.localize("PF1.Misc"),\n        items: Object.entries(CONFIG.PF1.lootTypes).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n    ];\n  }\n\n  _fetchBestiaryFilters() {\n    this.filters = [\n      {\n        path: "data.details.cr.total",\n        label: "CR",\n        items: this.extraFilters["data.details.cr.total"].sort().reduce((cur, o) => {\n          cur.push({ key: o, name: _lib_js__WEBPACK_IMPORTED_MODULE_0__["CR"].fromNumber(o) });\n          return cur;\n        }, []),\n      },\n      {\n        path: "creatureType",\n        label: game.i18n.localize("PF1.CreatureType"),\n        items: Object.entries(CONFIG.PF1.creatureTypes).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "subTypes",\n        label: game.i18n.localize("PF1.RaceSubtypePlural"),\n        items: this.extraFilters["subTypes"].sort().reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []),\n      },\n    ];\n  }\n\n  _fetchFeatFilters() {\n    this.filters = [\n      {\n        path: "data.featType",\n        label: game.i18n.localize("PF1.Type"),\n        items: Object.entries(CONFIG.PF1.featTypes).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "tags",\n        label: game.i18n.localize("PF1.Tags"),\n        items: this.extraFilters.tags.reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n      {\n        path: "assocations.class",\n        label: game.i18n.localize("PF1.ClassPlural"),\n        items: this.extraFilters.associations["class"].reduce((cur, o) => {\n          cur.push({ key: o, name: o });\n          return cur;\n        }, []).sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        }),\n      },\n    ];\n  }\n\n  _fetchClassFilters() {\n    this.filters = [\n      {\n        path: "data.classType",\n        label: game.i18n.localize("PF1.ClassType"),\n        items: Object.entries(CONFIG.PF1.classTypes).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.hd",\n        label: game.i18n.localize("PF1.HitDie"),\n        items: this.extraFilters["data.hd"].reduce((cur, o) => {\n          cur.push({ key: o.toString(), name: o.toString() });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.bab",\n        label: game.i18n.localize("PF1.BAB"),\n        items: Object.entries(CONFIG.PF1.classBAB).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.skillsPerLevel",\n        label: game.i18n.localize("PF1.SkillsPerLevel"),\n        items: this.extraFilters["data.skillsPerLevel"].reduce((cur, o) => {\n          cur.push({ key: o.toString(), name: o.toString() });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.savingThrows.fort.value",\n        label: game.i18n.localize("PF1.SavingThrowFort"),\n        items: Object.entries(CONFIG.PF1.classSavingThrows).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.savingThrows.ref.value",\n        label: game.i18n.localize("PF1.SavingThrowRef"),\n        items: Object.entries(CONFIG.PF1.classSavingThrows).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n      {\n        path: "data.savingThrows.will.value",\n        label: game.i18n.localize("PF1.SavingThrowWill"),\n        items: Object.entries(CONFIG.PF1.classSavingThrows).reduce((cur, o) => {\n          cur.push({ key: o[0], name: o[1] });\n          return cur;\n        }, []),\n      },\n    ];\n  }\n\n  async _render(...args) {\n    await super._render(...args);\n\n    this.filterQuery = /.*/;\n    this.element.find(".filter-content").css("display", "none");\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    // Open sheets\n    html.find(\'.entry-name\').click(ev => {\n      let li = ev.currentTarget.parentElement;\n      this._onEntry(li.getAttribute("data-collection"), li.getAttribute("data-entry-id"));\n    });\n\n    // Make compendium items draggable\n    html.find(\'.directory-item\').each((i, li) => {\n      li.setAttribute("draggable", true);\n      li.addEventListener(\'dragstart\', this._onDragStart, false);\n    });\n\n    html.find(\'input[name="search"]\').keyup(this._onFilterResults.bind(this));\n\n    html.find(\'.filter input[type="checkbox"]\').change(this._onActivateBooleanFilter.bind(this));\n\n    html.find(\'.filter h3\').click(this._toggleFilterVisibility.bind(this));\n\n    html.find("button.refresh").click(this.refresh.bind(this));\n  }\n\n  /**\n   * Handle opening a single compendium entry by invoking the configured entity class and its sheet\n   * @private\n   */\n  async _onEntry(collectionKey, entryId) {\n    const pack = game.packs.find(o => o.collection === collectionKey);\n    const entity = await pack.getEntity(entryId);\n    entity.sheet.render(true);\n  }\n\n  /**\n   * Handle a new drag event from the compendium, create a placeholder token for dropping the item\n   * @private\n   */\n  _onDragStart(event) {\n    const li = this,\n          packName = li.getAttribute("data-collection"),\n          pack = game.packs.find(p => p.collection === packName);\n\n    // Get the pack\n    if (!pack) {\n      event.preventDefault();\n      return false;\n    }\n\n    // Set the transfer data\n    event.dataTransfer.setData("text/plain", JSON.stringify({\n      type: pack.entity,\n      pack: pack.collection,\n      id: li.getAttribute("data-entry-id")\n    }));\n  }\n\n  _toggleFilterVisibility(event) {\n    event.preventDefault();\n    const title = event.currentTarget;\n    const content = $(title).siblings(".filter-content")[0];\n\n    if (content.style.display === "none") content.style.display = "block";\n    else content.style.display = "none";\n  }\n\n  _onFilterResults(event) {\n    event.preventDefault();\n    let input = event.currentTarget;\n\n    // Define filtering function\n    let filter = query => {\n      this.filterQuery = query;\n      this._filterResults();\n    };\n\n    // Filter if we are done entering keys\n    let query = new RegExp(RegExp.escape(input.value), "i");\n    if (this._filterTimeout) {\n      clearTimeout(this._filterTimeout);\n      this._filterTimeout = null;\n    }\n    this._filterTimeout = setTimeout(() => filter(query), 100);\n  }\n\n  _onActivateBooleanFilter(event) {\n    event.preventDefault();\n    let input = event.currentTarget;\n    const path = input.closest(".filter").dataset.path;\n    const key = input.name;\n    const value = input.checked;\n\n    if (value) {\n      let index = this.activeFilters[path].indexOf(key);\n      if (index < 0) this.activeFilters[path].push(key);\n    }\n    else {\n      let index = this.activeFilters[path].indexOf(key);\n      if (index >= 0) this.activeFilters[path].splice(index, 1);\n    }\n\n    this._filterResults();\n  }\n\n  _filterResults() {\n    this.element.find("li.directory-item").each((a, li) => {\n      const id = li.dataset.entryId;\n      let item = this.items.find(i => i.item._id === id).item;\n      li.style.display = this._passesFilters(item) ? "flex" : "none";\n    });\n  }\n\n  _passesFilters(item) {\n    if (!this.filterQuery.test(item.name)) return false;\n\n    for (let [path, filter] of Object.entries(this.activeFilters)) {\n      if (filter.length === 0) continue;\n\n      // Handle special cases\n      // Handle Spell Level\n      {\n        let result = null;\n        if (this.type === "spells" && path === "_spellLevel") {\n          result = false;\n          let hasActiveFilter = false;\n          const spellLevels = this.activeFilters[path];\n          const checks = [\n            { path: "learnedAt.class", type: "class" },\n            { path: "learnedAt.domain", type: "domain" },\n            { path: "learnedAt.subDomain", type: "subDomain" },\n            { path: "learnedAt.elementalSchool", type: "elementalSchool" },\n            { path: "learnedAt.bloodline", type: "bloodline" },\n          ];\n          for (let c of checks) {\n            const f = this.activeFilters[c.path];\n            if (!f || !f.length) continue;\n            hasActiveFilter = true;\n            for (let fi of f) {\n              const p = getProperty(item, `learnedAt.spellLevel.${c.type}`);\n              for (let sl of spellLevels) {\n                if (p[fi] === parseInt(sl)) result = true;\n              }\n            }\n          }\n          if (!hasActiveFilter) {\n            for (let sl of spellLevels) {\n              if (item.allSpellLevels.includes(parseInt(sl))) result = true;\n            }\n          }\n        }\n        if (result === false) return false;\n        else if (result === true) continue;\n      }\n\n      // Handle the rest\n      const prop = getProperty(item, path);\n      if (prop == null) return false;\n      if (typeof prop === "number") {\n        filter = filter.map(o => parseFloat(o)).filter(o => !isNaN(o));\n      }\n      if (prop instanceof Array) {\n        if (!filter.every(o => prop.includes(o))) return false;\n        continue;\n      }\n      if (!filter.includes(prop)) return false;\n    }\n\n    return true;\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/apps/compendium-browser.js?')},"./module/apps/entry-selector.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntrySelector", function() { return EntrySelector; });\nclass EntrySelector extends FormApplication {\n  constructor(...args) {\n    super(...args);\n\n    this.entries = duplicate(getProperty(this.object.data, this.attribute) || []);\n  }\n\n  static get defaultOptions() {\n    return mergeObject(super.defaultOptions, {\n      id: "entry-selector",\n      classes: ["pf1", "entry"],\n      title: "Entry Selector",\n      template: "systems/pf1/templates/apps/entry-selector.html",\n      width: 320,\n      height: "auto",\n      closeOnSubmit: false,\n      submitOnClose: false,\n    });\n  }\n\n  get attribute() {\n    return this.options.name;\n  }\n\n  get fields() {\n    return this.options.fields.split(";");\n  }\n\n  get dtypes() {\n    return this.options.dtypes.split(";");\n  }\n\n  get dataCount() {\n    return this.fields.length;\n  }\n\n  getData() {\n    const entries = this.entries.map(o => {\n      return o.map((o2, a) => {\n        return [o2, this.dtypes[a]];\n      });\n    });\n\n    return {\n      entries: entries,\n      fields: this.fields,\n    };\n  }\n\n  activateListeners(html) {\n    html.find(".entry-control").click(this._onEntryControl.bind(this));\n\n    html.find(\'tr td input[type="text"]\').change(this._onEntryChange.bind(this));\n\n    html.find(\'button[type="submit"]\').click(this._submitAndClose.bind(this));\n  }\n\n  async _updateObject(event, formData) {\n    const updateData = {};\n    \n    updateData[this.attribute] = this.entries;\n\n    return this.object.update(updateData);\n  }\n\n  async _onEntryControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    if (a.classList.contains("add-entry")) {\n      let obj = [];\n      for (let a = 0; a < this.dataCount; a++) {\n        let dataType = this.dtypes[a];\n        if (dataType === "Number") obj.push(0);\n        else obj.push("");\n      }\n      this.entries.push(obj);\n      this._render(false);\n    }\n\n    if (a.classList.contains("delete-entry")) {\n      const tr = a.closest("tr");\n      const index = parseInt(tr.dataset.index);\n      this.entries.splice(index, 1);\n      this._render(false);\n    }\n  }\n\n  async _onEntryChange(event) {\n    const a = event.currentTarget;\n\n    const tr = a.closest("tr.entry");\n    const index = parseInt(tr.dataset.index);\n    const index2 = parseInt(a.dataset.index);\n    const value = a.value;\n\n    if (a.dataset.dtype === "Number") {\n      let v = parseFloat(value);\n      if (isNaN(v)) v = 0;\n      this.entries[index][index2] = Math.floor(v * 100) / 100;\n    }\n    else this.entries[index][index2] = value;\n  }\n\n  async _submitAndClose(event) {\n    event.preventDefault();\n    await this._onSubmit(event);\n    this.close();\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/apps/entry-selector.js?')},"./module/apps/point-buy-calculator.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointBuyCalculator", function() { return PointBuyCalculator; });\nclass PointBuyCalculator extends FormApplication {\n\n  constructor(...args) {\n    super(...args);\n\n    this.abilities = [];\n    for (let [k, name] of Object.entries(CONFIG.PF1.abilities)) {\n      this.abilities.push({\n        key: k,\n        name: name,\n        value: 10,\n      });\n    }\n  }\n\n  static get defaultOptions() {\n    return mergeObject(super.defaultOptions, {\n      id: "pointbuy-calculator",\n      classes: ["pf1", "pointbuy-calculator"],\n      title: "Point Buy Calculator",\n      template: "systems/pf1/templates/apps/pointbuy-calculator.html",\n      width: 320,\n      height: "auto",\n      closeOnSubmit: false,\n      submitOnClose: false,\n    });\n  }\n\n  get actor() {\n    return this.object.actor;\n  }\n\n  getData() {\n    const points = this.getSpentPoints();\n\n    return {\n      abilities: this.abilities,\n      points: points,\n    };\n  }\n\n  getSpentPoints() {\n    let result = 0;\n\n    for (let a of this.abilities) {\n      result += CONFIG.PF1.abilityCost[a.value];\n    }\n    return result;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(".ability-control").click(this._onAbilityControl.bind(this));\n  }\n\n  _onAbilityControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n    const ablKey = a.closest(".item").dataset.ability;\n    const abl = this.abilities.find(o => o.key === ablKey);\n\n    if (a.classList.contains("add")) {\n      abl.value = Math.min(18, abl.value + 1);\n    }\n    else if (a.classList.contains("subtract")) {\n      abl.value = Math.max(7, abl.value - 1);\n    }\n    this.render();\n  }\n\n  _updateObject() {\n    const updateData = {};\n    for (let a of this.abilities) {\n      updateData[`data.abilities.${a.key}.value`] = a.value;\n    }\n    this.actor.update(updateData);\n\n    this.close();\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/apps/point-buy-calculator.js?')},"./module/apps/trait-selector.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActorTraitSelector", function() { return ActorTraitSelector; });\n/**\n * A specialized form used to select damage or condition types which apply to an Actor\n * @type {FormApplication}\n */\nclass ActorTraitSelector extends FormApplication {\n\tstatic get defaultOptions() {\n\t  const options = super.defaultOptions;\n\t  options.id = "trait-selector";\n\t  options.classes = ["pf1"];\n\t  options.title = "Actor Trait Selection";\n\t  options.template = "systems/pf1/templates/apps/trait-selector.html";\n\t  options.width = 320;\n\t  options.height = "auto";\n\t  return options;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return a reference to the target attribute\n   * @type {String}\n   */\n  get attribute() {\n\t  return this.options.name;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Provide data to the HTML template for rendering\n   * @type {Object}\n   */\n  getData() {\n\n    // Get current values\n    let attr = getProperty(this.object.data, this.attribute);\n\n\t  // Populate choices\n    const choices = duplicate(this.options.choices);\n    for ( let [k, v] of Object.entries(choices) ) {\n      choices[k] = {\n        label: v,\n        chosen: attr.value.includes(k)\n      }\n    }\n\n    // Return data\n\t  return {\n\t    choices: choices,\n      custom: attr.custom\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Update the Actor object with new trait data processed from the form\n   * @private\n   */\n  _updateObject(event, formData) {\n    const choices = [];\n    for ( let [k, v] of Object.entries(formData) ) {\n      if ( (k !== "custom") && v ) choices.push(k);\n    }\n    this.object.update({\n      [`${this.attribute}.value`]: choices,\n      [`${this.attribute}.custom`]: formData.custom\n    });\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/apps/trait-selector.js?')},"./module/canvas.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "measureDistances", function() { return measureDistances; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "measureDistance", function() { return measureDistance; });\n/**\n * Measure the distance between two pixel coordinates\n * See BaseGrid.measureDistance for more details\n */\nconst measureDistances = function(segments, options={}) {\n  if ( !options.gridSpaces ) return BaseGrid.prototype.measureDistances.call(this, segments, options);\n\n  // Track the total number of diagonals\n  let nDiagonal = 0;\n  const rule = this.parent.diagonalRule;\n  const d = canvas.dimensions;\n\n  // Iterate over measured segments\n  return segments.map(s => {\n    let r = s.ray;\n\n    // Determine the total distance traveled\n    let nx = Math.abs(Math.ceil(r.dx / d.size));\n    let ny = Math.abs(Math.ceil(r.dy / d.size));\n\n    // Determine the number of straight and diagonal moves\n    let nd = Math.min(nx, ny);\n    let ns = Math.abs(ny - nx);\n    nDiagonal += nd;\n\n    // Alternative DMG Movement\n    if (rule === "5105") {\n      let nd10 = Math.floor(nDiagonal / 2) - Math.floor((nDiagonal - nd) / 2);\n      let spaces = (nd10 * 2) + (nd - nd10) + ns;\n      return spaces * canvas.dimensions.distance;\n    }\n\n    // Standard PHB Movement\n    else return (ns + nd) * canvas.scene.data.gridDistance;\n  });\n};\n\nconst measureDistance = function(p0, p1, {gridSpaces=true}={}) {\n  if ( !gridSpaces ) return BaseGrid.prototype.measureDistance.bind(this)(p0, p1, {gridSpaces});\n  let gs = canvas.dimensions.size,\n      ray = new Ray(p0, p1),\n      nx = Math.abs(Math.ceil(ray.dx / gs)),\n      ny = Math.abs(Math.ceil(ray.dy / gs));\n\n  // Get the number of straight and diagonal moves\n  let nDiagonal = Math.min(nx, ny),\n      nStraight = Math.abs(ny - nx);\n\n  // Alternative DMG Movement\n  if ( this.parent.diagonalRule === "5105" ) {\n    let nd10 = Math.floor(nDiagonal / 2);\n    let spaces = (nd10 * 2) + (nDiagonal - nd10) + nStraight;\n    return spaces * canvas.dimensions.distance;\n  }\n\n  // Standard PHB Movement\n  else return (nStraight + nDiagonal) * canvas.scene.data.gridDistance;\n};\n\n/* -------------------------------------------- */\n\n/**\n * Hijack Token health bar rendering to include temporary and temp-max health in the bar display\n * TODO: This should probably be replaced with a formal Token class extension\n */\nconst _TokenGetBarAttribute = Token.prototype.getBarAttribute;\nToken.prototype.getBarAttribute = function(barName, {alternative=null}={}) {\n  let data;\n  try {\n    data = _TokenGetBarAttribute.call(this, barName, {alternative: alternative});\n  } catch (e) {\n    data = null;\n  }\n  if (data != null && data.attribute === "attributes.hp") {\n    data.value += parseInt(data[\'temp\'] || 0);\n  }\n  return data;\n};\n\nTokenHUD.prototype._onAttributeUpdate = function(event) {\n  // Filter keydown events for Enter\n  if ( event.type === "keydown" ) {\n    if (event.keyCode === KEYS.ENTER) this.clear();\n    return;\n  }\n  event.preventDefault();\n\n  // Determine new bar value\n  let input = event.currentTarget,\n      strVal = input.value.trim(),\n      isDelta = strVal.startsWith("+") || strVal.startsWith("-"),\n      value = Number(strVal);\n  if ( !Number.isFinite(value) ) return;\n\n  // For attribute bar values, update the associated Actor\n  let bar = input.dataset.bar;\n  if ( bar ) {\n    const actor = this.object.actor;\n    const data = this.object.getBarAttribute(bar);\n    const current = getProperty(actor.data.data, data.attribute);\n    const updateData = {};\n    let dt = value;\n    if (data.attribute === "attributes.hp" && actor.data.data.attributes.hp.temp > 0 && isDelta && value < 0) {\n      dt = Math.min(0, actor.data.data.attributes.hp.temp + value);\n      updateData["data.attributes.hp.temp"] = Math.max(0, actor.data.data.attributes.hp.temp + value);\n      value = Math.min(0, value - dt);\n    }\n    if ( isDelta ) value = Math.clamped(current.min || 0, current.value + dt, current.max);\n    updateData[`data.${data.attribute}.value`] = value;\n    actor.update(updateData);\n  }\n\n  // Otherwise update the Token\n  else this.object.update({[input.name]: value});\n};\n\n\n//# sourceURL=webpack://pf1/./module/canvas.js?')},"./module/chat.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCustomChatMessage", function() { return createCustomChatMessage; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hideRollInfo", function() { return hideRollInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hideGMSensitiveInfo", function() { return hideGMSensitiveInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addChatCardTitleGradient", function() { return addChatCardTitleGradient; });\n/* harmony import */ var _item_entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item/entity.js */ "./module/item/entity.js");\n/* harmony import */ var _sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sidebar/chat-message.js */ "./module/sidebar/chat-message.js");\n\n\nconst Color = __webpack_require__(/*! color */ "./node_modules/color/index.js");\n\n/* -------------------------------------------- */\n\nconst createCustomChatMessage = async function(chatTemplate, chatTemplateData={}, chatData={}, {rolls=[]}={}) {\n  let rollMode = game.settings.get("core", "rollMode");\n  chatData = mergeObject({\n    rollMode: rollMode,\n    user: game.user._id,\n    type: CONST.CHAT_MESSAGE_TYPES.CHAT,\n  }, chatData);\n  chatData.content = await renderTemplate(chatTemplate, chatTemplateData);\n  // Handle different roll modes\n  switch (chatData.rollMode) {\n    case "gmroll":\n      chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n      break;\n    case "selfroll":\n      chatData["whisper"] = [game.user._id];\n      break;\n    case "blindroll":\n      chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n      chatData["blind"] = true;\n      break;\n  }\n\n  // Dice So Nice integration\n  if (chatData.roll != null && rolls.length === 0) rolls = [chatData.roll];\n  if (game.dice3d != null && game.dice3d.isEnabled()) {\n    for (let roll of rolls) {\n      await game.dice3d.showForRoll(roll, game.user, false, chatData.whisper, chatData.blind);\n      chatData.sound = null;\n    }\n  }\n\n  _sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_1__["ChatMessagePF"].create(chatData);\n};\n\nconst hideRollInfo = function(app, html, data) {\n  const whisper = app.data.whisper || [];\n  const isBlind = whisper.length && app.data.blind;\n  const isVisible = whisper.length ? (whisper.includes(game.user._id) || (app.isAuthor && !isBlind)) : true;\n  if (!isVisible) {\n    html.find(".dice-formula").text("???");\n    html.find(".dice-total").text("?");\n    html.find(".dice").text("");\n    html.find(".success").removeClass("success");\n    html.find(".failure").removeClass("failure");\n  }\n};\n\nconst hideGMSensitiveInfo = function(app, html, data) {\n  if (game.user.isGM) return;\n\n  let speaker = app.data.speaker,\n    actor = speaker != null ? (speaker.token ? game.actors.tokens[speaker.token] : game.actors.get(speaker.actor)) : null;\n  if (!actor || (actor && actor.hasPerm(game.user, "LIMITED"))) return;\n\n  // Hide info\n  html.find(".gm-sensitive").remove();\n};\n\nconst addChatCardTitleGradient = function(app, html, data) {\n  const card = html.find(".chat-card")[0];\n  if (!card) return;\n  const actor = _item_entity_js__WEBPACK_IMPORTED_MODULE_0__["ItemPF"]._getChatCardActor(card);\n  if (!actor) return;\n  const item = actor.getOwnedItem(card.dataset.itemId);\n  if (!item) return;\n  const title = $(card).find(".card-header");\n  if (!title.length) return;\n\n  title.css("background-image", `linear-gradient(to right, ${item.typeColor}, ${item.typeColor2})`);\n\n  const titleText = title.find("h2, h3");\n  if (Color(item.typeColor).isLight()) titleText.css("color", "black");\n  else titleText.css("color", "white");\n};\n\n\n//# sourceURL=webpack://pf1/./module/chat.js?')},"./module/combat.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_getInitiativeFormula", function() { return _getInitiativeFormula; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_rollInitiative", function() { return _rollInitiative; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addChatMessageContextOptions", function() { return addChatMessageContextOptions; });\n/* harmony import */ var _actor_entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actor/entity.js */ "./module/actor/entity.js");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib.js */ "./module/lib.js");\n\n\n\n/* -------------------------------------------- */\n\n/**\n * Override the default Initiative formula to customize special behaviors of the D&D5e system.\n * Apply advantage, proficiency, or bonuses where appropriate\n * Apply the dexterity score as a decimal tiebreaker if requested\n * See Combat._getInitiativeFormula for more detail.\n */\nconst _getInitiativeFormula = function(actor) {\n  if (!actor) return "1d20";\n  const parts = ["1d20", "@attributes.init.total", "@attributes.init.total / 100"];\n  return parts.filter(p => p !== null).join(" + ");\n};\n\nCombat.showInitiativeDialog = function(formula=null) {\n  return new Promise(resolve => {\n    let template = "systems/pf1/templates/chat/roll-dialog.html";\n    let rollMode = game.settings.get("core", "rollMode");\n    let dialogData = {\n      formula: formula ? formula : "",\n      rollMode: rollMode,\n      rollModes: CONFIG.Dice.rollModes\n    };\n    // Create buttons object\n    let buttons = {\n      normal: {\n        label: "Roll",\n        callback: html => {\n          rollMode = html.find(\'[name="rollMode"]\').val();\n          const bonus = html.find(\'[name="bonus"]\').val();\n          resolve({ rollMode: rollMode, bonus: bonus });\n        },\n      }\n    };\n    // Show dialog\n    renderTemplate(template, dialogData).then(dlg => {\n      new Dialog({\n        title: game.i18n.localize("PF1.InitiativeBonus"),\n        content: dlg,\n        buttons: buttons,\n        default: "normal",\n        close: html => {\n          resolve({ stop: true });\n        }\n      }, {}).render(true);\n    });\n  });\n};\n\nconst _rollInitiative = async function(ids, formula=null, messageOptions={}) {\n\n  // Structure input data\n  ids = typeof ids === "string" ? [ids] : ids;\n  const currentId = this.combatant._id;\n  if (!formula) formula = _getInitiativeFormula(this.combatant.actor);\n\n  let overrideRollMode = null,\n    bonus = "",\n    stop = false;\n  if (keyboard.isDown("Shift")) {\n    const dialogData = await Combat.showInitiativeDialog(formula);\n    overrideRollMode = dialogData.rollMode;\n    bonus = dialogData.bonus || "";\n    stop = dialogData.stop || false;\n  }\n\n  if (stop) return this;\n\n  // Iterate over Combatants, performing an initiative roll for each\n  const [updates, messages] = ids.reduce((results, id, i) => {\n    let [updates, messages] = results;\n\n    // Get Combatant data\n    const c = this.getCombatant(id);\n    if ( !c ) return results;\n    const actorData = c.actor ? c.actor.data.data : {};\n    formula = formula || this._getInitiativeFormula(c.actor ? c.actor : null);\n\n    actorData.bonus = bonus;\n    // Add bonus\n    if (bonus.length > 0 && i === 0) {\n      formula += " + @bonus";\n    }\n\n    // Roll initiative\n    const rollMode = overrideRollMode != null ? overrideRollMode : messageOptions.rollMode || (c.token.hidden || c.hidden) ? "gmroll" : "roll";\n    const roll = new Roll(formula, actorData).roll();\n    updates.push({_id: id, initiative: roll.total});\n\n    // Construct chat message data\n    let messageData = mergeObject({\n      speaker: {\n        scene: canvas.scene._id,\n        actor: c.actor ? c.actor._id : null,\n        token: c.token._id,\n        alias: c.token.name\n      },\n      flavor: game.i18n.localize("PF1.RollsForInitiative").format(c.token.name)\n    }, messageOptions);\n    const chatData = roll.toMessage(messageData, {rollMode, create:false});\n    if ( i > 0 ) chatData.sound = null;   // Only play 1 sound for the whole set\n    messages.push(chatData);\n\n    // Return the Roll and the chat data\n    return results;\n  }, [[], []]);\n  if ( !updates.length ) return this;\n\n  // Update multiple combatants\n  await this.updateEmbeddedEntity("Combatant", updates);\n\n  // Ensure the turn order remains with the same combatant\n  await this.update({turn: this.turns.findIndex(t => t._id === currentId)});\n\n  // Create multiple chat messages\n  await ChatMessage.create(messages);\n\n  // Return the updated Combat\n  return this;\n};\n\n/* -------------------------------------------- */\n\n/**\n * This function is used to hook into the Chat Log context menu to add additional options to each message\n * These options make it easy to conveniently apply damage to controlled tokens based on the value of a Roll\n *\n * @param {HTMLElement} html    The Chat Message being rendered\n * @param {Array} options       The Array of Context Menu options\n *\n * @return {Array}              The extended options Array including new context choices\n */\nconst addChatMessageContextOptions = function(html, options) {\n  let canApply = li => canvas.tokens.controlled.length && li.find(".damage-roll .dice-total").length;\n  let canApplyCritical = li => canvas.tokens.controlled.length && li.find(".crit-damage-roll .dice-total").length;\n  options.push(\n    {\n      name: game.i18n.localize("PF1.ApplyDamage"),\n      icon: \'<i class="fas fa-user-minus"></i>\',\n      condition: canApply,\n      callback: li => _actor_entity_js__WEBPACK_IMPORTED_MODULE_0__["ActorPF"].applyDamage(li, 1)\n    },\n    {\n      name: game.i18n.localize("PF1.ApplyHealing"),\n      icon: \'<i class="fas fa-user-plus"></i>\',\n      condition: canApply,\n      callback: li => _actor_entity_js__WEBPACK_IMPORTED_MODULE_0__["ActorPF"].applyDamage(li, -1)\n    },\n    {\n      name: game.i18n.localize("PF1.ApplyCriticalDamage"),\n      icon: \'<i class="fas fa-user-minus"></i>\',\n      condition: canApplyCritical,\n      callback: li => _actor_entity_js__WEBPACK_IMPORTED_MODULE_0__["ActorPF"].applyDamage(li, 1, true)\n    },\n    {\n      name: game.i18n.localize("PF1.ApplyCriticalHealing"),\n      icon: \'<i class="fas fa-user-minus"></i>\',\n      condition: canApplyCritical,\n      callback: li => _actor_entity_js__WEBPACK_IMPORTED_MODULE_0__["ActorPF"].applyDamage(li, -1, true)\n    },\n  );\n  return options;\n};\n\n\n//# sourceURL=webpack://pf1/./module/combat.js?')},"./module/config.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PF1", function() { return PF1; });\n// Namespace D&D5e Configuration Values\nconst PF1 = {};\n\nPF1.re = {\n  "traitSeparator": /\\s*[,;]\\s*/g,\n};\n\n\n/**\n * The set of Ability Scores used within the system\n * @type {Object}\n */\nPF1.abilities = {\n  "str": "PF1.AbilityStr",\n  "dex": "PF1.AbilityDex",\n  "con": "PF1.AbilityCon",\n  "int": "PF1.AbilityInt",\n  "wis": "PF1.AbilityWis",\n  "cha": "PF1.AbilityCha"\n};\n\nPF1.abilitiesShort = {\n  "str": "PF1.AbilityShortStr",\n  "dex": "PF1.AbilityShortDex",\n  "con": "PF1.AbilityShortCon",\n  "int": "PF1.AbilityShortInt",\n  "wis": "PF1.AbilityShortWis",\n  "cha": "PF1.AbilityShortCha"\n};\n\nPF1.abilityCost = {\n  "7": -4,\n  "8": -2,\n  "9": -1,\n  "10": 0,\n  "11": 1,\n  "12": 2,\n  "13": 3,\n  "14": 5,\n  "15": 7,\n  "16": 10,\n  "17": 13,\n  "18": 17,\n};\n\n/**\n * The set of Saving Throws\n * @type {Object}\n */\nPF1.savingThrows = {\n  "fort": "PF1.SavingThrowFort",\n  "ref": "PF1.SavingThrowRef",\n  "will": "PF1.SavingThrowWill"\n};\n\nPF1.classTypes = {\n  "base": "PF1.ClassTypeBase",\n  "prestige": "PF1.ClassTypePrestige",\n  "racial": "PF1.ClassTypeRacial",\n  "mythic": "PF1.ClassTypeMythic",\n};\n\nPF1.classBAB = {\n  "low": "PF1.Low",\n  "med": "PF1.Medium",\n  "high": "PF1.High",\n};\n\nPF1.classSavingThrows = {\n  "low": "PF1.Poor",\n  "high": "PF1.Good",\n};\n\nPF1.classBABFormulas = {\n  "low": "floor(@level * 0.5)",\n  "med": "floor(@level * 0.75)",\n  "high": "@level",\n};\n\nPF1.classSavingThrowFormulas = {\n  "base": {\n    "low": "floor(@level / 3)",\n    "high": "2 + floor(@level / 2)",\n  },\n  "prestige": {\n    "low": "floor((1 + @level) / 3)",\n    "high": "floor((1 + @level) / 2)",\n  },\n  "racial": {\n    "low": "floor(@level / 3)",\n    "high": "2 + floor(@level / 2)",\n  },\n  "mythic": {\n    "low": "0",\n    "high": "0",\n  },\n};\n\nPF1.favouredClassBonuses = {\n  "hp": "PF1.FavouredClassHP",\n  "skill": "PF1.FavouredClassSkill",\n  "alt": "PF1.FavouredClassAlt",\n};\n\n/**\n * The set of Armor Classes\n * @type {Object}\n */\nPF1.ac = {\n  "normal": "PF1.ACNormal",\n  "touch": "PF1.ACTouch",\n  "flatFooted": "PF1.ACFlatFooted"\n};\n\n/**\n * The set of Armor Class modifier types\n * @type {Object}\n */\nPF1.acValueLabels = {\n  "normal": "PF1.ACTypeNormal",\n  "touch": "PF1.ACTypeTouch",\n  "flatFooted": "PF1.ACTypeFlatFooted"\n};\n\n/* -------------------------------------------- */\n\n/**\n * Character alignment options\n * @type {Object}\n */\nPF1.alignments = {\n  \'lg\': "PF1.AlignmentLG",\n  \'ng\': "PF1.AlignmentNG",\n  \'cg\': "PF1.AlignmentCG",\n  \'ln\': "PF1.AlignmentLN",\n  \'tn\': "PF1.AlignmentTN",\n  \'cn\': "PF1.AlignmentCN",\n  \'le\': "PF1.AlignmentLE",\n  \'ne\': "PF1.AlignmentNE",\n  \'ce\': "PF1.AlignmentCE"\n};\n\nPF1.alignmentsShort = {\n  \'lg\': "LG",\n  \'ng\': "NG",\n  \'cg\': "CG",\n  \'ln\': "LN",\n  \'tn\': "N",\n  \'cn\': "CN",\n  \'le\': "LE",\n  \'ne\': "NE",\n  \'ce\': "CE"\n};\n\n/* -------------------------------------------- */\n\n/**\n * The set of Armor Proficiencies which a character may have\n * @type {Object}\n */\nPF1.armorProficiencies = {\n  "lgt": "PF1.ArmorProfLight",\n  "med": "PF1.ArmorProfMedium",\n  "hvy": "PF1.ArmorProfHeavy",\n  "shl": "PF1.ArmorProfShield",\n  "twr": "PF1.ArmorProfTowerShield",\n};\n\nPF1.weaponProficiencies = {\n  "sim": "PF1.WeaponProfSimple",\n  "mar": "PF1.WeaponProfMartial",\n};\n\n/* -------------------------------------------- */\n\n/**\n * This describes the ways that an ability can be activated\n * @type {Object}\n */\nPF1.abilityActivationTypes = {\n  "passive": "PF1.ActivationTypePassive",\n  "free": "PF1.ActivationTypeFree",\n  "swift": "PF1.ActivationTypeSwift",\n  "immediate": "PF1.ActivationTypeImmediate",\n  "move": "PF1.ActivationTypeMove",\n  "standard": "PF1.ActivationTypeStandard",\n  "full": "PF1.ActivationTypeFullround",\n  "attack": "PF1.ActivationTypeAttack",\n  "round": "PF1.ActivationTypeRound",\n  "minute": "PF1.ActivationTypeMinute",\n  "hour": "PF1.ActivationTypeHour",\n  "special": "PF1.ActivationTypeSpecial",\n};\n\n/**\n * This describes plurals for activation types.\n */\nPF1.abilityActivationTypesPlurals = {\n  "free": "PF1.ActivationTypeFreePlural",\n  "swift": "PF1.ActivationTypeSwiftPlural",\n  "immediate": "PF1.ActivationTypeImmediatePlural",\n  "move": "PF1.ActivationTypeMovePlural",\n  "standard": "PF1.ActivationTypeStandardPlural",\n  "full": "PF1.ActivationTypeFullroundPlural",\n  "attack": "PF1.ActivationTypeAttackPlural",\n  "round": "PF1.ActivationTypeRoundPlural",\n  "minute": "PF1.ActivationTypeMinutePlural",\n  "hour": "PF1.ActivationTypeHourPlural",\n};\n\nPF1.divineFocus = {\n  "0": "",\n  "1": "PF1.SpellComponentDivineFocusAlone",\n  "2": "PF1.SpellComponentDivineFocusMaterial",\n  "3": "PF1.SpellComponentDivineFocusFocus",\n};\n\nPF1.measureTemplateTypes = {\n  "cone": "PF1.MeasureTemplateCone",\n  "circle": "PF1.MeasureTemplateCircle",\n  "ray": "PF1.MeasureTemplateRay",\n  // "rect": "PF1.MeasureTemplateRectangle",\n};\n\n/* -------------------------------------------- */\n\n// Creature Sizes\nPF1.actorSizes = {\n  "fine": "PF1.ActorSizeFine",\n  "dim": "PF1.ActorSizeDiminutive",\n  "tiny": "PF1.ActorSizeTiny",\n  "sm": "PF1.ActorSizeSmall",\n  "med": "PF1.ActorSizeMedium",\n  "lg": "PF1.ActorSizeLarge",\n  "huge": "PF1.ActorSizeHuge",\n  "grg": "PF1.ActorSizeGargantuan",\n  "col": "PF1.ActorSizeColossal",\n};\n\nPF1.sizeChart = {\n  "fine": "F",\n  "dim":  "D",\n  "tiny": "T",\n  "sm":   "S",\n  "med":  "M",\n  "lg":   "L",\n  "huge": "H",\n  "grg":  "G",\n  "col":  "C",\n};\n\nPF1.tokenSizes = {\n  "fine": { w: 1, h: 1, scale: 0.2 },\n  "dim": { w: 1, h: 1, scale: 0.4 },\n  "tiny": { w: 1, h: 1, scale: 0.6 },\n  "sm": { w: 1, h: 1, scale: 0.8 },\n  "med": { w: 1, h: 1, scale: 1 },\n  "lg": { w: 2, h: 2, scale: 1 },\n  "huge": { w: 3, h: 3, scale: 1 },\n  "grg": { w: 4, h: 4, scale: 1 },\n  "col": { w: 6, h: 6, scale: 1 },\n};\n\nPF1.sizeMods = {\n  "fine": 8,\n  "dim": 4,\n  "tiny": 2,\n  "sm": 1,\n  "med": 0,\n  "lg": -1,\n  "huge": -2,\n  "grg": -4,\n  "col": -8\n};\n\nPF1.sizeSpecialMods = {\n  "fine": -8,\n  "dim": -4,\n  "tiny": -2,\n  "sm": -1,\n  "med": 0,\n  "lg": 1,\n  "huge": 2,\n  "grg": 4,\n  "col": 8\n};\n\nPF1.sizeFlyMods = {\n  "fine": 8,\n  "dim": 6,\n  "tiny": 4,\n  "sm": 2,\n  "med": 0,\n  "lg": -2,\n  "huge": -4,\n  "grg": -6,\n  "col": -8\n};\n\nPF1.sizeStealthMods = {\n  "fine": 16,\n  "dim": 12,\n  "tiny": 8,\n  "sm": 4,\n  "med": 0,\n  "lg": -4,\n  "huge": -8,\n  "grg": -12,\n  "col": -16\n};\n\nPF1.flyManeuverabilities = {\n  "clumsy": "PF1.FlyManeuverabilityClumsy",\n  "poor": "PF1.FlyManeuverabilityPoor",\n  "average": "PF1.FlyManeuverabilityAverage",\n  "good": "PF1.FlyManeuverabilityGood",\n  "perfect": "PF1.FlyManeuverabilityPerfect",\n};\n\nPF1.flyManeuverabilityValues = {\n  "clumsy": -8,\n  "poor": -4,\n  "average": 0,\n  "good": 4,\n  "perfect": 8,\n};\n\nPF1.speedReduction = {\n  "5": 5,\n  "15": 10,\n  "20": 15,\n  "30": 20,\n  "35": 25,\n  "45": 30,\n  "50": 35,\n  "60": 40,\n  "65": 45,\n  "75": 50,\n  "80": 55,\n  "90": 60,\n  "95": 65,\n  "105": 70,\n  "110": 75,\n  "120": 80,\n};\n\n/* -------------------------------------------- */\n\nPF1.encumbranceLoads = [\n  0,\n  10, 20, 30, 40, 50, 60, 70, 80, 90, 100,\n  115, 130, 150, 175, 200, 230, 260, 300, 350,\n  400, 460, 520, 600, 700, 800, 920, 1040, 1200, 1400, 1600\n];\n\nPF1.encumbranceMultipliers = {\n  normal: {\n    fine: 0.125,\n    dim: 0.25,\n    tiny: 0.5,\n    sm: 0.75,\n    med: 1,\n    lg: 2,\n    huge: 4,\n    grg: 8,\n    col: 16,\n  },\n  quadruped: {\n    fine: 0.25,\n    dim: 0.5,\n    tiny: 0.75,\n    sm: 1,\n    med: 1.5,\n    lg: 3,\n    huge: 6,\n    grg: 12,\n    col: 24,\n  },\n};\n\n/* -------------------------------------------- */\n\n/**\n * Classification types for item action types\n * @type {Object}\n */\nPF1.itemActionTypes = {\n  "mwak": "PF1.ActionMWAK",\n  "rwak": "PF1.ActionRWAK",\n  "msak": "PF1.ActionMSAK",\n  "rsak": "PF1.ActionRSAK",\n  "spellsave": "PF1.ActionSpellSave",\n  "save": "PF1.ActionSave",\n  "heal": "PF1.ActionHeal",\n  "other": "PF1.ActionOther"\n};\n\n/* -------------------------------------------- */\n\nPF1.itemCapacityTypes = {\n  "items": "PF1.ItemContainerCapacityItems",\n  "weight": "PF1.ItemContainerCapacityWeight"\n};\n\n/* -------------------------------------------- */\n\n/**\n * Enumerate the lengths of time over which an item can have limited use ability\n * @type {Object}\n */\nPF1.limitedUsePeriods = {\n  "single": "PF1.LimitedUseSingle",\n  "unlimited": "PF1.Unlimited",\n  "day": "PF1.LimitedUseDay",\n  "week": "PF1.LimitedUseWeek",\n  "charges": "PF1.LimitedUseCharges",\n};\n\n\n/* -------------------------------------------- */\n\n// Equipment Types\nPF1.equipmentTypes = {\n  "armor": {\n    "_label": "PF1.EquipTypeArmor",\n    "lightArmor": "PF1.EquipTypeLight",\n    "mediumArmor": "PF1.EquipTypeMedium",\n    "heavyArmor": "PF1.EquipTypeHeavy",\n  },\n  "shield": {\n    "_label": "PF1.EquipTypeShield",\n    "lightShield": "PF1.EquipTypeLightShield",\n    "heavyShield": "PF1.EquipTypeHeavyShield",\n    "towerShield": "PF1.EquipTypeTowerShield",\n    "other": "PF1.EquipTypeOtherShield",\n  },\n  "misc": {\n    "_label": "PF1.Misc",\n    "wondrous": "PF1.EquipTypeWondrousItem",\n    "clothing": "PF1.EquipTypeClothing",\n    "other": "PF1.Other",\n  },\n};\n\nPF1.equipmentSlots = {\n  "armor": {\n    "armor": "PF1.EquipSlotArmor",\n  },\n  "shield": {\n    "shield": "PF1.EquipSlotShield",\n  },\n  "misc": {\n    "slotless": "PF1.EquipSlotSlotless",\n    "head": "PF1.EquipSlotHead",\n    "headband": "PF1.EquipSlotHeadband",\n    "eyes": "PF1.EquipSlotEyes",\n    "shoulders": "PF1.EquipSlotShoulders",\n    "neck": "PF1.EquipSlotNeck",\n    "chest": "PF1.EquipSlotChest",\n    "body": "PF1.EquipSlotBody",\n    "belt": "PF1.EquipSlotBelt",\n    "wrists": "PF1.EquipSlotWrists",\n    "hands": "PF1.EquipSlotHands",\n    "ring": "PF1.EquipSlotRing",\n    "feet": "PF1.EquipSlotFeet",\n  },\n};\n\nPF1.lootTypes = {\n  "gear": "PF1.LootTypeGear",\n  "ammo": "PF1.LootTypeAmmo",\n  "tradeGoods": "PF1.LootTypeTradeGoods",\n  "misc": "PF1.Misc",\n};\n\n\n/* -------------------------------------------- */\n\n/**\n * Enumerate the valid consumable types which are recognized by the system\n * @type {Object}\n */\nPF1.consumableTypes = {\n  "potion": "PF1.ConsumableTypePotion",\n  "poison": "PF1.ConsumableTypePoison",\n  "drug": "PF1.ConsumableTypeDrug",\n  "scroll": "PF1.ConsumableTypeScroll",\n  "wand": "PF1.ConsumableTypeWand",\n  "staff": "PF1.ConsumableTypeStaff",\n  "misc": "PF1.Misc",\n};\n\nPF1.attackTypes = {\n  "weapon": "PF1.AttackTypeWeapon",\n  "natural": "PF1.AttackTypeNatural",\n  "ability": "PF1.AttackTypeAbility",\n  "racialAbility": "PF1.AttackTypeRacial",\n  "item": "PF1.Item",\n  "misc": "PF1.Misc",\n};\n\nPF1.featTypes = {\n  "feat": "PF1.FeatTypeFeat",\n  "classFeat": "PF1.FeatTypeClassFeat",\n  "trait": "PF1.FeatTypeTraits",\n  "racial": "PF1.FeatTypeRacial",\n  "misc": "PF1.Misc",\n  "template": "PF1.FeatTypeTemplate",\n};\n\nPF1.abilityTypes = {\n  "ex": {\n    "short": "Ex",\n    "long": "Extraordinary",\n  },\n  "su": {\n    "short": "Su",\n    "long": "Supernatural",\n  },\n  "sp": {\n    "short": "Sp",\n    "long": "Spell-Like",\n  },\n};\n\n/* -------------------------------------------- */\n\n/**\n * The valid currency denominations supported by the 5e system\n * @type {Object}\n */\nPF1.currencies = {\n  "pp": "PF1.CurrencyPP",\n  "gp": "PF1.CurrencyGP",\n  "sp": "PF1.CurrencySP",\n  "cp": "PF1.CurrencyCP",\n};\n\nPF1.acTypes = {\n  "armor": "Armor",\n  "shield": "Shield",\n  "natural": "Natural Armor",\n};\n\nPF1.bonusModifiers = {\n  "untyped": "Untyped",\n  "base": "Base",\n  "enh": "Enhancement",\n  "dodge": "Dodge",\n  "inherent": "Inherent",\n  "deflection": "Deflection",\n  "morale": "Morale",\n  "luck": "Luck",\n  "sacred": "Sacred",\n  "insight": "Insight",\n  "resist": "Resistance",\n  "profane": "Profane",\n  "trait": "Trait",\n  "racial": "Racial",\n  "size": "Size",\n  "competence": "Competence",\n  "circumstance": "Circumstance",\n  "alchemical": "Alchemical",\n  "penalty": "Penalty",\n};\n\n/* -------------------------------------------- */\n\n\n// Damage Types\nPF1.damageTypes = {\n  "bludgeoning": "Bludgeoning",\n  "piercing": "Piercing",\n  "slashing": "Slashing",\n  "cold": "Cold",\n  "fire": "Fire",\n  "electric": "Electricity",\n  "sonic": "Sonic",\n  "acid": "Acid",\n  "force": "Force",\n  "negative": "Negative",\n  "positive": "Positive",\n};\n\n/* -------------------------------------------- */\n\nPF1.distanceUnits = {\n  "none": "PF1.None",\n  "personal": "PF1.DistPersonal",\n  "touch": "PF1.DistTouch",\n  "close": "PF1.DistClose",\n  "medium": "PF1.DistMedium",\n  "long": "PF1.DistLong",\n  "ft": "PF1.DistFt",\n  "mi": "PF1.DistMi",\n  "spec": "PF1.Special",\n  "seeText": "PF1.SeeText",\n  "unlimited": "PF1.Unlimited",\n};\n\n/* -------------------------------------------- */\n\n/**\n * This Object defines the types of single or area targets which can be applied in D&D5e\n * @type {Object}\n */\nPF1.targetTypes = {\n  "none": "PF1.None",\n  "self": "PF1.TargetSelf",\n  "creature": "PF1.TargetCreature",\n  "ally": "PF1.TargetAlly",\n  "enemy": "PF1.TargetEnemy",\n  "object": "PF1.TargetObject",\n  "space": "PF1.TargetSpace",\n  "radius": "PF1.TargetRadius",\n  "sphere": "PF1.TargetSphere",\n  "cylinder": "PF1.TargetCylinder",\n  "cone": "PF1.TargetCone",\n  "square": "PF1.TargetSquare",\n  "cube": "PF1.TargetCube",\n  "line": "PF1.TargetLine",\n  "wall": "PF1.TargetWall"\n};\n\n/* -------------------------------------------- */\n\n/**\n * This Object defines the various lengths of time which can occur in PF1\n * @type {Object}\n */\nPF1.timePeriods = {\n  "inst": "PF1.TimeInst",\n  "turn": "PF1.TimeTurn",\n  "round": "PF1.TimeRound",\n  "minute": "PF1.TimeMinute",\n  "hour": "PF1.TimeHour",\n  "day": "PF1.TimeDay",\n  "month": "PF1.TimeMonth",\n  "year": "PF1.TimeYear",\n  "perm": "PF1.TimePerm",\n  "seeText": "PF1.SeeText",\n  "spec": "PF1.Special",\n};\n\n/* -------------------------------------------- */\n\n// Healing Types\nPF1.healingTypes = {\n  "healing": "PF1.Healing",\n  "temphp": "PF1.HealingTemp"\n};\n\n/* -------------------------------------------- */\n\n/**\n * Character senses options\n * @type {Object}\n */\nPF1.senses = {\n  "bs": "PF1.SenseBS",\n  "dv": "PF1.SenseDV",\n  "ts": "PF1.SenseTS",\n  "tr": "PF1.SenseTR",\n  "ll": "PF1.SenseLL"\n};\n\n\n/* -------------------------------------------- */\n\n/**\n * The set of skill which can be trained in PF1\n * @type {Object}\n */\nPF1.skills = {\n  "acr": "PF1.SkillAcr",\n  "apr": "PF1.SkillApr",\n  "art": "PF1.SkillArt",\n  "blf": "PF1.SkillBlf",\n  "clm": "PF1.SkillClm",\n  "crf": "PF1.SkillCrf",\n  "dip": "PF1.SkillDip",\n  "dev": "PF1.SkillDev",\n  "dis": "PF1.SkillDis",\n  "esc": "PF1.SkillEsc",\n  "fly": "PF1.SkillFly",\n  "han": "PF1.SkillHan",\n  "hea": "PF1.SkillHea",\n  "int": "PF1.SkillInt",\n  "kar": "PF1.SkillKAr",\n  "kdu": "PF1.SkillKDu",\n  "ken": "PF1.SkillKEn",\n  "kge": "PF1.SkillKGe",\n  "khi": "PF1.SkillKHi",\n  "klo": "PF1.SkillKLo",\n  "kna": "PF1.SkillKNa",\n  "kno": "PF1.SkillKNo",\n  "kpl": "PF1.SkillKPl",\n  "kre": "PF1.SkillKRe",\n  "lin": "PF1.SkillLin",\n  "lor": "PF1.SkillLor",\n  "per": "PF1.SkillPer",\n  "prf": "PF1.SkillPrf",\n  "pro": "PF1.SkillPro",\n  "rid": "PF1.SkillRid",\n  "sen": "PF1.SkillSen",\n  "slt": "PF1.SkillSlt",\n  "spl": "PF1.SkillSpl",\n  "ste": "PF1.SkillSte",\n  "sur": "PF1.SkillSur",\n  "swm": "PF1.SkillSwm",\n  "umd": "PF1.SkillUMD"\n};\n\nPF1.arbitrarySkills = [\n  "art", "crf", "lor", "prf", "pro"\n];\n\n\n/* -------------------------------------------- */\n\nPF1.spellPreparationModes = {\n  "atwill": "PF1.SpellPrepAtWill",\n  "prepared": "PF1.SpellPrepPrepared",\n  "spontaneous": "PF1.SpellPrepSpontaneous",\n};\n\nPF1.classCasterType = {\n  "sorcerer": "high",\n  "wizard": "high",\n  "cleric": "high",\n  "oracle": "high",\n  "druid": "high",\n  "psychic": "high",\n  "shaman": "high",\n  "witch": "high",\n  "alchemist": "med",\n  "bard": "med",\n  "hunter": "med",\n  "inquisitor": "med",\n  "investigator": "med",\n  "magus": "med",\n  "mesmerist": "med",\n  "occultist": "med",\n  "skald": "med",\n  "spiritualist": "med",\n  "summoner": "med",\n  "unchained Summoner": "med",\n  "antipaladin": "low",\n  "bloodrager": "low",\n  "medium": "low",\n  "paladin": "low",\n  "ranger": "low",\n};\n\nPF1.magicAuraByLevel = {\n  "spell": [\n    { power: "faint", level: 1 },\n    { power: "moderate", level: 4 },\n    { power: "strong", level: 7 },\n    { power: "overwhelming", level: 10 },\n  ],\n  "item": [\n    { power: "faint", level: 1 },\n    { power: "moderate", level: 6 },\n    { power: "strong", level: 12 },\n    { power: "overwhelming", level: 21 },\n  ],\n};\n\n/* -------------------------------------------- */\n\n/* -------------------------------------------- */\n\n// Weapon Types\nPF1.weaponTypes = {\n  "simple": {\n    "_label": "PF1.WeaponTypeSimple",\n    "light": "PF1.WeaponPropLight",\n    "1h": "PF1.WeaponPropOneHanded",\n    "2h": "PF1.WeaponPropTwoHanded",\n    "ranged": "PF1.WeaponSubtypeRanged",\n  },\n  "martial": {\n    "_label": "PF1.WeaponTypeMartial",\n    "light": "PF1.WeaponPropLight",\n    "1h": "PF1.WeaponPropOneHanded",\n    "2h": "PF1.WeaponPropTwoHanded",\n    "ranged": "PF1.WeaponSubtypeRanged",\n  },\n  "exotic": {\n    "_label": "PF1.WeaponTypeExotic",\n    "light": "PF1.WeaponPropLight",\n    "1h": "PF1.WeaponPropOneHanded",\n    "2h": "PF1.WeaponPropTwoHanded",\n    "ranged": "PF1.WeaponSubtypeRanged",\n  },\n  "misc": {\n    "_label": "PF1.Misc",\n    "splash": "PF1.WeaponTypeSplash",\n    "other": "PF1.Other",\n  }\n};\n\n\n/* -------------------------------------------- */\n\n/**\n * Define the set of weapon property flags which can exist on a weapon\n * @type {Object}\n */\nPF1.weaponProperties = {\n  "blc": "PF1.WeaponPropBlocking",\n  "brc": "PF1.WeaponPropBrace",\n  "dbl": "PF1.WeaponPropDouble",\n  "dis": "PF1.WeaponPropDisarm",\n  "fin": "PF1.WeaponPropFinesse",\n  "frg": "PF1.WeaponPropFragile",\n  "grp": "PF1.WeaponPropGrapple",\n  "imp": "PF1.WeaponPropImprovised",\n  "mnk": "PF1.WeaponPropMonk",\n  "nnl": "PF1.WeaponPropNonLethal",\n  "prf": "PF1.WeaponPropPerformance",\n  "rch": "PF1.WeaponPropReach",\n  "snd": "PF1.WeaponPropSunder",\n  "thr": "PF1.WeaponPropThrown",\n  "trp": "PF1.WeaponPropTrip",\n};\n\n\n// Spell Components\nPF1.spellComponents = {\n  "V": "PF1.SpellComponentVerbal",\n  "S": "PF1.SpellComponentSomatic",\n  "M": "PF1.SpellComponentMaterial",\n  "F": "PF1.SpellComponentFocus",\n  "DF": "PF1.SpellComponentDivineFocus",\n};\n\n// Spell Schools\nPF1.spellSchools = {\n  "abj": "PF1.SpellSchoolAbjuration",\n  "con": "PF1.SpellSchoolConjuration",\n  "div": "PF1.SpellSchoolDivination",\n  "enc": "PF1.SpellSchoolEnchantment",\n  "evo": "PF1.SpellSchoolEvocation",\n  "ill": "PF1.SpellSchoolIllusion",\n  "nec": "PF1.SpellSchoolNecromancy",\n  "trs": "PF1.SpellSchoolTransmutation",\n  "uni": "PF1.SpellSchoolUniversal",\n  "misc": "PF1.Misc",\n};\n\n// Spell Levels\nPF1.spellLevels = {\n  0: "PF1.SpellLevel0",\n  1: "PF1.SpellLevel1",\n  2: "PF1.SpellLevel2",\n  3: "PF1.SpellLevel3",\n  4: "PF1.SpellLevel4",\n  5: "PF1.SpellLevel5",\n  6: "PF1.SpellLevel6",\n  7: "PF1.SpellLevel7",\n  8: "PF1.SpellLevel8",\n  9: "PF1.SpellLevel9",\n};\n\n/* -------------------------------------------- */\n\n/**\n * Weapon proficiency levels\n * Each level provides a proficiency multiplier\n * @type {Object}\n */\nPF1.proficiencyLevels = {\n  "-4": "Not Proficient",\n  0: "Proficient"\n};\n\n/* -------------------------------------------- */\n\nPF1.conditionTypes = {\n  "bleed": "PF1.CondTypeBleed",\n  "blind": "PF1.CondTypeBlind",\n  "confuse": "PF1.CondTypeConfuse",\n  "daze": "PF1.CondTypeDaze",\n  "dazzle": "PF1.CondTypeDazzle",\n  "deaf": "PF1.CondTypeDeaf",\n  "disease": "PF1.CondTypeDisease",\n  "energyDrain": "PF1.CondTypeEnergyDrain",\n  "fatigue": "PF1.CondTypeFatigue",\n  "fear": "PF1.CondTypeFear",\n  "mindAffecting": "PF1.CondTypeMindAffecting",\n  "poison": "PF1.CondTypePoison",\n  "sicken": "PF1.CondTypeSicken",\n  "paralyze": "PF1.CondTypeParalyze",\n  "petrify": "PF1.CondTypePetrify",\n  "stun": "PF1.CondTypeStun",\n  "sleep": "PF1.CondTypeSleep",\n};\n\nPF1.conditions = {\n  "blind": "PF1.CondBlind",\n  "dazzled": "PF1.CondDazzled",\n  "deaf": "PF1.CondDeaf",\n  "entangled": "PF1.CondEntangled",\n  "fatigued": "PF1.CondFatigued",\n  "exhausted": "PF1.CondExhausted",\n  "grappled": "PF1.CondGrappled",\n  "helpless": "PF1.CondHelpless",\n  "paralyzed": "PF1.CondParalyzed",\n  "pinned": "PF1.CondPinned",\n  "fear": "PF1.CondFear",\n  "sickened": "PF1.CondSickened",\n  "stunned": "PF1.CondStunned",\n};\n\nPF1.buffTypes = {\n  "temp": "PF1.Temporary",\n  "perm": "PF1.Permanent",\n  "item": "PF1.Item",\n  "misc": "PF1.Misc",\n};\n\nPF1.buffTargets = {\n  "ac": {\n    "_label": "PF1.BuffTarAC",\n    "ac": "PF1.BuffTarACGeneric",\n    "aac": "PF1.BuffTarACArmor",\n    "sac": "PF1.BuffTarACShield",\n    "nac": "PF1.BuffTarACNatural",\n  },\n  "attack": {\n    "_label": "PF1.AttackRollPlural",\n    "attack": "PF1.All",\n    "mattack": "PF1.Melee",\n    "rattack": "PF1.Ranged",\n  },\n  "damage": {\n    "_label": "PF1.Damage",\n    "damage": "PF1.All",\n    "wdamage": "PF1.WeaponDamage",\n    "sdamage": "PF1.SpellDamage",\n  },\n  "ability": {\n    "_label": "PF1.AbilityScore",\n    "str": "PF1.AbilityStr",\n    "dex": "PF1.AbilityDex",\n    "con": "PF1.AbilityCon",\n    "int": "PF1.AbilityInt",\n    "wis": "PF1.AbilityWis",\n    "cha": "PF1.AbilityCha",\n  },\n  "savingThrows": {\n    "_label": "PF1.SavingThrowPlural",\n    "allSavingThrows": "PF1.All",\n    "fort": "PF1.SavingThrowFort",\n    "ref": "PF1.SavingThrowRef",\n    "will": "PF1.SavingThrowWill",\n  },\n  "skills": {\n    "_label": "PF1.Skills",\n    "skills": "PF1.All",\n    "strSkills": "PF1.BuffTarStrSkills",\n    "dexSkills": "PF1.BuffTarDexSkills",\n    "conSkills": "PF1.BuffTarConSkills",\n    "intSkills": "PF1.BuffTarIntSkills",\n    "wisSkills": "PF1.BuffTarWisSkills",\n    "chaSkills": "PF1.BuffTarChaSkills",\n  },\n  "skill": {\n    "_label": "PF1.BuffTarSpecificSkill",\n  },\n  "abilityChecks": {\n    "_label": "PF1.BuffTarAbilityChecks",\n    "allChecks": "PF1.All",\n    "strChecks": "PF1.BuffTarStrChecks",\n    "dexChecks": "PF1.BuffTarDexChecks",\n    "conChecks": "PF1.BuffTarConChecks",\n    "intChecks": "PF1.BuffTarIntChecks",\n    "wisChecks": "PF1.BuffTarWisChecks",\n    "chaChecks": "PF1.BuffTarChaChecks",\n  },\n  "speed": {\n    "_label": "PF1.Speed",\n    "allSpeeds": "PF1.All",\n    "landSpeed": "PF1.SpeedLand",\n    "climbSpeed": "PF1.SpeedClimb",\n    "swimSpeed": "PF1.SpeedSwim",\n    "burrowSpeed": "PF1.SpeedBurrow",\n    "flySpeed": "PF1.SpeedFly",\n  },\n  "misc": {\n    "_label": "PF1.MiscShort",\n    "cmb": "CMB",\n    "cmd": "CMD",\n    "init": "PF1.Initiative",\n    "mhp": "Hit Points",\n    "wounds": "PF1.Wounds",\n    "vigor": "PF1.Vigor",\n  },\n};\n\nPF1.contextNoteTargets = {\n  "attacks": {\n    "_label": "PF1.Attacks",\n    "attack": "PF1.AttackRollPlural",\n    "effect": "PF1.DamageRollPlural",\n  },\n  "savingThrows": {\n    "_label": "PF1.SavingThrowPlural",\n    "allSavingThrows": "PF1.All",\n    "fort": "PF1.SavingThrowFort",\n    "ref": "PF1.SavingThrowRef",\n    "will": "PF1.SavingThrowWill",\n  },\n  "skills": {\n    "_label": "PF1.Skills",\n    "skills": "PF1.All",\n    "strSkills": "PF1.BuffTarStrSkills",\n    "dexSkills": "PF1.BuffTarDexSkills",\n    "conSkills": "PF1.BuffTarConSkills",\n    "intSkills": "PF1.BuffTarIntSkills",\n    "wisSkills": "PF1.BuffTarWisSkills",\n    "chaSkills": "PF1.BuffTarChaSkills",\n  },\n  "skill": {\n    "_label": "PF1.BuffTarSpecificSkill",\n  },\n  "abilityChecks": {\n    "_label": "PF1.BuffTarAbilityChecks",\n    "allChecks": "PF1.All",\n    "strChecks": "PF1.BuffTarStrChecks",\n    "dexChecks": "PF1.BuffTarDexChecks",\n    "conChecks": "PF1.BuffTarConChecks",\n    "intChecks": "PF1.BuffTarIntChecks",\n    "wisChecks": "PF1.BuffTarWisChecks",\n    "chaChecks": "PF1.BuffTarChaChecks",\n  },\n  "misc": {\n    "_label": "PF1.MiscShort",\n    "ac": "PF1.ACNormal",\n    "cmb": "CMB",\n    "cmd": "CMD",\n    "sr": "PF1.SpellResistance",\n  },\n};\n\n// Languages\nPF1.languages = {\n  "common": "Common",\n  "aboleth": "Aboleth",\n  "abyssal": "Abyssal",\n  "aklo": "Aklo",\n  "aquan": "Aquan",\n  "auran": "Auran",\n  "boggard": "Boggard",\n  "celestial": "Celestial",\n  "common": "Common",\n  "cyclops": "Cyclops",\n  "dark": "Dark Folk",\n  "draconic": "Draconic",\n  "drowsign": "Drow Sign Language",\n  "druidic": "Druidic",\n  "dwarven": "Dwarven",\n  "dziriak": "D\'ziriak",\n  "elven": "Elven",\n  "giant": "Giant",\n  "gnome": "Gnome",\n  "goblin": "Goblin",\n  "gnoll": "Gnoll",\n  "grippli": "Grippli",\n  "halfling": "Halfling",\n  "ignan": "Ignan",\n  "infernal": "Infernal",\n  "nercil": "Necril",\n  "orc": "Orc",\n  "protean": "Protean",\n  "sphinx": "Sphinx",\n  "sylvan": "Sylvan",\n  "tengu": "Tengu",\n  "terran": "Terran",\n  "treant": "Treant",\n  "undercommon": "Undercommon",\n  "vegepygmy": "Vegepygmy"\n};\n\nPF1.creatureTypes = {\n  "aberration": "PF1.CreatureTypeAberration",\n  "animal": "PF1.CreatureTypeAnimal",\n  "construct": "PF1.CreatureTypeConstruct",\n  "dragon": "PF1.CreatureTypeDragon",\n  "fey": "PF1.CreatureTypeFey",\n  "humanoid": "PF1.CreatureTypeHumanoid",\n  "magicalBeast": "PF1.CreatureTypeMagicalBeast",\n  "monstrousHumanoid": "PF1.CreatureTypeMonstrousHumanoid",\n  "ooze": "PF1.CreatureTypeOoze",\n  "outsider": "PF1.CreatureTypeOutsider",\n  "plant": "PF1.CreatureTypePlant",\n  "undead": "PF1.CreatureTypeUndead",\n  "vermin": "PF1.CreatureTypeVermin",\n};\n\nPF1.sizeDie = [\n  "1",\n  "1d2",\n  "1d3",\n  "1d4",\n  "1d6",\n  "1d8",\n  "1d10",\n  "2d6",\n  "2d8",\n  "3d6",\n  "3d8",\n  "4d6",\n  "4d8",\n  "6d6",\n  "6d8",\n  "8d6",\n  "8d8",\n  "12d6",\n  "12d8",\n  "16d6",\n  "16d8",\n];\n\n// Character Level XP Requirements\nPF1.CHARACTER_EXP_LEVELS =  {\n  slow: [\n    0, 3000, 7500, 14000, 23000, 35000, 53000, 77000, 115000, 160000, 235000, 330000,\n    475000, 665000, 955000, 1350000, 1900000, 2700000, 3850000, 5350000\n  ],\n  medium: [\n    0, 2000, 5000, 9000, 15000, 23000, 35000, 51000, 75000, 105000, 155000, 220000,\n    315000, 445000, 635000, 890000, 1300000, 1800000, 2550000, 3600000\n  ],\n  fast: [\n    0, 1300, 3300, 6000, 10000, 15000, 23000, 34000, 50000, 71000, 105000, 145000,\n    210000, 295000, 425000, 600000, 850000, 1200000, 1700000, 2400000\n  ]\n};\n\n// Challenge Rating XP Levels\nPF1.CR_EXP_LEVELS = [\n  200, 400, 600, 800, 1200, 1600, 2400, 3200, 4800, 6400, 9600, 12800, 19200, 25600,\n  38400, 51200, 76800, 102400, 153600, 204800, 307200, 409600, 614400, 819200, 1228800, 1638400, 2457600,\n  3276800, 4915200, 6553600, 9830400\n];\n\nCONFIG.Combat.initiative.decimals = 2;\n\n\n//# sourceURL=webpack://pf1/./module/config.js?')},"./module/config/experience.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExperienceConfig", function() { return ExperienceConfig; });\nclass ExperienceConfig extends FormApplication {\n  constructor(object, options) {\n    super(object || ExperienceConfig.defaultSettings, options);\n\n    this._init = false;\n  }\n\n  /** Collect data for the template. @override */\n  async getData() {\n    const data = {};\n\n    if (!this._init) {\n      const settings = await game.settings.get("pf1", "experienceConfig");\n      this._settings = mergeObject(this.constructor.defaultSettings, settings);\n      this._init = true;\n    }\n    data.settings = this._settings;\n\n    // Custom experience track booleans\n    data.hasCustomFormula = data.settings.track === "customFormula";\n\n    return data;\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    return mergeObject(super.defaultOptions, {\n      title:  game.i18n.localize("PF1.ExperienceConfigName"),\n      id: \'experience-config\',\n      template: "systems/pf1/templates/settings/experience.html",\n      width: 560,\n      height: "auto",\n    });\n  }\n\n  static get defaultSettings() {\n    return {\n      track: "medium",\n      disableExperienceTracking: false,\n      custom: {\n        formula: "",\n      },\n    };\n  }\n\n  /**\n   * Activate the default set of listeners for the Entity sheet These listeners handle basic stuff like form submission or updating images.\n   * @override\n   */\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\'button[type="submit"]\').click(this._onButtonSubmit.bind(this));\n  }\n\n  _onButtonSubmit(event) {\n    this._onSubmit(event);\n  }\n\n  _onChangeInput(event) {\n    super._onChangeInput(event);\n\n    this._updateApplicationSettings();\n  }\n\n  _updateApplicationSettings() {\n\n    // Acquire and validate Form Data\n    const form = this.element.find("form").first()[0];\n    const FD = this._getFormData(form);\n    const dtypes = FD._dtypes;\n\n    // Construct update data object by casting form data\n    let formData = Array.from(FD).reduce((obj, [k, v]) => {\n      let dt = dtypes[k];\n      if ( dt === "Number" ) obj[k] = v !== "" ? Number(v) : null;\n      else if ( dt === "Boolean" ) obj[k] = v === "true";\n      else if ( dt === "Radio" ) obj[k] = JSON.parse(v);\n      else obj[k] = v;\n      return obj;\n    }, {});\n\n    // Update settings and re-render\n    this._settings = mergeObject(this._settings, expandObject(formData));\n    this.render();\n  }\n\n  /**\n   * This method is called upon form submission after form data is validated.\n   * @override\n   */\n  async _updateObject(event, formData) {\n    const settings = expandObject(formData);\n    // Some mild sanitation for the numeric values.\n    await game.settings.set("pf1", "experienceConfig", settings);\n    ui.notifications.info("Updated Pathfinder experience configuration.");\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/config/experience.js?')},"./module/config/health.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HealthConfig", function() { return HealthConfig; });\nclass HealthConfig extends FormApplication {\n  constructor(object, options) {\n    super(object || HealthConfig.defaultSettings, options)\n  }\n\n  /** Collect data for the template. @override */\n  async getData() {\n    let settings = await game.settings.get("pf1", "healthConfig")\n    settings = mergeObject(HealthConfig.defaultSettings, settings)\n    return settings\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    return mergeObject(super.defaultOptions, {\n      title:  game.i18n.localize("SETTINGS.pf1HealthConfigName"),\n      id: \'health-config\',\n      template: "systems/pf1/templates/settings/health.html",\n      width: 480,\n      height: "auto",\n      tabs: [{\n        navSelector: ".tabs",\n        contentSelector: ".tabbed",\n        initial: "base"\n      }]\n    })\n  }\n\n  static get defaultSettings() {\n    return {\n      hitdice: {\n        PC:     {auto: false, rate: 0.5, maximized: 1},\n        NPC:    {auto: false, rate: 0.5, maximized: 0},\n        Racial: {auto: false, rate: 0.5, maximized: 0}\n      },\n      hitdieOptions: ["Compute", "Rate", "Maximized"],\n      rounding: "up",\n      continuity: "discrete",\n      variants: {\n        pc:  {useWoundsAndVigor: false},\n        npc: {useWoundsAndVigor: false}\n      }\n    }\n  }\n\n  /**\n   * Activate the default set of listeners for the Entity sheet These listeners handle basic stuff like form submission or updating images.\n   * @override\n   */\n  activateListeners(html) {\n    super.activateListeners(html)\n    html.find(\'button[name="reset"]\').click(this._onReset.bind(this))\n    html.find(\'button[name="submit"]\').click(this._onSubmit.bind(this))\n  }\n\n  /**\n   * Handle button click to reset default settings\n   * @param event {Event}   The initial button click event\n   * @private\n   */\n  async _onReset(event) {\n    event.preventDefault();\n    await game.settings.set("pf1", "healthConfig", HealthConfig.defaultSettings)\n    ui.notifications.info(`Reset Pathfinder health configuration.`)\n    return this.render()\n  }\n\n  _onSubmit(event) {\n    super._onSubmit(event)\n  }\n\n  /**\n   * This method is called upon form submission after form data is validated.\n   * @override\n   */\n  async _updateObject(event, formData) {\n    const settings = expandObject(formData)\n    // Some mild sanitation for the numeric values.\n    for (const hd of Object.values(settings.hitdice)) {\n      hd.rate = Math.max(0, Math.min(hd.rate, 100))\n      hd.maximized = Math.max(0, Math.min(Math.floor(hd.maximized), 100))\n    }\n    await game.settings.set("pf1", "healthConfig", settings)\n    ui.notifications.info("Updated Pathfinder health configuration.")\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/config/health.js?')},"./module/dice.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DicePF", function() { return DicePF; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_preProcessDiceFormula", function() { return _preProcessDiceFormula; });\n/* harmony import */ var _sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sidebar/chat-message.js */ "./module/sidebar/chat-message.js");\n\n\nclass DicePF {\n\n  /**\n   * A standardized helper function for managing core 5e "d20 rolls"\n   *\n   * Holding SHIFT, ALT, or CTRL when the attack is rolled will "fast-forward".\n   * This chooses the default options of a normal attack with no bonus, Advantage, or Disadvantage respectively\n   *\n   * @param {Event} event           The triggering event which initiated the roll\n   * @param {Array} parts           The dice roll component parts, excluding the initial d20\n   * @param {Actor} actor           The Actor making the d20 roll\n   * @param {Object} data           Actor or item data against which to parse the roll\n   * @param {String} template       The HTML template used to render the roll dialog\n   * @param {String} title          The dice roll UI window title\n   * @param {Object} speaker        The ChatMessage speaker to pass when creating the chat\n   * @param {Function} flavor       A callable function for determining the chat message flavor given parts and data\n   * @param {Boolean} takeTwenty    Allow rolling with take twenty (and therefore also with take ten)\n   * @param {Boolean} situational   Allow for an arbitrary situational bonus field\n   * @param {Boolean} fastForward   Allow fast-forward advantage selection\n   * @param {Number} critical       The value of d20 result which represents a critical success\n   * @param {Number} fumble         The value of d20 result which represents a critical failure\n   * @param {Function} onClose      Callback for actions to take when the dialog form is closed\n   * @param {Object} dialogOptions  Modal dialog options\n   * @param {Array} extraRolls      An array containing bonuses/penalties for extra rolls\n   * @param {Boolean} autoRender    Whether to automatically render the chat messages\n   */\n  static async d20Roll({event, parts, data, template, title, speaker, flavor, takeTwenty=true, situational=true,\n                  fastForward=true, critical=20, fumble=1, onClose, dialogOptions, extraRolls=[], chatTemplate, chatTemplateData,\n                  staticRoll=null }) {\n    // Handle input arguments\n    flavor = flavor || title;\n    let rollMode = game.settings.get("core", "rollMode");\n    let rolled = false;\n\n    // Inner roll function\n    let _roll = async (parts, setRoll, form) => {\n      const originalFlavor = flavor;\n      rollMode = form ? form.find(\'[name="rollMode"]\').val() : rollMode;\n      for (let a = 0; a < 1 + extraRolls.length; a++) {\n        flavor = originalFlavor;\n        let curParts = duplicate(parts);\n        // Don\'t include situational bonus unless it is defined\n        data.bonus = form ? form.find(\'[name="bonus"]\').val() : 0;\n        if (!data.bonus && curParts.indexOf("@bonus") !== -1) curParts.pop();\n\n        // Extra roll specifics\n        if (a >= 1) {\n          let extraRoll = extraRolls[a-1];\n          curParts.push(extraRoll.bonus);\n          flavor += ` <div class="extra-roll-label">${extraRoll.label}</div>`;\n        }\n\n        // Do set roll\n        if (setRoll != null && setRoll >= 0) {\n          curParts[0] = `${setRoll}`;\n          flavor += ` (Take ${setRoll})`;\n        }\n\n        // Execute the roll\n        let roll = new Roll(curParts.join(" + "), data).roll();\n\n        // Convert the roll to a chat message\n        if (chatTemplate) {\n          // Create roll template data\n          const d20 = roll.parts[0];\n          const rollData = mergeObject({\n            user: game.user._id,\n            formula: roll.formula,\n            tooltip: await roll.getTooltip(),\n            total: roll.total,\n            isCrit: d20.total >= critical,\n            isFumble: d20.total <= fumble,\n          }, chatTemplateData || {});\n\n          // Create chat data\n          let chatData = {\n            user: game.user._id,\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n            sound: a === 0 ? CONFIG.sounds.dice : null,\n            speaker: speaker,\n            content: await renderTemplate(chatTemplate, rollData),\n            "flags.pf1.noRollRender": true,\n          };\n          // Handle different roll modes\n          switch (rollMode) {\n            case "gmroll":\n              chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n              break;\n            case "selfroll":\n              chatData["whisper"] = [game.user._id];\n              break;\n            case "blindroll":\n              chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n              chatData["blind"] = true;\n              break;\n          }\n\n          // Send message\n          rolled = true;\n          chatData = mergeObject(roll.toMessage({flavor}, { create: false }), chatData);\n\n          await _sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_0__["ChatMessagePF"].create(chatData);\n        }\n        else {\n          rolled = true;\n          await roll.toMessage({\n            speaker: speaker,\n            flavor: flavor,\n            rollMode: rollMode,\n            sound: a === 0 ? CONFIG.sounds.dice : null\n          });\n        }\n      }\n    };\n\n    // Modify the roll and handle fast-forwarding\n    parts = ["1d20"].concat(parts);\n    if (fastForward === true || event.shiftKey) return _roll(parts, staticRoll);\n    else parts = parts.concat(["@bonus"]);\n\n    // Render modal dialog\n    template = template || "systems/pf1/templates/chat/roll-dialog.html";\n    let dialogData = {\n      formula: parts.join(" + "),\n      data: data,\n      rollMode: rollMode,\n      rollModes: CONFIG.Dice.rollModes\n    };\n    const html = await renderTemplate(template, dialogData);\n\n    let roll;\n    return new Promise(resolve => {\n      new Dialog({\n        title: title,\n        content: html,\n        buttons: {\n          normal: {\n            label: "Normal",\n            callback: html => roll = _roll(parts, staticRoll != null ? staticRoll : -1, html)\n          },\n          takeTen: {\n            label: "Take 10",\n            condition: takeTwenty,\n            callback: html => roll = _roll(parts, 10, html)\n          },\n          takeTwenty: {\n            label: "Take 20",\n            condition: takeTwenty,\n            callback: html => roll = _roll(parts, 20, html)\n          }\n        },\n        default: "normal",\n        close: html => {\n          if ( onClose ) onClose(html, parts, data);\n          resolve(rolled ? roll : false);\n        }\n      }, dialogOptions).render(true);\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * A standardized helper function for managing core 5e "d20 rolls"\n   *\n   * Holding SHIFT, ALT, or CTRL when the attack is rolled will "fast-forward".\n   * This chooses the default options of a normal attack with no bonus, Critical, or no bonus respectively\n   *\n   * @param {Event} event           The triggering event which initiated the roll\n   * @param {Array} parts           The dice roll component parts, excluding the initial d20\n   * @param {Actor} actor           The Actor making the damage roll\n   * @param {Object} data           Actor or item data against which to parse the roll\n   * @param {String} template       The HTML template used to render the roll dialog\n   * @param {String} title          The dice roll UI window title\n   * @param {Object} speaker        The ChatMessage speaker to pass when creating the chat\n   * @param {Function} flavor       A callable function for determining the chat message flavor given parts and data\n   * @param {Boolean} critical      Allow critical hits to be chosen\n   * @param {Function} onClose      Callback for actions to take when the dialog form is closed\n   * @param {Object} dialogOptions  Modal dialog options\n   */\n  static async damageRoll({event={}, parts, actor, data, template, title, speaker, flavor, critical=true, onClose, dialogOptions, chatTemplate, chatTemplateData }) {\n    flavor = flavor || title;\n    let rollMode = game.settings.get("core", "rollMode");\n    let rolled = false;\n\n    // Inner roll function\n    const _roll = async (crit, form) => {\n      // Don\'t include situational bonus unless it is defined\n      data.bonus = form ? form.find(\'[name="bonus"]\').val() : 0;\n\n      // Detemrine critical multiplier\n      data["critMult"] = crit ? data.item.ability.critMult : 1;\n      // Determine damage ability\n      data["ablMult"] = 0;\n      if (data.item.ability.damageMult != null) {\n        data["ablMult"] = data.item.ability.damageMult;\n      }\n\n      let roll = new Roll(parts.join("+"), data);\n      if ( crit === true ) {\n        let mult = data.item.ability.critMult || 2;\n\n        // Update first damage part\n        roll.alter(0, mult);\n        flavor = `${flavor} (Critical)`;\n      }\n\n      roll.roll();\n\n      // Convert the roll to a chat message\n      if (chatTemplate) {\n        // Create roll template data\n        const rollData = mergeObject({\n          user: game.user._id,\n          formula: roll.formula,\n          tooltip: await roll.getTooltip(),\n          total: roll.total,\n        }, chatTemplateData || {});\n\n        // Create chat data\n        let chatData = {\n          user: game.user._id,\n          type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n          rollMode: game.settings.get("core", "rollMode"),\n          sound: CONFIG.sounds.dice,\n          speaker: speaker,\n          flavor: flavor,\n          rollMode: rollMode,\n          roll: roll,\n          content: await renderTemplate(chatTemplate, rollData),\n          useCustomContent: true,\n        };\n        // Handle different roll modes\n        switch (chatData.rollMode) {\n          case "gmroll":\n            chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n            break;\n          case "selfroll":\n            chatData["whisper"] = [game.user._id];\n            break;\n          case "blindroll":\n            chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n            chatData["blind"] = true;\n        }\n\n        // Send message\n        rolled = true;\n        _sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_0__["ChatMessagePF"].create(chatData);\n      }\n      else {\n        rolled = true;\n        roll.toMessage({\n          speaker: speaker,\n          flavor: flavor,\n          rollMode: rollMode\n        });\n      }\n\n      // Return the Roll object\n      return roll;\n    };\n\n    // Modify the roll and handle fast-forwarding\n    if (!event.shiftKey) return _roll(event.ctrlKey);\n    else parts = parts.concat(["@bonus"]);\n\n    // Construct dialog data\n    template = template || "systems/pf1/templates/chat/roll-dialog.html";\n    let dialogData = {\n      formula: parts.join(" + "),\n      data: data,\n      rollMode: rollMode,\n      rollModes: CONFIG.Dice.rollModes\n    };\n    const html = await renderTemplate(template, dialogData);\n\n    // Render modal dialog\n    let roll;\n    return new Promise(resolve => {\n      new Dialog({\n        title: title,\n        content: html,\n        buttons: {\n          normal: {\n            label: critical ? "Normal" : "Roll",\n            callback: html => roll = _roll(false, html)\n          },\n          critical: {\n            condition: critical,\n            label: "Critical Hit",\n            callback: html => roll = _roll(true, html)\n          },\n        },\n        default: "normal",\n        close: html => {\n          if (onClose) onClose(html, parts, data);\n          resolve(rolled ? roll : false);\n        }\n      }, dialogOptions).render(true);\n    });\n  }\n\n  static messageRoll({data, msgStr}) {\n    let re = /\\[\\[(.+)\\]\\]/g;\n    return msgStr.replace(re, (_, p1) => {\n      const roll = new Roll(p1, data).roll();\n      return roll.total.toString();\n    });\n\n    return msgStr;\n  }\n}\n\nconst _preProcessDiceFormula = function(formula, data={}) {\n\n  // Replace parentheses with semicolons to use for splitting\n  let toSplit = formula.replace(/([A-z]+)?\\(/g, (match, prefix) => {\n    return (prefix in game.pf1.rollPreProcess || prefix in Math) ? `;${prefix};(;` : ";(;";\n  }).replace(/\\)/g, ";);");\n  let terms = toSplit.split(";");\n\n  // Match parenthetical groups\n  let nOpen = 0,\n    nOpenPreProcess = [];\n  terms = terms.reduce((arr, t) => {\n\n    // Handle cases where the prior term is a math function\n    const beginPreProcessFn = (t[0] === "(") && (arr[arr.length-1] in game.pf1.rollPreProcess);\n    if (beginPreProcessFn) nOpenPreProcess.push([arr.length-1, nOpen]);\n    const beginMathFn = (t[0] === "(") && (arr[arr.length-1] in Math);\n    if (beginMathFn && nOpenPreProcess.length > 0) nOpenPreProcess.push([arr.length-1, nOpen]);\n\n    // Add terms to the array\n    arr.push(t);\n\n    // Increment the number of open parentheses\n    if ( t === "(" ) nOpen++;\n    if ( (nOpen > 0) && (t === ")") ) {\n      nOpen--;\n      for (let a = 0; a < nOpenPreProcess.length; a++) {\n        let obj = nOpenPreProcess[a];\n        // End pre process function\n        if (obj[1] === nOpen) {\n          const sliceLen = arr.length - obj[0];\n          let fnData = arr.splice(obj[0], sliceLen),\n            fn = fnData[0];\n          let fnParams = fnData.slice(2, -1).reduce((cur, s) => {\n              cur.push(...s.split(/\\s*,\\s*/));\n              return cur;\n            }, []).map(o => {\n              return new Roll(o, data).roll().total;\n            }).filter(o => o !== "" && o != null);\n          if (fn in Math) {\n            arr.push(Math[fn](...fnParams).toString());\n          }\n          else {\n            arr.push(game.pf1.rollPreProcess[fn](...fnParams).toString());\n          }\n\n          nOpenPreProcess.splice(a, 1);\n          a--;\n        }\n      }\n    }\n    return arr;\n  }, []);\n  \n  return terms.join("");\n\n\n\n  // Replace parentheses with semicolons to use for splitting\n  // let toSplit = formula.replace(/([A-z]+)?\\(/g, (match, prefix) => {\n    // return typeof prefix === "string" ? `;${prefix};(;` : ";(;";\n  // }).replace(/\\)/g, ";);").replace(/,/g, ";,;");\n  // let terms = toSplit.split(";").filter(t => t !== "");\n\n  // // Match parenthetical groups\n  // let nOpen = 0,\n    // fnIndex = -1,\n    // fnOpen = -1,\n    // fnName = "";\n\n  // terms = terms.reduce((arr, t, a) => {\n\n    // // Handle cases where the prior term is a math function\n    // const beginMathFn = (t[0] === "(") && (arr[arr.length-1] in game.pf1.rollPreProcess);\n\n    // // Add to array\n    // arr.push(t);\n\n    // // Increment the number of open parentheses\n    // if ( (t === "(") ) {\n      // if ( beginMathFn ) {\n        // fnIndex = a - 1;\n        // fnOpen = nOpen;\n        // fnName = arr[a-1];\n      // }\n      // nOpen++;\n    // }\n    // if ( (nOpen > 0) && (t === ")") && (fnName !== "") ) {\n      // nOpen--;\n      // if ( fnOpen === nOpen ) {\n        // let nOpen2 = 0,\n          // slice = "";\n        // const fnData = arr.splice(fnIndex, a - fnIndex + 1),\n          // middleSlice = fnData.slice(2, -1).reduce((arr2, t2) => {\n\n            // if ( t2 === "(" ) nOpen2++;\n            // else if ( t2 === ")" ) nOpen2--;\n\n            // if ( nOpen2 === 0 && t2 === "," ) {\n              // arr2.push(slice);\n              // slice = "";\n            // }\n            // else slice += t2.trim();\n\n            // return arr2;\n          // }, []).concat([slice]);//.join("").split(/\\s*,\\s*/).map(o => o.trim());\n\n        // const fnParams = middleSlice.map(o => {\n          // return new Roll(o, data).roll().total;\n        // });\n        // arr.push(game.pf1.rollPreProcess[fnName](...fnParams));\n      // }\n\n      // fnIndex = -1;\n      // fnOpen = -1;\n      // fnName = "";\n    // }\n\n    // return arr;\n  // }, []);\n\n  // return terms.join("");\n\n  // Convert parenthetical groups to inner Roll objects\n  // return terms.reduce((arr, t) => {\n    // if ( t === "" ) return arr;\n    // let pt = t.match(this.rgx.parenthetical);\n    // arr.push(pt ? new Roll(pt[1], data) : t);\n    // return arr;\n  // }, []);\n\n  // return _process(formula, data);\n};\n\n\n//# sourceURL=webpack://pf1/./module/dice.js?')},"./module/item/entity.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemPF", function() { return ItemPF; });\n/* harmony import */ var _dice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dice.js */ "./module/dice.js");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chat.js */ "./module/chat.js");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib.js */ "./module/lib.js");\n/* harmony import */ var _actor_entity_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../actor/entity.js */ "./module/actor/entity.js");\n/* harmony import */ var _pixi_ability_template_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../pixi/ability-template.js */ "./module/pixi/ability-template.js");\n/* harmony import */ var _misc_chat_attack_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../misc/chat-attack.js */ "./module/misc/chat-attack.js");\n\n\n\n\n\n\n\n/**\n * Override and extend the basic :class:`Item` implementation\n */\nclass ItemPF extends Item {\n\n  constructor(...args) {\n    super(...args);\n\n    /**\n     * @property {Object} _prevData\n     * When an item gets updated, certain data is stored here for use in _onUpdate.\n     */\n    this._prevData = {};\n\n    /**\n     * @property {Object} links\n     * Links are stored here during runtime.\n     */\n    this.links = {};\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Properties                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement an attack roll as part of its usage\n   * @type {boolean}\n   */\n  get hasAttack() {\n    return ["mwak", "rwak", "msak", "rsak"].includes(this.data.data.actionType);\n  }\n\n  get hasMultiAttack() {\n    return this.hasAttack && this.data.data.attackParts != null && this.data.data.attackParts.length > 0;\n  }\n\n  get hasTemplate() {\n    const v = getProperty(this.data, "data.measureTemplate.type");\n    const s = getProperty(this.data, "data.measureTemplate.size");\n    return (typeof v === "string" && v !== "") && ((typeof s === "string" && s.length > 0) || (typeof s === "number" && s > 0));\n  }\n\n  get hasAction() {\n    return this.hasAttack\n    || this.hasDamage\n    || this.hasEffect\n    || this.hasTemplate;\n  }\n\n  get isSingleUse() {\n    return getProperty(this.data, "data.uses.per") === "single";\n  }\n\n  get isCharged() {\n    if (this.type === "consumable" && getProperty(this.data, "data.uses.per") === "single") return true;\n    return ["day", "week", "charges"].includes(getProperty(this.data, "data.uses.per"));\n  }\n\n  get autoDeductCharges() {\n    return this.type === "spell"\n      ? getProperty(this.data, "data.preparation.autoDeductCharges") === true\n      : (this.isCharged && getProperty(this.data, "data.uses.autoDeductCharges") === true);\n  }\n\n  get charges() {\n    // Get linked charges\n    const link = getProperty(this, "links.charges");\n    if (link) return link.charges;\n\n    // Get own charges\n    if (getProperty(this.data, "data.uses.per") === "single") return getProperty(this.data, "data.quantity");\n    if (this.type === "spell") return this.getSpellUses();\n    return getProperty(this.data, "data.uses.value") || 0;\n  }\n\n  get chargeCost() {\n    if (this.type === "spell") return 1;\n    \n    const formula = getProperty(this.data, "data.uses.autoDeductChargesCost");\n    if (!(typeof formula === "string" && formula.length > 0)) return 1;\n    const cost = new Roll(formula, this.getRollData()).roll().total;\n    return cost;\n  }\n\n  get spellbook() {\n    if (this.type !== "spell") return null;\n    if (this.actor == null)    return null;\n    \n    const spellbookIndex = this.data.data.spellbook;\n    return this.actor.data.data.attributes.spells.spellbooks[spellbookIndex];\n  }\n\n  get casterLevel() {\n    const spellbook = this.spellbook;\n    if (!spellbook) return null;\n\n    return spellbook.cl.total + (this.data.data.clOffset || 0);\n  }\n\n  get spellLevel() {\n    if (this.type !== "spell") return null;\n\n    return this.data.data.level + (this.data.data.slOffset || 0);\n  }\n\n  get dc() {\n    const rollData = this.getRollData();\n    const data = this.data.data;\n\n    if (this.type === "spell") {\n      const spellbook = this.spellbook;\n      if (spellbook != null) {\n        return new Roll(spellbook.baseDCFormula, rollData).roll().total + new Roll(data.save.dc.length > 0 ? data.save.dc : "0", rollData).roll().total;\n      }\n    }\n    const dcFormula = getProperty(data, "save.dc") || "";\n    return new Roll(dcFormula.length > 0 ? data.save.dc : "0", rollData).roll().total;\n  }\n\n  get typeColor() {\n    switch (this.type) {\n      case "feat":\n        return "#8900EA";\n      case "spell":\n        return "#5C37FF";\n      case "class":\n        return "#85B1D2";\n      case "race":\n        return "#00BD29";\n      case "attack":\n        return "#F21B1B";\n      case "weapon":\n      case "equipment":\n      case "consumable":\n      case "loot":\n        return "#E5E5E5";\n      case "buff":\n        return "#FDF767";\n    }\n\n    return "white";\n  }\n\n  get typeColor2() {\n    switch (this.type) {\n      case "feat":\n        return "#5F00A3";\n      case "spell":\n        return "#4026B2";\n      case "class":\n        return "#6A8DA8";\n      case "race":\n        return "#00841C";\n      case "attack":\n        return "#A91212";\n      case "weapon":\n      case "equipment":\n      case "consumable":\n      case "loot":\n        return "#B7B7B7";\n      case "buff":\n        return "#FDF203";\n    }\n\n    return "#C1C1C1";\n  }\n\n  static get defaultChange() {\n    return {\n      formula: "",\n      operator: "+",\n      target: "",\n      subTarget: "",\n      modifier: "",\n      priority: 0,\n      value: 0,\n    };\n  }\n\n  static get defaultContextNote() {\n    return {\n      text: "",\n      target: "",\n      subTarget: "",\n    };\n  }\n\n  /**\n   * Generic charge addition (or subtraction) function that either adds charges\n   * or quantity, based on item data.\n   * @param {number} value       - The amount of charges to add.\n   * @returns {Promise}\n   */\n  async addCharges(value) {\n    // Add link charges\n    const link = getProperty(this, "links.charges");\n    if (link) return link.addCharges(value);\n\n    // Add own charges\n    if ( getProperty(this.data, "data.uses.per") === "single"\n      && getProperty(this.data, "data.quantity") == null) return;\n\n    if (this.type === "spell") return this.addSpellUses(value);\n\n    let prevValue = this.isSingleUse ? getProperty(this.data, "data.quantity") : getProperty(this.data, "data.uses.value");\n\n    if (this.isSingleUse) await this.update({ "data.quantity"  : prevValue + value });\n    else                  await this.update({ "data.uses.value": prevValue + value });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a damage roll as part of its usage\n   * @type {boolean}\n   */\n  get hasDamage() {\n    return !!(this.data.data.damage && this.data.data.damage.parts.length);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the item provide an amount of healing instead of conventional damage?\n   * @return {boolean}\n   */\n  get isHealing() {\n    return (this.data.data.actionType === "heal") && this.data.data.damage.parts.length;\n  }\n\n  get hasEffect() {\n    return this.hasDamage || (this.data.data.effectNotes && this.data.data.effectNotes.length > 0);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Does the Item implement a saving throw as part of its usage\n   * @type {boolean}\n   */\n  get hasSave() {\n    return !!(this.data.data.save && this.data.data.save.ability);\n  }\n\n  /**\n   * Should the item show unidentified data\n   * @type {boolean}\n   */\n  get showUnidentifiedData() {\n    return (!game.user.isGM && getProperty(this.data, "data.identified") === false);\n  }\n\n  /* -------------------------------------------- */\n  /*\tData Preparation\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n  /* -------------------------------------------- */\n\n  /**\n   * Augment the basic Item data model with additional dynamic data.\n   */\n  prepareData() {\n    super.prepareData();\n\n    const itemData = this.data;\n    const data = itemData.data;\n    const C = CONFIG.PF1;\n    const labels = {};\n\n    // Physical items\n    if (hasProperty(itemData, "data.weight")) {\n      // Sync name\n      if (!hasProperty(this.data, "data.identifiedName")) setProperty(this.data, "data.identifiedName", this.name);\n      // Prepare unidentified cost\n      if (!hasProperty(this.data, "data.unidentified.price")) setProperty(this.data, "data.unidentified.price", 0);\n\n      // Set basic data\n      itemData.data.hp = itemData.data.hp || { max: 10, value: 10 };\n      itemData.data.hardness = itemData.data.hardness || 0;\n      itemData.data.carried = itemData.data.carried == null ? true : itemData.data.carried;\n\n      // Equipped label\n      labels.equipped = "";\n      if (itemData.data.equipped === true) labels.equipped = game.i18n.localize("PF1.Yes");\n      else labels.equipped = game.i18n.localize("PF1.No");\n\n      // Carried label\n      labels.carried = "";\n      if (itemData.data.carried === true) labels.carried = game.i18n.localize("PF1.Yes");\n      else labels.carried = game.i18n.localize("PF1.No");\n\n      // Identified label\n      labels.identified = "";\n      if (itemData.data.identified === true) labels.identified = game.i18n.localize("PF1.YesShort");\n      else labels.identified = game.i18n.localize("PF1.NoShort");\n\n      // Slot label\n      if (itemData.data.slot) {\n        // Add equipment slot\n        const equipmentType = getProperty(this.data, "data.equipmentType") || null;\n        if (equipmentType != null) {\n          const equipmentSlot = getProperty(this.data, "data.slot") || null;\n          labels.slot = equipmentSlot == null ? null : CONFIG.PF1.equipmentSlots[equipmentType][equipmentSlot];\n        }\n        else labels.slot = null;\n      }\n    }\n\n    // Spell Level,  School, and Components\n    if ( itemData.type === "spell" ) {\n      labels.level = C.spellLevels[data.level];\n      labels.school = C.spellSchools[data.school];\n      labels.components = Object.entries(data.components).map(c => {\n        c[1] === true ? c[0].titleCase().slice(0,1) : null\n      }).filterJoin(",");\n    }\n\n    // Feat Items\n    else if ( itemData.type === "feat" ) {\n      labels.featType = C.featTypes[data.featType];\n\n      // Ability type\n      if (data.abilityType && data.abilityType !== "none") {\n        labels.abilityType = C.abilityTypes[data.abilityType].short;\n      }\n      else if (labels.abilityType) {\n        delete labels.abilityType;\n      }\n    }\n\n    // Buff Items\n    else if (itemData.type === "buff") {\n      labels.buffType = C.buffTypes[data.buffType];\n    }\n\n    // Weapon Items\n    else if (itemData.type === "weapon") {\n      // Type and subtype labels\n      let wType = getProperty(this.data, "data.weaponType");\n      let typeKeys = Object.keys(C.weaponTypes);\n      if (!typeKeys.includes(wType)) wType = typeKeys[0];\n\n      let wSubtype = getProperty(this.data, "data.weaponSubtype");\n      let subtypeKeys = Object.keys(C.weaponTypes[wType]).filter(o => !o.startsWith("_"));\n      if (!subtypeKeys.includes(wSubtype)) wSubtype = subtypeKeys[0];\n\n      labels.weaponType = C.weaponTypes[wType]._label;\n      labels.weaponSubtype = C.weaponTypes[wType][wSubtype];\n    }\n\n    // Equipment Items\n    else if (itemData.type === "equipment") {\n      // Type and subtype labels\n      let eType = getProperty(this.data, "data.equipmentType");\n      let typeKeys = Object.keys(C.equipmentTypes);\n      if (!typeKeys.includes(eType)) eType = typeKeys[0];\n\n      let eSubtype = getProperty(this.data, "data.equipmentSubtype");\n      let subtypeKeys = Object.keys(C.equipmentTypes[eType]).filter(o => !o.startsWith("_"));\n      if (!subtypeKeys.includes(eSubtype)) eSubtype = subtypeKeys[0];\n\n      labels.equipmentType = C.equipmentTypes[eType]._label;\n      labels.equipmentSubtype = C.equipmentTypes[eType][eSubtype];\n\n      // AC labels\n      labels.armor = data.armor.value ? `${data.armor.value} AC` : "";\n      if (data.armor.dex === "") data.armor.dex = null;\n      else if (typeof data.armor.dex === "string" && /\\d+/.test(data.armor.dex)) {\n        data.armor.dex = parseInt(data.armor.dex);\n      }\n      // Add enhancement bonus\n      if (data.armor.enh == null) data.armor.enh = 0;\n    }\n\n    // Activated Items\n    if ( data.hasOwnProperty("activation") ) {\n\n      // Ability Activation Label\n      let act = data.activation || {};\n      if (act) labels.activation = [["minute", "hour"].includes(act.type) ? act.cost.toString() : "", C.abilityActivationTypes[act.type]].filterJoin(" ");\n\n      // Target Label\n      let tgt = data.target || {};\n      if (["none", "touch", "personal"].includes(tgt.units)) tgt.value = null;\n      if (["none", "personal"].includes(tgt.type)) {\n        tgt.value = null;\n        tgt.units = null;\n      }\n      labels.target = [tgt.value, C.distanceUnits[tgt.units], C.targetTypes[tgt.type]].filterJoin(" ");\n      if (labels.target) labels.target = `Target: ${labels.target}`;\n\n      // Range Label\n      let rng = data.range || {};\n      if (!["ft", "mi", "spec"].includes(rng.units)) {\n        rng.value = null;\n        rng.long = null;\n      }\n      labels.range = [rng.value, rng.long ? `/ ${rng.long}` : null, C.distanceUnits[rng.units]].filterJoin(" ");\n      if (labels.range.length > 0) labels.range = ["Range:", labels.range].join(" ");\n\n      // Duration Label\n      let dur = data.duration || {};\n      if (["inst", "perm", "spec"].includes(dur.units)) dur.value = null;\n      labels.duration = [dur.value, C.timePeriods[dur.units]].filterJoin(" ");\n    }\n\n    // Item Actions\n    if ( data.hasOwnProperty("actionType") ) {\n      // Save DC\n      let save = data.save || {};\n      if (save.type) {\n        labels.save = `DC ${this.dc}`;\n      }\n\n      // Damage\n      let dam = data.damage || {};\n      if ( dam.parts ) {\n        labels.damage = dam.parts.map(d => d[0]).join(" + ").replace(/\\+ -/g, "- ");\n        labels.damageTypes = dam.parts.map(d => d[1]).join(", ");\n      }\n\n      // Add attack parts\n      if (!data.attack) data.attack = { parts: [] };\n    }\n\n    // Assign labels\n    this.labels = labels;\n\n    this.prepareLinks();\n  }\n\n  prepareLinks() {\n    if (!this.links) return;\n\n    for (let [k, i] of Object.entries(this.links)) {\n      switch(k) {\n        case "charges":\n          const uses = i.data.data.uses;\n          for (let [k, v] of Object.entries(uses)) {\n            if (["autoDeductCharges", "autoDeductChargesCost"].includes(k)) continue;\n            this.data.data.uses[k] = v;\n          }\n          break;\n      }\n    }\n  }\n\n  async update(data, options={}) {\n    const srcData = mergeObject(this.data, expandObject(data), { inplace: false });\n\n    // Update name\n    if (data["data.identifiedName"]) data["name"] = data["data.identifiedName"];\n    else if (data["name"]) data["data.identifiedName"] = data["name"];\n\n    // Update description\n    if (this.type === "spell") await this._updateSpellDescription(data, srcData);\n\n    // Set weapon subtype\n    if (data["data.weaponType"] != null && data["data.weaponType"] !== getProperty(this.data, "data.weaponType")) {\n      const type = data["data.weaponType"];\n      const subtype = data["data.weaponSubtype"] || getProperty(this.data, "data.weaponSubtype") || "";\n      const keys = Object.keys(CONFIG.PF1.weaponTypes[type])\n        .filter(o => !o.startsWith("_"));\n      if (!subtype || !keys.includes(subtype)) {\n        data["data.weaponSubtype"] = keys[0];\n      }\n    }\n\n    // Set equipment subtype and slot\n    if (data["data.equipmentType"] != null && data["data.equipmentType"] !== getProperty(this.data, "data.equipmentType")) {\n      // Set subtype\n      const type = data["data.equipmentType"];\n      const subtype = data["data.equipmentSubtype"] || getProperty(this.data, "data.equipmentSubtype") || "";\n      let keys = Object.keys(CONFIG.PF1.equipmentTypes[type])\n        .filter(o => !o.startsWith("_"));\n      if (!subtype || !keys.includes(subtype)) {\n        data["data.equipmentSubtype"] = keys[0];\n      }\n\n      // Set slot\n      const slot = data["data.slot"] || getProperty(this.data, "data.slot") || "";\n      keys = Object.keys(CONFIG.PF1.equipmentSlots[type]);\n      if (!slot || !keys.includes(slot)) {\n        data["data.slot"] = keys[0];\n      }\n    }\n\n    // Set previous data\n    this._prevData["level"] = getProperty(this.data, "data.level");\n\n    // Update maximum uses\n    this._updateMaxUses(data, {srcData: srcData});\n\n    // Update charges for linked items\n    if (data["data.uses.value"] != null) {\n      const link = getProperty(this, "links.charges");\n      if (link && getProperty(link, "links.charges") == null) {\n        await link.update({"data.uses.value": data["data.uses.value"]});\n      }\n    }\n\n    const diff = diffObject(flattenObject(this.data), data);\n    if (Object.keys(diff).length) {\n      return super.update(diff, options);\n    }\n    return false;\n  }\n\n  _onUpdate(data, options, userId, context) {\n    super._onUpdate(data, options, userId, context);\n\n    // Get changed attributes\n    const changed = new Set(Object.keys(data));\n\n    // Level changed\n    if (changed.has("data.level")) {\n      this._onLevelChange(this._prevData["level"], data["data.level"]);\n    }\n  }\n\n  _updateMaxUses(data, {srcData=null}={}) {\n    let doLinkData = true;\n    if (srcData == null) {\n      srcData = this.data;\n      doLinkData = false;\n    }\n    const rollData = this.getRollData();\n\n    if (hasProperty(srcData, "data.uses.maxFormula")) {\n      if (getProperty(srcData, "data.uses.maxFormula") !== "") {\n        let roll = new Roll(getProperty(srcData, "data.uses.maxFormula"), rollData).roll();\n        if (doLinkData) Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, data, "data.uses.max", roll.total);\n        else data["data.uses.max"] = roll.total;\n      }\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll the item to Chat, creating a chat card which contains follow up attack or damage roll options\n   * @return {Promise}\n   */\n  async roll(altChatData={}, {addDC=true}={}) {\n    const actor = this.actor;\n    if (actor && !actor.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    // Basic template rendering data\n    const token = this.actor.token;\n    const saveType = getProperty(this.data, "data.save.type");\n    const saveDC = this.dc;\n    const templateData = {\n      actor: this.actor,\n      tokenId: token ? `${token.scene._id}.${token.id}` : null,\n      item: this.data,\n      data: this.getChatData(),\n      labels: this.labels,\n      hasAttack: this.hasAttack,\n      hasMultiAttack: this.hasMultiAttack,\n      hasAction: this.hasAction || this.isCharged,\n      isHealing: this.isHealing,\n      hasDamage: this.hasDamage,\n      hasEffect: this.hasEffect,\n      isVersatile: this.isVersatile,\n      hasSave: this.hasSave,\n      isSpell: this.data.type === "spell",\n      save: {\n        hasSave: addDC === true && typeof saveType === "string" && saveType.length > 0,\n        dc: saveDC,\n        type: saveType,\n        label: game.i18n.localize("PF1.SavingThrowButtonLabel").format(CONFIG.PF1.savingThrows[saveType], saveDC.toString()),\n      },\n    };\n\n    // Roll spell failure chance\n    if (templateData.isSpell && this.actor != null && this.actor.spellFailure > 0) {\n      const spellbook = getProperty(this.actor.data, `data.attributes.spells.spellbooks.${this.data.data.spellbook}`);\n      if (spellbook && spellbook.arcaneSpellFailure) {\n        templateData.spellFailure = new Roll("1d100").roll().total;\n        templateData.spellFailureSuccess = templateData.spellFailure > this.actor.spellFailure;\n      }\n    }\n\n    // Render the chat card template\n    const templateType = ["consumable"].includes(this.data.type) ? this.data.type : "item";\n    const template = `systems/pf1/templates/chat/${templateType}-card.html`;\n\n    // Basic chat message data\n    const chatData = mergeObject({\n      user: game.user._id,\n      type: CONST.CHAT_MESSAGE_TYPES.OTHER,\n      speaker: ChatMessage.getSpeaker({ actor: this.actor }),\n    }, altChatData);\n\n    // Toggle default roll mode\n    let rollMode = chatData.rollMode || game.settings.get("core", "rollMode");\n    if ( ["gmroll", "blindroll"].includes(rollMode) ) chatData["whisper"] = ChatMessage.getWhisperRecipients("GM");\n    if ( rollMode === "blindroll" ) chatData["blind"] = true;\n\n    // Create the chat message\n    return Object(_chat_js__WEBPACK_IMPORTED_MODULE_1__["createCustomChatMessage"])(template, templateData, chatData);\n  }\n\n  /* -------------------------------------------- */\n  /*  Chat Cards\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n  /* -------------------------------------------- */\n\n  getChatData(htmlOptions) {\n    const data = duplicate(this.data.data);\n    const labels = this.labels;\n\n    const rollData = this.getRollData();\n\n    htmlOptions = mergeObject(htmlOptions || {}, {\n      rollData: rollData,\n    });\n\n    // Rich text description\n    if (this.showUnidentifiedData) {\n      data.description.value = TextEditor.enrichHTML(data.description.unidentified, htmlOptions);\n    }\n    else {\n      data.description.value = TextEditor.enrichHTML(data.description.value, htmlOptions);\n    }\n\n    // General equipment properties\n    const props = [];\n    if ( data.hasOwnProperty("equipped") && ["weapon", "equipment"].includes(this.data.type) ) {\n      props.push(\n        data.equipped ? game.i18n.localize("PF1.Equipped") : game.i18n.localize("PF1.NotEquipped"),\n      );\n    }\n\n    if (!this.showUnidentifiedData) {\n      // Gather dynamic labels\n      const dynamicLabels = {};\n      dynamicLabels.range = labels.range || "";\n      dynamicLabels.level = labels.sl || "";\n      // Range\n      if (data.range != null) {\n        if (data.range.units === "close") dynamicLabels.range = game.i18n.localize("PF1.RangeNote").format(25 + Math.floor(rollData.cl / 2) * 5);\n        else if (data.range.units === "medium") dynamicLabels.range = game.i18n.localize("PF1.RangeNote").format(100 + rollData.cl * 10);\n        else if (data.range.units === "long") dynamicLabels.range = game.i18n.localize("PF1.RangeNote").format(400 + rollData.cl * 40);\n        else if (["ft", "mi", "spec"].includes(data.range.units) && typeof data.range.value === "string") {\n          let range = new Roll(data.range.value.length > 0 ? data.range.value : "0", rollData).roll().total;\n          dynamicLabels.range = [range > 0 ? "Range:" : null, range, CONFIG.PF1.distanceUnits[data.range.units]].filterJoin(" ");\n        }\n      }\n      // Duration\n      if (data.duration != null) {\n        if (!["inst", "perm"].includes(data.duration.units) && typeof data.duration.value === "string") {\n          let duration = new Roll(data.duration.value.length > 0 ? data.duration.value : "0", rollData).roll().total;\n          dynamicLabels.duration = [duration, CONFIG.PF1.timePeriods[data.duration.units]].filterJoin(" ");\n        }\n      }\n\n      // Item type specific properties\n      const fn = this[`_${this.data.type}ChatData`];\n      if (fn) fn.bind(this)(data, labels, props);\n\n      // Ability activation properties\n      if ( data.hasOwnProperty("activation") ) {\n        props.push(\n          labels.target,\n          labels.activation,\n          dynamicLabels.range,\n          dynamicLabels.duration\n        );\n      }\n\n      // Add save DC\n      if (data.hasOwnProperty("actionType") && getProperty(data, "save.description")) {\n        let saveDC = this.dc;\n        let saveDesc = data.save.description;\n        if (saveDC > 0 && saveDesc) {\n          props.push(`DC ${saveDC}`);\n          props.push(saveDesc);\n        }\n      }\n    }\n\n    // Add SR reminder\n    if (this.type === "spell") {\n      if (data.sr) {\n        props.push(game.i18n.localize("PF1.SpellResistance"));\n      }\n    }\n\n    // Add ability type label\n    if (this.type === "feat") {\n      if (labels.abilityType) {\n        props.push(labels.abilityType);\n      }\n    }\n\n    // Filter properties and return\n    data.properties = props.filter(p => !!p);\n    return data;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare chat card data for equipment type items\n   * @private\n   */\n  _equipmentChatData(data, labels, props) {\n    props.push(\n      CONFIG.PF1.equipmentTypes[data.equipmentType][data.equipmentSubtype],\n      labels.armor || null,\n    );\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare chat card data for weapon type items\n   * @private\n   */\n  _weaponChatData(data, labels, props) {\n    props.push(\n      CONFIG.PF1.weaponTypes[data.weaponType]._label,\n      CONFIG.PF1.weaponTypes[data.weaponType][data.weaponSubtype],\n    );\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare chat card data for consumable type items\n   * @private\n   */\n  _consumableChatData(data, labels, props) {\n    props.push(\n      CONFIG.PF1.consumableTypes[data.consumableType]\n    );\n    if (["day", "week", "charges"].includes(data.uses.per)) {\n      props.push(data.uses.value + "/" + data.uses.max + " Charges");\n    }\n    else props.push(CONFIG.PF1.limitedUsePeriods[data.uses.per]);\n    data.hasCharges = data.uses.value >= 0;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare chat card data for tool type items\n   * @private\n   */\n  _lootChatData(data, labels, props) {\n    props.push(\n      data.weight ? data.weight + " " + (game.settings.get("pf1", "units") === "metric" ? game.i18n.localize("PF1.Kgs") : game.i18n.localize("PF1.Lbs")) : null\n    );\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render a chat card for Spell type data\n   * @return {Object}\n   * @private\n   */\n  _spellChatData(data, labels, props) {\n    const ad = this.actor.data.data;\n\n    // Spell saving throw text\n    // const abl = data.ability || ad.attributes.spellcasting || "int";\n    // if ( this.hasSave && !data.save.dc ) data.save.dc = 8 + ad.abilities[abl].mod + ad.attributes.prof;\n    // labels.save = `DC ${data.save.dc} ${CONFIG.PF1.abilities[data.save.ability]}`;\n\n    // Spell properties\n    props.push(\n      labels.level,\n      labels.components,\n    );\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare chat card data for items of the "Feat" type\n   */\n  _featChatData(data, labels, props) {\n    const ad = this.actor.data.data;\n\n    // Spell saving throw text\n    // const abl = data.ability || ad.attributes.spellcasting || "str";\n    // if ( this.hasSave && !data.save.dc ) data.save.dc = 8 + ad.abilities[abl].mod + ad.attributes.prof;\n    // labels.save = `DC ${data.save.dc} ${CONFIG.PF1.abilities[data.save.ability]}`;\n\n    // Feat properties\n    props.push(\n      CONFIG.PF1.featTypes[data.featType]\n    );\n  }\n\n  /* -------------------------------------------- */\n  /*  Item Rolls - Attack, Damage, Saves, Checks  */\n  /* -------------------------------------------- */\n\n  async use({ev=null, skipDialog=false}) {\n    if (this.type === "spell") {\n      return this.actor.useSpell(this, ev, {skipDialog: skipDialog});\n    }\n    else if (this.hasAction) {\n      return this.useAttack({ev: ev, skipDialog: skipDialog});\n    }\n\n    if (this.isCharged) {\n      if (this.charges <= 0) {\n        if (this.isSingleUse) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoQuantity"));\n        return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoCharges").format(this.name));\n      }\n      if (this.autoDeductCharges) {\n        this.addCharges(-this.chargeCost);\n      }\n    }\n    this.roll();\n  }\n\n  async useAttack({ev=null, skipDialog=false}={}) {\n    if (ev && ev.originalEvent) ev = ev.originalEvent;\n    const actor = this.actor;\n    if (actor && !actor.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n\n    const itemQuantity = getProperty(this.data, "data.quantity");\n    if (itemQuantity != null && itemQuantity <= 0) {\n      return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoQuantity"));\n    }\n\n    if (this.isCharged && this.charges <= 0) {\n      return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoCharges").format(this.name));\n    }\n\n    const rollData = this.getRollData();\n\n    let rolled = false;\n    const _roll = async function(fullAttack, form) {\n      let attackExtraParts = [],\n        damageExtraParts = [],\n        primaryAttack = true,\n        useMeasureTemplate = false,\n        rollMode = game.settings.get("core", "rollMode");\n      // Get form data\n      if (form) {\n        rollData.attackBonus = form.find(\'[name="attack-bonus"]\').val();\n        if (rollData.attackBonus) attackExtraParts.push("@attackBonus");\n        rollData.damageBonus = form.find(\'[name="damage-bonus"]\').val();\n        if (rollData.damageBonus) damageExtraParts.push("@damageBonus");\n        rollMode = form.find(\'[name="rollMode"]\').val();\n\n        // Power Attack\n        if (form.find(\'[name="power-attack"]\').prop("checked")) {\n          rollData.powerAttackBonus = (1 + Math.floor(getProperty(rollData, "attributes.bab.total") / 4)) * 2;\n          damageExtraParts.push("floor(@powerAttackBonus * max(0.5, min(1.5, @ablMult))) * @critMult");\n          rollData.powerAttackPenalty = -(1 + Math.floor(getProperty(rollData, "attributes.bab.total") / 4));\n          attackExtraParts.push("@powerAttackPenalty");\n        }\n        \n        // Point-Blank Shot\n        if (form.find(\'[name="point-blank-shot"]\').prop("checked")) {\n          rollData.pointBlankBonus = 1;\n          attackExtraParts.push("@pointBlankBonus");\n          damageExtraParts.push("@pointBlankBonus");\n        }\n        \n        // Rapid Shot\n        if (form.find(\'[name="rapid-shot"]\').prop("checked")) {\n          rollData.rapidShotPenalty = -2;\n          attackExtraParts.push("@rapidShotPenalty");\n        }\n        \n        // Primary Attack (for natural attacks)\n        let html = form.find(\'[name="primary-attack"]\');\n        if (typeof html.prop("checked") === "boolean") {\n          primaryAttack = html.prop("checked");\n        }\n        // Use measure template\n        html = form.find(\'[name="measure-template"]\');\n        if (typeof html.prop("checked") === "boolean") {\n          useMeasureTemplate = html.prop("checked");\n        }\n        // Damage ability multiplier\n        html = form.find(\'[name="damage-ability-multiplier"]\');\n        if (html.length > 0) {\n          rollData.item.ability.damageMult = parseFloat(html.val());\n        }\n      }\n\n      // Prepare the chat message data\n      let chatTemplateData = {\n        name: this.name,\n        type: CONST.CHAT_MESSAGE_TYPES.OTHER,\n        rollMode: rollMode,\n      };\n\n      // Create attacks\n      const allAttacks = fullAttack ? this.data.data.attackParts.reduce((cur, r) => {\n        cur.push({ bonus: r[0], label: r[1] });\n        return cur;\n      }, [{ bonus: "", label: `${game.i18n.localize("PF1.Attack")}` }]) : [{ bonus: "", label: `${game.i18n.localize("PF1.Attack")}` }];\n      let attacks = [];\n      if (this.hasAttack) {\n        for (let a = 0; a < allAttacks.length; a++) {\n          let atk = allAttacks[a];\n          // Create attack object\n          let attack = new _misc_chat_attack_js__WEBPACK_IMPORTED_MODULE_5__["ChatAttack"](this, {label: atk.label, rollData: rollData, primaryAttack: primaryAttack});\n\n          // Add attack roll\n          await attack.addAttack({bonus: atk.bonus, extraParts: attackExtraParts});\n\n          // Add damage\n          if (this.hasDamage) {\n            await attack.addDamage({extraParts: damageExtraParts, critical: false});\n\n            // Add critical hit damage\n            if (attack.hasCritConfirm) {\n              await attack.addDamage({extraParts: damageExtraParts, critical: true});\n            }\n          }\n\n          // Add attack notes\n          if (a === 0) attack.addAttackNotes();\n\n          // Add effect notes\n          attack.addEffectNotes();\n\n          // Add to list\n          attacks.push(attack);\n          \n          if (a === 0 && form && form.find(\'[name="rapid-shot"]\').prop("checked")) {\n            let rapidShotAttack = new _misc_chat_attack_js__WEBPACK_IMPORTED_MODULE_5__["ChatAttack"](this, {label: game.i18n.localize("PF1.RapidShot"), rollData: rollData, primaryAttack: primaryAttack});\n            await rapidShotAttack.addAttack({bonus: atk.bonus, extraParts: attackExtraParts});\n\n            // Add damage\n            if (this.hasDamage) {\n              await rapidShotAttack.addDamage({extraParts: damageExtraParts, critical: false});\n  \n              // Add critical hit damage\n              if (rapidShotAttack.hasCritConfirm) {\n                await rapidShotAttack.addDamage({extraParts: damageExtraParts, critical: true});\n              }\n            }\n  \n            // Add effect notes\n            rapidShotAttack.addEffectNotes();\n            \n            attacks.push(rapidShotAttack);\n          }\n        }\n      }\n      // Add damage only\n      else if (this.hasDamage) {\n        let attack = new _misc_chat_attack_js__WEBPACK_IMPORTED_MODULE_5__["ChatAttack"](this, {rollData: rollData, primaryAttack: primaryAttack});\n        // Add damage\n        await attack.addDamage({extraParts: damageExtraParts, critical: false});\n\n        // Add attack notes\n        attack.addAttackNotes();\n\n        // Add effect notes\n        attack.addEffectNotes();\n\n        // Add to list\n        attacks.push(attack);\n      }\n      // Add effect notes only\n      else if (this.hasEffect) {\n        let attack = new _misc_chat_attack_js__WEBPACK_IMPORTED_MODULE_5__["ChatAttack"](this, {rollData: rollData, primaryAttack: primaryAttack});\n\n        // Add attack notes\n        attack.addAttackNotes();\n\n        // Add effect notes\n        attack.addEffectNotes();\n        \n        // Add to list\n        attacks.push(attack);\n      }\n      chatTemplateData.attacks = attacks;\n\n      // Prompt measure template\n      if (useMeasureTemplate) {\n        // Gather data\n        let dist = getProperty(this.data, "data.measureTemplate.size");\n        if (typeof dist === "string") {\n          dist = new Roll(getProperty(this.data, "data.measureTemplate.size"), this.getRollData()).roll().total;\n        }\n        const templateOptions = {\n          type: getProperty(this.data, "data.measureTemplate.type"),\n          distance: dist,\n        };\n        if (getProperty(this.data, "data.measureTemplate.overrideColor")) {\n          templateOptions.color = getProperty(this.data, "data.measureTemplate.customColor");\n        }\n        if (getProperty(this.data, "data.measureTemplate.overrideTexture")) {\n          templateOptions.texture = getProperty(this.data, "data.measureTemplate.customTexture");\n        }\n\n        // Create template\n        const template = _pixi_ability_template_js__WEBPACK_IMPORTED_MODULE_4__["AbilityTemplate"].fromData(templateOptions);\n        if (template) {\n          if (getProperty(this, "actor.sheet.rendered")) this.actor.sheet.minimize();\n          const success = await template.drawPreview(ev);\n          if (!success) {\n            if (getProperty(this, "actor.sheet.rendered")) this.actor.sheet.maximize();\n            return;\n          }\n        }\n      }\n\n      // Deduct charge\n      if (this.autoDeductCharges) {\n        this.addCharges(-this.chargeCost);\n      }\n      \n      // Set chat data\n      let chatData = {\n        speaker: ChatMessage.getSpeaker({actor: this.actor}),\n        rollMode: rollMode,\n        sound: CONFIG.sounds.dice,\n        "flags.pf1.noRollRender": true,\n      };\n\n      // Send spell info\n      const hasAction = this.hasAttack || this.hasDamage || this.hasEffect;\n      if (this.data.type === "spell" && !hasAction) await this.roll({ rollMode: rollMode }, {addDC: hasAction ? false : true});\n\n      // Dice So Nice integration\n      if (game.dice3d != null && game.dice3d.isEnabled()) {\n        let dice3dData = attacks.reduce((obj, a) => {\n          if (a.attack.roll != null)      obj.results.push(a.attack.roll.parts[0].total);\n          if (a.critConfirm.roll != null) obj.results.push(a.critConfirm.roll.parts[0].total);\n          return obj;\n        }, {\n          formula: "",\n          results: [],\n          whisper: [],\n          blind: false,\n        });\n        if (dice3dData.results.length) {\n          dice3dData.formula = `${dice3dData.results.length}d20`;\n          // Handle different roll modes\n          switch (rollMode) {\n            case "gmroll":\n              dice3dData.whisper = game.users.entities.filter(u => u.isGM).map(u => u._id);\n              break;\n            case "selfroll":\n              dice3dData.whisper = [game.user._id];\n              break;\n            case "blindroll":\n              dice3dData.whisper = game.users.entities.filter(u => u.isGM).map(u => u._id);\n              dice3dData.blind = true;\n              break;\n          }\n          // Roll 3D dice\n          chatData.sound = null;\n          await game.dice3d.show(dice3dData);\n        }\n      }\n      \n      // Post message\n      if (hasAction) {\n        // Get extra text and properties\n        let props = [];\n        let extraText = "";\n        if (chatTemplateData.attacks.length > 0) extraText = chatTemplateData.attacks[0].attackNotesHTML;\n\n        const properties = this.getChatData().properties;\n        if (properties.length > 0) props.push({ header: game.i18n.localize("PF1.InfoShort"), value: properties });\n\n        // Get saving throw data\n        const save = getProperty(this.data, "data.save.type");\n        const saveDC = this.dc;\n\n        const templateData = mergeObject(chatTemplateData, {\n          extraText: extraText,\n          hasExtraText: extraText.length > 0,\n          properties: props,\n          hasProperties: props.length > 0,\n          item: this.data,\n          actor: this.actor.data,\n          save: {\n            hasSave: typeof save === "string" && save.length > 0,\n            dc: saveDC,\n            type: save,\n            label: game.i18n.localize("PF1.SavingThrowButtonLabel").format(CONFIG.PF1.savingThrows[save], saveDC.toString()),\n          },\n        }, { inplace: false });\n        // Spell failure\n        if (this.type === "spell" && this.actor != null && this.actor.spellFailure > 0) {\n          const spellbook = getProperty(this.actor.data, `data.attributes.spells.spellbooks.${this.data.data.spellbook}`);\n          if (spellbook && spellbook.arcaneSpellFailure) {\n            templateData.spellFailure = new Roll("1d100").roll().total;\n            templateData.spellFailureSuccess = templateData.spellFailure > this.actor.spellFailure;\n          }\n        }\n        // Create message\n        await Object(_chat_js__WEBPACK_IMPORTED_MODULE_1__["createCustomChatMessage"])("systems/pf1/templates/chat/attack-roll.html", templateData, chatData);\n      }\n    };\n\n    // Handle fast-forwarding\n    if (skipDialog || (ev instanceof MouseEvent && (ev.shiftKey || ev.button === 2))) return _roll.call(this, true);\n\n    // Render modal dialog\n    let template = "systems/pf1/templates/apps/attack-roll-dialog.html";\n    let dialogData = {\n      data: rollData,\n      item: this.data.data,\n      rollMode: game.settings.get("core", "rollMode"),\n      rollModes: CONFIG.Dice.rollModes,\n      hasAttack: this.hasAttack,\n      hasDamage: this.hasDamage,\n      hasDamageAbility: getProperty(this.data, "data.ability.damage") !== "",\n      isNaturalAttack: getProperty(this.data, "data.attackType") === "natural",\n      isWeaponAttack: getProperty(this.data, "data.attackType") === "weapon",\n      hasTemplate: this.hasTemplate,\n    };\n    const html = await renderTemplate(template, dialogData);\n\n    let roll;\n    const buttons = {};\n    if (this.hasAttack) {\n      if (this.type !== "spell") {\n        buttons.normal = {\n          label: game.i18n.localize("PF1.SingleAttack"),\n          callback: html => roll = _roll.call(this, false, html)\n        };\n      }\n      if ((getProperty(this.data, "data.attackParts") || []).length || this.type === "spell") {\n        buttons.multi = {\n          label: this.type === "spell" ? game.i18n.localize("PF1.Cast") : game.i18n.localize("PF1.FullAttack"),\n          callback: html => roll = _roll.call(this, true, html)\n        };\n      }\n    }\n    else {\n      buttons.normal = {\n        label: this.type === "spell" ? game.i18n.localize("PF1.Cast") : game.i18n.localize("PF1.Use"),\n        callback: html => roll = _roll.call(this, false, html)\n      };\n    }\n    return new Promise(resolve => {\n      new Dialog({\n        title: `${game.i18n.localize("PF1.Use")}: ${this.name}`,\n        content: html,\n        buttons: buttons,\n        default: buttons.multi != null ? "multi" : "normal",\n        close: html => {\n          resolve(rolled ? roll : false);\n        }\n      }).render(true);\n    });\n  }\n\n  /**\n   * Place an attack roll using an item (weapon, feat, spell, or equipment)\n   * Rely upon the DicePF.d20Roll logic for the core implementation\n   */\n  rollAttack({data=null, extraParts=[], bonus=null, primaryAttack=true}={}) {\n    const itemData = this.data.data;\n    const rollData = mergeObject(this.getRollData(), data || {});\n\n    // Determine size bonus\n    rollData.sizeBonus = CONFIG.PF1.sizeMods[rollData.traits.size];\n    // Add misc bonuses/penalties\n    rollData.item.proficiencyPenalty = -4;\n\n    // Determine ability score modifier\n    let abl = itemData.ability.attack;\n\n    // Define Roll parts\n    let parts = [];\n    // Add ability modifier\n    if (abl != "" && rollData.abilities[abl] != null && rollData.abilities[abl].mod !== 0) parts.push(`@abilities.${abl}.mod`);\n    // Add bonus parts\n    parts = parts.concat(extraParts);\n    // Add size bonus\n    if (rollData.sizeBonus !== 0) parts.push("@sizeBonus");\n    // Add attack bonus\n    if (itemData.attackBonus !== "") {\n      let attackBonus = new Roll(itemData.attackBonus, rollData).roll().total;\n      rollData.item.attackBonus = attackBonus.toString();\n      parts.push("@item.attackBonus");\n    }\n\n    // Add certain attack bonuses\n    if (rollData.attributes.attack.general !== 0) {\n      parts.push("@attributes.attack.general");\n    }\n    if (["mwak", "msak"].includes(itemData.actionType) && rollData.attributes.attack.melee !== 0) {\n      parts.push("@attributes.attack.melee");\n    }\n    else if (["rwak", "rsak"].includes(itemData.actionType) && rollData.attributes.attack.ranged !== 0) {\n      parts.push("@attributes.attack.ranged");\n    }\n    // Add BAB\n    if (rollData.attributes.bab.total !== 0 && rollData.attributes.bab.total != null) {\n      parts.push("@attributes.bab.total");\n    }\n    // Add item\'s enhancement bonus\n    if (rollData.item.enh !== 0 && rollData.item.enh != null) {\n      parts.push("@item.enh");\n    }\n    // Subtract energy drain\n    if (rollData.attributes.energyDrain != null && rollData.attributes.energyDrain !== 0) {\n      parts.push("- max(0, abs(@attributes.energyDrain))");\n    }\n    // Add proficiency penalty\n    if ((this.data.type === "attack") && !itemData.proficient) { parts.push("@item.proficiencyPenalty"); }\n    // Add masterwork bonus\n    if (this.data.type === "attack" && itemData.masterwork === true && itemData.enh < 1) {\n      rollData.item.masterworkBonus = 1;\n      parts.push("@item.masterworkBonus");\n    }\n    // Add secondary natural attack penalty\n    if (primaryAttack === false) parts.push("-5");\n    // Add bonus\n    if (bonus != null) {\n      rollData.bonus = bonus;\n      parts.push("@bonus");\n    }\n\n    let roll = new Roll(["1d20"].concat(parts).join("+"), rollData).roll();\n    return roll;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Only roll the item\'s effect.\n   */\n  rollEffect({critical=false, primaryAttack=true}={}) {\n    const rollData = this.getRollData();\n\n    if (!this.hasEffect) {\n      throw new Error("You may not make an Effect Roll with this Item.");\n    }\n\n    // Determine critical multiplier\n    rollData.critMult = 1;\n    if (critical) rollData.critMult = this.data.data.ability.critMult;\n    // Determine ability multiplier\n    if (this.data.data.ability.damageMult != null) rollData.ablMult = this.data.data.ability.damageMult;\n    if (primaryAttack === false && rollData.ablMult > 0) rollData.ablMult = 0.5;\n\n    // Create effect string\n    let effectNotes = this.actor.getContextNotes("attacks.effect").reduce((cur, o) => {\n      o.notes.reduce((cur2, n) => {\n        cur2.push(...n.split(/[\\n\\r]+/));\n        return cur2;\n      }, []).forEach(n => {\n        cur.push(n);\n      });\n      return cur;\n    }, []);\n    effectNotes.push(...(this.data.data.effectNotes || "").split(/[\\n\\r]+/));\n    let effectContent = "";\n    for (let fx of effectNotes) {\n      if (fx.length > 0) {\n        effectContent += `<span class="tag">${fx}</span>`;\n      }\n    }\n\n    if (effectContent.length === 0) return "";\n\n    const inner = TextEditor.enrichHTML(effectContent, { rollData: rollData });\n    return `<div class="flexcol property-group"><label>${game.i18n.localize("PF1.EffectNotes")}</label><div class="flexrow">${inner}</div></div>`;\n  }\n\n  /**\n   * Place an attack roll using an item (weapon, feat, spell, or equipment)\n   * Rely upon the DicePF.d20Roll logic for the core implementation\n   */\n  async rollFormula(options={}) {\n    const itemData = this.data.data;\n    if ( !itemData.formula ) {\n      throw new Error(game.i18n.localize("PF1.ErrorNoFormula").format(this.name));\n    }\n\n    // Define Roll Data\n    const rollData = this.actor.getRollData();\n    rollData.item = itemData;\n    const title = `${this.name} - ${game.i18n.localize("PF1.OtherFormula")}`;\n\n    const roll = new Roll(itemData.formula, rollData).roll();\n    return roll.toMessage({\n      speaker: ChatMessage.getSpeaker({actor: this.actor}),\n      flavor: itemData.chatFlavor || title,\n      rollMode: game.settings.get("core", "rollMode")\n    });\n  }\n\n  /**\n   * Place a damage roll using an item (weapon, feat, spell, or equipment)\n   * Rely upon the DicePF.damageRoll logic for the core implementation\n   */\n  rollDamage({data=null, critical=false, extraParts=[]}={}) {\n    const rollData = mergeObject(this.getRollData(), data || {});\n\n    if (!this.hasDamage) {\n      throw new Error("You may not make a Damage Roll with this Item.");\n    }\n\n    // Define Roll parts\n    let parts = this.data.data.damage.parts.map(p => { return { base: p[0], extra: [], damageType: p[1] }; });\n    parts[0].base = Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["alterRoll"])(parts[0].base, 0, rollData.critMult);\n    // Add critical damage parts\n    if (critical === true && getProperty(this.data, "data.damage.critParts") != null) {\n      parts = parts.concat(this.data.data.damage.critParts.map(p => { return { base: p[0], extra: [], damageType: p[1] }; }));\n    }\n\n    // Determine ability score modifier\n    let abl = this.data.data.ability.damage;\n    if (typeof abl === "string" && abl !== "") {\n      rollData.ablDamage = Math.floor(rollData.abilities[abl].mod * rollData.ablMult);\n      if (rollData.abilities[abl].mod < 0) rollData.ablDamage = rollData.abilities[abl].mod;\n      if (rollData.ablDamage < 0) parts[0].extra.push("@ablDamage");\n      else if (critical === true) parts[0].extra.push("@ablDamage * @critMult");\n      else if (rollData.ablDamage !== 0) parts[0].extra.push("@ablDamage");\n    }\n    // Add enhancement bonus\n    if (rollData.item.enh != null && rollData.item.enh !== 0 && rollData.item.enh != null) {\n      if (critical === true) parts[0].extra.push("@item.enh * @critMult");\n      else parts[0].extra.push("@item.enh");\n    }\n\n    // Add general damage\n    if (rollData.attributes.damage.general !== 0) {\n      if (critical === true) parts[0].extra.push("@attributes.damage.general * @critMult");\n      else parts[0].extra.push("@attributes.damage.general");\n    }\n    // Add melee or spell damage\n    if (rollData.attributes.damage.weapon !== 0 && ["mwak", "rwak"].includes(this.data.data.actionType)) {\n      if (critical === true) parts[0].extra.push("@attributes.damage.weapon * @critMult");\n      else parts[0].extra.push("@attributes.damage.weapon");\n    }\n    else if (rollData.attributes.damage.spell !== 0 && ["msak", "rsak", "spellsave"].includes(this.data.data.actionType)) {\n      if (critical === true) parts[0].extra.push("@attributes.damage.spell * @critMult");\n      else parts[0].extra.push("@attributes.damage.spell");\n    }\n\n    // Create roll\n    let rolls = [];\n    for (let a = 0; a < parts.length; a++) {\n      const part = parts[a];\n      let rollParts = [];\n      if (a === 0) rollParts = [...part.extra, ...extraParts];\n      const roll = {\n        roll: new Roll([part.base, ...rollParts].join("+"), rollData).roll(),\n        damageType: part.damageType,\n      };\n      rolls.push(roll);\n    }\n\n    return rolls;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Adjust a cantrip damage formula to scale it for higher level characters and monsters\n   * @private\n   */\n  _scaleCantripDamage(parts, level, scale) {\n    const add = Math.floor((level + 1) / 6);\n    if ( add === 0 ) return;\n    if ( scale && (scale !== parts[0]) ) {\n      parts[0] = parts[0] + " + " + scale.replace(new RegExp(Roll.diceRgx, "g"), (match, nd, d) => `${add}d${d}`);\n    } else {\n      parts[0] = parts[0].replace(new RegExp(Roll.diceRgx, "g"), (match, nd, d) => `${parseInt(nd)+add}d${d}`);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Use a consumable item\n   */\n  async useConsumable(options={}) {\n    let itemData = this.data.data;\n    let parts = itemData.damage.parts;\n    const data = this.getRollData();\n\n    // Add effect string\n    let effectStr = "";\n    if (typeof itemData.effectNotes === "string" && itemData.effectNotes.length) {\n      effectStr = _dice_js__WEBPACK_IMPORTED_MODULE_0__["DicePF"].messageRoll({\n        data: data,\n        msgStr: itemData.effectNotes\n      });\n    }\n\n    parts = parts.map(obj => {\n      return obj[0];\n    });\n    // Submit the roll to chat\n    if (effectStr === "") {\n      new Roll(parts.join("+")).toMessage({\n        speaker: ChatMessage.getSpeaker({ actor: this.actor }),\n        flavor: game.i18n.localize("PF1.UsesItem").format(this.name)\n      });\n    }\n    else {\n      const chatTemplate = "systems/pf1/templates/chat/roll-ext.html";\n      const chatTemplateData = { hasExtraText: true, extraText: effectStr };\n      // Execute the roll\n      let roll = new Roll(parts.join("+"), data).roll();\n\n      // Create roll template data\n      const rollData = mergeObject({\n        user: game.user._id,\n        formula: roll.formula,\n        tooltip: await roll.getTooltip(),\n        total: roll.total,\n      }, chatTemplateData || {});\n\n      // Create chat data\n      let chatData = {\n        user: game.user._id,\n        type: CONST.CHAT_MESSAGE_TYPES.CHAT,\n        rollMode: game.settings.get("core", "rollMode"),\n        sound: CONFIG.sounds.dice,\n        speaker: ChatMessage.getSpeaker({ actor: this.actor }),\n        flavor: game.i18n.localize("PF1.UsesItem").format(this.name),\n        rollMode: game.settings.get("core", "rollMode"),\n        roll: roll,\n        content: await renderTemplate(chatTemplate, rollData),\n      };\n      // Handle different roll modes\n      switch (chatData.rollMode) {\n        case "gmroll":\n          chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n          break;\n        case "selfroll":\n          chatData["whisper"] = [game.user._id];\n          break;\n        case "blindroll":\n          chatData["whisper"] = game.users.entities.filter(u => u.isGM).map(u => u._id);\n          chatData["blind"] = true;\n      }\n\n      // Send message\n      ChatMessage.create(chatData);\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * @returns {Object} An object with data to be used in rolls in relation to this item.\n   */\n  getRollData() {\n    const result = this.actor != null ? this.actor.getRollData() : {};\n    result.item = duplicate(this.data.data);\n\n    if (this.type === "spell" && this.actor != null) {\n      const spellbook = this.spellbook;\n      const spellAbility = spellbook.ability;\n      let ablMod = "";\n      if (spellAbility !== "") ablMod = getProperty(this.actor.data, `data.abilities.${spellAbility}.mod`);\n\n      result.cl = this.casterLevel || 0;\n      result.sl = this.spellLevel  || 0;\n      result.ablMod = ablMod;\n    }\n    if (this.type === "buff") result.item.level = this.data.data.level;\n\n    return result;\n  }\n\n  /* -------------------------------------------- */\n\n  static chatListeners(html) {\n    html.on(\'click\', \'.card-buttons button\', this._onChatCardButton.bind(this));\n    html.on(\'click\', \'.item-name\', this._onChatCardToggleContent.bind(this));\n  }\n\n  /* -------------------------------------------- */\n\n  static async _onChatCardButton(event) {\n    event.preventDefault();\n\n    // Extract card data\n    const button = event.currentTarget;\n    button.disabled = true;\n    const card = button.closest(".chat-card");\n    const messageId = card.closest(".message").dataset.messageId;\n    const message =  game.messages.get(messageId);\n    const action = button.dataset.action;\n\n    // Validate permission to proceed with the roll\n    let isTargetted = ["save", "applyDamage"].includes(action);\n    if ( !( isTargetted || game.user.isGM || message.isAuthor ) ) return;\n\n    // Get the Actor from a synthetic Token\n    const actor = this._getChatCardActor(card);\n    if ( !actor ) return;\n\n    // Get the Item\n    const item = actor.getOwnedItem(card.dataset.itemId);\n\n    // Perform action\n    await this._onChatCardAction(action, {button: button, item: item});\n\n    // Re-enable the button\n    button.disabled = false;\n  }\n\n  static async _onChatCardAction(action, {button=null, item=null}={}) {\n    // Get card targets\n    // const targets = isTargetted ? this._getChatCardTargets(card) : [];\n\n    // Consumable usage\n    if (action === "consume") await item.useConsumable({event});\n    // Apply damage\n    else if (action === "applyDamage") {\n      const value = button.dataset.value;\n      if (!isNaN(parseInt(value))) _actor_entity_js__WEBPACK_IMPORTED_MODULE_3__["ActorPF"].applyDamage(parseInt(value));\n    }\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle toggling the visibility of chat card content when the name is clicked\n   * @param {Event} event   The originating click event\n   * @private\n   */\n  static _onChatCardToggleContent(event) {\n    event.preventDefault();\n    const header = event.currentTarget;\n    const card = header.closest(".chat-card");\n    const content = card.querySelector(".card-content");\n    content.style.display = content.style.display === "none" ? "block" : "none";\n  }\n\n  /**\n   * Get the Actor which is the author of a chat card\n   * @param {HTMLElement} card    The chat card being used\n   * @return {Actor|null}         The Actor entity or null\n   * @private\n   */\n  static _getChatCardActor(card) {\n\n    // Case 1 - a synthetic actor from a Token\n    const tokenKey = card.dataset.tokenId;\n    if (tokenKey) {\n      const [sceneId, tokenId] = tokenKey.split(".");\n      const scene = game.scenes.get(sceneId);\n      if (!scene) return null;\n      const tokenData = scene.getEmbeddedEntity("Token", tokenId);\n      if (!tokenData) return null;\n      const token = new Token(tokenData);\n      return token.actor;\n    }\n\n    // Case 2 - use Actor ID directory\n    const actorId = card.dataset.actorId;\n    return game.actors.get(actorId) || null;\n  }\n\n  /**\n   * Updates the spell\'s description.\n   */\n\n  async _updateSpellDescription(updateData, srcData) {\n    const reSplit = CONFIG.PF1.re.traitSeparator;\n\n    const label = {\n      school: (CONFIG.PF1.spellSchools[getProperty(srcData, "data.school")] || "").toLowerCase(),\n      subschool: (getProperty(srcData, "data.subschool") || ""),\n      types: "",\n    };\n    const data = {\n      data: mergeObject(this.data.data, srcData.data, { inplace: false }),\n      label: label,\n    };\n\n    // Set subschool and types label\n    const types = getProperty(srcData, "data.types");\n    if (typeof types === "string" && types.length > 0) {\n      label.types = types.split(reSplit).join(", ");\n    }\n    // Set information about when the spell is learned\n    data.learnedAt = {};\n    data.learnedAt.class = (getProperty(srcData, "data.learnedAt.class") || []).map(o => {\n      return `${o[0]} ${o[1]}`;\n    }).sort().join(", ");\n    data.learnedAt.domain = (getProperty(srcData, "data.learnedAt.domain") || []).map(o => {\n      return `${o[0]} ${o[1]}`;\n    }).sort().join(", ");\n    data.learnedAt.subDomain = (getProperty(srcData, "data.learnedAt.subDomain") || []).map(o => {\n      return `${o[0]} ${o[1]}`;\n    }).sort().join(", ");\n    data.learnedAt.elementalSchool = (getProperty(srcData, "data.learnedAt.elementalSchool") || []).map(o => {\n      return `${o[0]} ${o[1]}`;\n    }).sort().join(", ");\n    data.learnedAt.bloodline = (getProperty(srcData, "data.learnedAt.bloodline") || []).map(o => {\n      return `${o[0]} ${o[1]}`;\n    }).sort().join(", ");\n\n    // Set casting time label\n    if (getProperty(srcData, "data.activation")) {\n      const activationCost = getProperty(srcData, "data.activation.cost");\n      const activationType = getProperty(srcData, "data.activation.type");\n\n      if (activationType) {\n        if (CONFIG.PF1.abilityActivationTypesPlurals[activationType] != null) {\n          if (activationCost === 1) label.castingTime = `${CONFIG.PF1.abilityActivationTypes[activationType]}`;\n          else label.castingTime = `${CONFIG.PF1.abilityActivationTypesPlurals[activationType]}`;\n        }\n        else label.castingTime = `${CONFIG.PF1.abilityActivationTypes[activationType]}`;\n      }\n      if (!Number.isNaN(activationCost) && label.castingTime != null) label.castingTime = `${activationCost} ${label.castingTime}`;\n      if (label.castingTime) label.castingTime = label.castingTime.toLowerCase();\n    }\n\n    // Set components label\n    let components = [];\n    for (let [key, value] of Object.entries(getProperty(srcData, "data.components"))) {\n      if (key === "value" && value.length > 0) components.push(...value.split(reSplit));\n      else if (key === "verbal" && value) components.push("V");\n      else if (key === "somatic" && value) components.push("S");\n      else if (key === "material" && value) components.push("M");\n      else if (key === "focus" && value) components.push("F");\n    }\n    if (getProperty(srcData, "data.components.divineFocus") === 1) components.push("DF");\n    const df = getProperty(srcData, "data.components.divineFocus");\n    // Sort components\n    const componentsOrder = ["V", "S", "M", "F", "DF"];\n    components.sort((a, b) => {\n      let index = [componentsOrder.indexOf(a), components.indexOf(b)];\n      if (index[0] === -1 && index[1] === -1) return 0;\n      if (index[0] === -1 && index[1] >= 0) return 1;\n      if (index[0] >= 0 && index[1] === -1) return -1;\n      return index[0] - index[1];\n    });\n    components = components.map(o => {\n      if (o === "M") {\n        if (df === 2) o = "M/DF";\n        if (getProperty(srcData, "data.materials.value")) o = `${o} (${getProperty(srcData, "data.materials.value")})`;\n      }\n      if (o === "F") {\n        if (df === 3) o = "F/DF";\n        if (getProperty(srcData, "data.materials.focus")) o = `${o} (${getProperty(srcData, "data.materials.focus")})`;\n      }\n      return o;\n    });\n    if (components.length > 0) label.components = components.join(", ");\n\n    // Set duration label\n    {\n      const duration = getProperty(srcData, "data.spellDuration");\n      if (duration) label.duration = duration;\n    }\n    // Set effect label\n    {\n      const effect = getProperty(srcData, "data.spellEffect");\n      if (effect) label.effect = effect;\n    }\n    // Set targets label\n    {\n      const targets = getProperty(srcData, "data.target.value");\n      if (targets) label.targets = targets;\n    }\n    // Set range label\n    {\n      const rangeUnit = getProperty(srcData, "data.range.units");\n      const rangeValue = getProperty(srcData, "data.range.value");\n\n      if (rangeUnit != null && rangeUnit !== "none") {\n        label.range = (CONFIG.PF1.distanceUnits[rangeUnit] || "").toLowerCase();\n        if (rangeUnit === "close") label.range = `${label.range} (25 ft. + 5 ft./2 levels)`;\n        else if (rangeUnit === "medium") label.range = `${label.range} (100 ft. + 10 ft./level)`;\n        else if (rangeUnit === "long") label.range = `${label.range} (400 ft. + 40 ft./level)`;\n        else if (["ft", "mi"].includes(rangeUnit)) {\n          if (!rangeValue) label.range = "";\n          else label.range = `${rangeValue} ${label.range}`;\n        }\n      }\n    }\n    // Set area label\n    {\n      const area = getProperty(srcData, "data.spellArea");\n\n      if (area) label.area = area;\n    }\n\n    // Set DC and SR\n    {\n      const savingThrowDescription = getProperty(srcData, "data.save.description");\n      if (savingThrowDescription) label.savingThrow = savingThrowDescription;\n      else label.savingThrow = "none";\n\n      const sr = getProperty(srcData, "data.sr");\n      label.sr = (sr === true ? game.i18n.localize("PF1.Yes") : game.i18n.localize("PF1.No")).toLowerCase();\n\n      if (getProperty(srcData, "data.range.units") !== "personal") data.useDCandSR = true;\n    }\n\n    Object(_lib_js__WEBPACK_IMPORTED_MODULE_2__["linkData"])(srcData, updateData, "data.description.value", await renderTemplate("systems/pf1/templates/internal/spell-description.html", data));\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the Actor which is the author of a chat card\n   * @param {HTMLElement} card    The chat card being used\n   * @return {Array.<Actor>}      The Actor entity or null\n   * @private\n   */\n  static _getChatCardTargets(card) {\n    const character = game.user.character;\n    const controlled = canvas.tokens.controlled;\n    const targets = controlled.reduce((arr, t) => t.actor ? arr.concat([t.actor]) : arr, []);\n    if ( character && (controlled.length === 0) ) targets.push(character);\n    if ( !targets.length ) throw new Error(`You must designate a specific Token as the roll target`);\n    return targets;\n  }\n\n  async addSpellUses(value, data=null) {\n    if (!this.actor) return;\n    if (this.data.data.atWill) return;\n    if (this.data.data.level === 0) return;\n\n    const spellbook = getProperty(this.actor.data, `data.attributes.spells.spellbooks.${this.data.data.spellbook}`),\n      isSpontaneous = spellbook.spontaneous,\n      spellbookKey = getProperty(this.data, "data.spellbook") || "primary",\n      spellLevel = getProperty(this.data, "data.level");\n    const newCharges = isSpontaneous\n      ? Math.max(0, (getProperty(spellbook, `spells.spell${spellLevel}.value`) || 0) + value)\n      : Math.max(0, (getProperty(this.data, "data.preparation.preparedAmount") || 0) + value);\n\n    if (!isSpontaneous) {\n      const key = "data.preparation.preparedAmount";\n      if (data == null) {\n        data = {};\n        data[key] = newCharges;\n        return this.update(data);\n      }\n      else {\n        data[key] = newCharges;\n      }\n    }\n    else {\n      const key = `data.attributes.spells.spellbooks.${spellbookKey}.spells.spell${spellLevel}.value`;\n      const actorUpdateData = {};\n      actorUpdateData[key] = newCharges;\n      return this.actor.update(actorUpdateData);\n    }\n\n    return null;\n  }\n\n  getSpellUses() {\n    if (!this.actor) return 0;\n    if (this.data.data.atWill) return Number.POSITIVE_INFINITY;\n\n    const spellbook = getProperty(this.actor.data, `data.attributes.spells.spellbooks.${this.data.data.spellbook}`),\n      isSpontaneous = spellbook.spontaneous,\n      spellLevel = getProperty(this.data, "data.level");\n    \n    if (isSpontaneous) {\n      if (getProperty(this.data, "data.preparation.spontaneousPrepared") === true) {\n        return getProperty(spellbook, `spells.spell${spellLevel}.value`) || 0;\n      }\n    }\n    else {\n      return getProperty(this.data, "data.preparation.preparedAmount") || 0;\n    }\n    return 0;\n  }\n\n  static async toConsumable(origData, type) {\n    let data = duplicate(game.system.template.Item.consumable);\n    for (let t of data.templates) {\n      mergeObject(data, duplicate(game.system.template.Item.templates[t]));\n    }\n    delete data.templates;\n    data = {\n      type: "consumable",\n      name: origData.name,\n      data: data,\n    };\n\n    const slcl = this.getMinimumCasterLevelBySpellData(origData.data);\n\n    // Set consumable type\n    data.data.consumableType = type;\n\n    // Set name\n    if (type === "wand") {\n      data.name = `Wand of ${origData.name}`;\n      data.img = "systems/pf1/icons/items/inventory/wand-star.jpg";\n      data.data.price = slcl[0] * slcl[1] * 750;\n      data.data.hardness = 5;\n      data.data.hp.max = 5;\n      data.data.hp.value = 5;\n    }\n    else if (type === "potion") {\n      data.name = `Potion of ${origData.name}`;\n      data.img = "systems/pf1/icons/items/potions/minor-blue.jpg";\n      data.data.price = slcl[0] * slcl[1] * 50;\n      data.data.hardness = 1;\n      data.data.hp.max = 1;\n      data.data.hp.value = 1;\n    }\n    else if (type === "scroll") {\n      data.name = `Scroll of ${origData.name}`;\n      data.img = "systems/pf1/icons/items/inventory/scroll-magic.jpg";\n      data.data.price = slcl[0] * slcl[1] * 25;\n      data.data.hardness = 0;\n      data.data.hp.max = 1;\n      data.data.hp.value = 1;\n    }\n\n    // Set charges\n    if (type === "wand") {\n      data.data.uses.maxFormula = "50";\n      data.data.uses.value      = 50;\n      data.data.uses.max        = 50;\n      data.data.uses.per        = "charges";\n    }\n    else {\n      data.data.uses.per = "single";\n    }\n\n    // Set activation method\n    data.data.activation.type = "standard";\n\n    // Set measure template\n    if (type !== "potion") {\n      data.data.measureTemplate = getProperty(origData, "data.measureTemplate");\n    }\n\n    // Set damage formula\n    data.data.actionType = origData.data.actionType;\n    for (let d of getProperty(origData, "data.damage.parts")) {\n      d[0] = d[0].replace(/@sl/g, slcl[0]);\n      d[0] = d[0].replace(/@cl/g, slcl[1]);\n      data.data.damage.parts.push(d);\n    }\n\n    // Set saves\n    data.data.save.description = origData.data.save.description;\n    data.data.save.dc = 10 + slcl[0] + Math.floor(slcl[0] / 2);\n\n    // Copy variables\n    data.data.attackNotes = origData.data.attackNotes;\n    data.data.effectNotes = origData.data.effectNotes;\n    data.data.attackBonus = origData.data.attackBonus;\n    data.data.critConfirmBonus = origData.data.critConfirmBonus;\n\n    // Determine aura power\n    let auraPower = "faint";\n    for (let a of CONFIG.PF1.magicAuraByLevel.item) {\n      if (a.level <= slcl[1]) auraPower = a.power;\n    }\n    // Determine caster level label\n    let clLabel;\n    if (slcl[1] === 1) clLabel = "1st";\n    else if (slcl[1] === 2) clLabel = "2nd";\n    else if (slcl[1] === 3) clLabel = "3rd";\n    else clLabel = `${slcl[1]}th`;\n    // Determine spell level label\n    let slLabel;\n    if (slcl[0] === 1) slLabel = "1st";\n    else if (slcl[0] === 2) slLabel = "2nd";\n    else if (slcl[0] === 3) slLabel = "3rd";\n    else slLabel = `${slcl[0]}th`;\n\n    // Set description\n    data.data.description.value = await renderTemplate("systems/pf1/templates/internal/consumable-description.html", {\n      origData: origData,\n      data: data,\n      isWand: type === "wand",\n      isPotion: type === "potion",\n      isScroll: type === "scroll",\n      auraPower: auraPower,\n      aura: (CONFIG.PF1.spellSchools[origData.data.school] || "").toLowerCase(),\n      sl: slcl[0],\n      cl: slcl[1],\n      slLabel: slLabel,\n      clLabel: clLabel,\n      config: CONFIG.PF1,\n    });\n\n    return data;\n  }\n\n  /**\n   * @param {object} itemData - A spell item\'s data.\n   * @returns {number[]} An array containing the spell level and caster level.\n   */\n  static getMinimumCasterLevelBySpellData(itemData) {\n    const learnedAt = getProperty(itemData, "learnedAt.class").reduce((cur, o) => {\n      const classes = o[0].split("/");\n      for (let cls of classes) cur.push([cls, o[1]]);\n      return cur;\n    }, []);\n    let result = [9, 20];\n    for (let o of learnedAt) {\n      result[0] = Math.min(result[0], o[1]);\n      \n      const tc = CONFIG.PF1.classCasterType[o[0]] || "high";\n      if (tc === "high") {\n        result[1] = Math.min(result[1], 1 + Math.max(0, (o[1] - 1)) * 2);\n      }\n      else if (tc === "med") {\n        result[1] = Math.min(result[1], 1 + Math.max(0, (o[1] - 1)) * 3);\n      }\n      else if (tc === "low") {\n        result[1] = Math.min(result[1], 4 + Math.max(0, (o[1] - 1)) * 3);\n      }\n    }\n\n    return result;\n  }\n\n  async _onLevelChange(curLevel, newLevel) {\n\n    // let newItems = [];\n    // // Add linked items by minLevel\n    // for (let o of this.links.minLevel) {\n      // if (newLevel > curLevel && newLevel >= o.level) {\n        // const id = o.target.split(".");\n\n        // // Add from compendium\n        // if (id.length === 3) {\n          // const pack = game.packs.get([id[0], id[1]].join("."));\n          // const item = await pack.getEntity(id[2]);\n          // if (item != null) {\n            // newItems.push(item);\n          // }\n        // }\n      // }\n    // }\n\n    // if (this.actor != null) {\n      // if (newItems.length > 0) {\n        // this.actor.createEmbeddedEntity("OwnedItem", newItems);\n      // }\n    // }\n  }\n\n  async getLinkedItems(type) {\n    const items = getProperty(this.data, `data.links.${type}`);\n    if (!items) return [];\n\n    let result = [];\n    for (let l of items) {\n      let item = await this.getLinkItem(l);\n      if (item) result.push(item);\n    }\n\n    return result;\n  }\n\n  async getLinkItem(l) {\n    const id = l.id.split(".");\n\n    // Compendium entry\n    if (l.dataType === "compendium") {\n      const pack = game.packs.get(id.slice(0, 2).join("."));\n      return await pack.getEntity(id[2]);\n    }\n    // World entry\n    else if (l.dataType === "world") {\n      return game.items.get(id[1]);\n    }\n    // Same actor\'s item\n    else if (this.actor != null && this.actor.items != null) {\n      return this.actor.items.find(o => o._id === id[0]);\n    }\n\n    return null;\n  }\n\n  async updateLinkItems() {\n\n    // Update link items\n    const linkGroups = (getProperty(this.data, "data.links") || {});\n    for (let links of Object.values(linkGroups)) {\n      for (let l of links) {\n        const i = await this.getLinkItem(l);\n        if (i == null) continue;\n        l.name = i.name;\n        l.img = i.img;\n      }\n    }\n  }\n\n  _cleanLink(oldLink, linkType) {\n    if (!this.actor) return;\n\n    const otherItem = this.actor.items.find(o => o._id === oldLink.id);\n    if (linkType === "charges" && otherItem && hasProperty(otherItem, "links.charges")) {\n      delete otherItem.links.charges;\n    }\n  }\n\n  /**\n   * Generates lists of change subtargets this item can have.\n   * @param {string} target - The target key, as defined in CONFIG.PF1.buffTargets.\n   * @returns {Object.<string, string>} A list of changes\n   */\n  getChangeSubTargets(target) {\n\n    let result = {};\n    // Add specific skills\n    if (target === "skill") {\n      if (this.actor == null) {\n        for (let [s, skl] of Object.entries(CONFIG.PF1.skills)) {\n          result[`skill.${s}`] = skl;\n        }\n      }\n      else {\n        const actorSkills = this.actor.data.data.skills;\n        for (let [s, skl] of Object.entries(actorSkills)) {\n          if (!skl.subSkills) {\n            if (skl.custom) result[`skill.${s}`] = skl.name;\n            else result[`skill.${s}`] = CONFIG.PF1.skills[s];\n          }\n          else {\n            for (let [s2, skl2] of Object.entries(skl.subSkills)) {\n              result[`skill.${s}.subSkills.${s2}`] = `${CONFIG.PF1.skills[s]} (${skl2.name})`;\n            }\n          }\n        }\n      }\n    }\n    // Add static subtargets\n    else if (hasProperty(CONFIG.PF1.buffTargets, target)) {\n      for (let [k, v] of Object.entries(CONFIG.PF1.buffTargets[target])) {\n        if (!k.startsWith("_")) result[k] = v;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates lists of context note subtargets this item can have.\n   * @param {string} target - The target key, as defined in CONFIG.PF1.buffTargets.\n   * @returns {Object.<string, string>} A list of changes\n   */\n  getContextNoteSubTargets(target) {\n\n    let result = {};\n    // Add specific skills\n    if (target === "skill") {\n      if (this.actor == null) {\n        for (let [s, skl] of Object.entries(CONFIG.PF1.skills)) {\n          result[`skill.${s}`] = skl;\n        }\n      }\n      else {\n        const actorSkills = this.actor.data.data.skills;\n        for (let [s, skl] of Object.entries(actorSkills)) {\n          if (!skl.subSkills) {\n            if (skl.custom) result[`skill.${s}`] = skl.name;\n            else result[`skill.${s}`] = CONFIG.PF1.skills[s];\n          }\n          else {\n            for (let [s2, skl2] of Object.entries(skl.subSkills)) {\n              result[`skill.${s}.subSkills.${s2}`] = `${CONFIG.PF1.skills[s]} (${skl2.name})`;\n            }\n          }\n        }\n      }\n    }\n    // Add static subtargets\n    else if (hasProperty(CONFIG.PF1.contextNoteTargets, target)) {\n      for (let [k, v] of Object.entries(CONFIG.PF1.contextNoteTargets[target])) {\n        if (!k.startsWith("_")) result[k] = v;\n      }\n    }\n\n    return result;\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/item/entity.js?')},"./module/item/sheets/base.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ItemSheetPF", function() { return ItemSheetPF; });\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib.js */ "./module/lib.js");\n/* harmony import */ var _apps_entry_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../apps/entry-selector.js */ "./module/apps/entry-selector.js");\n/* harmony import */ var _entity_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../entity.js */ "./module/item/entity.js");\n\n\n\n\n/**\n * Override and extend the core ItemSheet implementation to handle D&D5E specific item types\n * @type {ItemSheet}\n */\nclass ItemSheetPF extends ItemSheet {\n  constructor(...args) {\n    super(...args);\n\n    this.options.submitOnClose = false;\n\n    /**\n     * Track the set of item filters which are applied\n     * @type {Set}\n     */\n    this._filters = {\n    };\n\n    this.items = [];\n  }\n\n  /* -------------------------------------------- */\n\n  static get defaultOptions() {\n    return mergeObject(super.defaultOptions, {\n      width: 560,\n      height: 600,\n      classes: ["pf1", "sheet", "item"],\n      resizable: false\n    });\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return a dynamic reference to the HTML template path used to render this Item Sheet\n   * @return {string}\n   */\n  get template() {\n    const path = "systems/pf1/templates/items/";\n    return `${path}/${this.item.data.type}.html`;\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Prepare item sheet data\n   * Start with the base item data and extending with additional properties for rendering.\n   */\n  async getData() {\n    const data = super.getData();\n    data.labels = this.item.labels;\n\n    // Include sub-items\n    data.items = [];\n    if (this.item.items != null) {\n      data.items = this.item.items.map(i => {\n        i.data.labels = i.labels;\n        return i.data;\n      });\n    }\n\n    // Include CONFIG values\n    data.config = CONFIG.PF1;\n\n    // Item Type, Status, and Details\n    data.itemType = data.item.type.titleCase();\n    data.itemStatus = this._getItemStatus(data.item);\n    data.itemProperties = this._getItemProperties(data.item);\n    data.itemName = data.item.name;\n    data.isPhysical = data.item.data.hasOwnProperty("quantity");\n    data.isSpell = this.item.type === "spell";\n    data.owner = this.item.actor != null;\n    data.isGM = game.user.isGM;\n    data.showIdentifyDescription = data.isGM && data.isPhysical;\n    data.showUnidentifiedData = this.item.showUnidentifiedData;\n\n    // Unidentified data\n    if (this.item.showUnidentifiedData) {\n      data.itemName = getProperty(this.item.data, "data.unidentified.name") || getProperty(this.item.data, "data.identifiedName") || this.item.name;\n    }\n    else {\n      data.itemName = getProperty(this.item.data, "data.identifiedName") || this.item.name;\n    }\n\n    // Action Details\n    data.hasAttackRoll = this.item.hasAttack;\n    data.isHealing = data.item.data.actionType === "heal";\n\n    data.isCharged = false;\n    if (data.item.data.uses != null) {\n      data.isCharged = ["day", "week", "charges"].includes(data.item.data.uses.per);\n    }\n    if (data.item.data.range != null) {\n      data.canInputRange = ["ft", "mi", "spec"].includes(data.item.data.range.units);\n    }\n    if (data.item.data.duration != null) {\n      data.canInputDuration = !(["", "inst", "perm", "seeText"].includes(data.item.data.duration.units));\n    }\n\n    // Prepare feat specific stuff\n    if (data.item.type === "feat") {\n      data.isClassFeature = getProperty(this.item.data, "data.featType") === "classFeat";\n      data.isTemplate = getProperty(this.item.data, "data.featType") === "template";\n    }\n\n    // Prepare weapon specific stuff\n    if (data.item.type === "weapon") {\n      data.isRanged = (data.item.data.weaponSubtype === "ranged" || data.item.data.properties["thr"] === true);\n\n      // Prepare categories for weapons\n      data.weaponCategories = { types: {}, subTypes: {} };\n      for (let [k, v] of Object.entries(CONFIG.PF1.weaponTypes)) {\n        if (typeof v === "object") data.weaponCategories.types[k] = v._label;\n      }\n      const type = data.item.data.weaponType;\n      if (hasProperty(CONFIG.PF1.weaponTypes, type)) {\n        for (let [k, v] of Object.entries(CONFIG.PF1.weaponTypes[type])) {\n          // Add static targets\n          if (!k.startsWith("_")) data.weaponCategories.subTypes[k] = v;\n        }\n      }\n    }\n\n    // Prepare equipment specific stuff\n    if (data.item.type === "equipment") {\n      // Prepare categories for equipment\n      data.equipmentCategories = { types: {}, subTypes: {} };\n      for (let [k, v] of Object.entries(CONFIG.PF1.equipmentTypes)) {\n        if (typeof v === "object") data.equipmentCategories.types[k] = v._label;\n      }\n      const type = data.item.data.equipmentType;\n      if (hasProperty(CONFIG.PF1.equipmentTypes, type)) {\n        for (let [k, v] of Object.entries(CONFIG.PF1.equipmentTypes[type])) {\n          // Add static targets\n          if (!k.startsWith("_")) data.equipmentCategories.subTypes[k] = v;\n        }\n      }\n\n      // Prepare slots for equipment\n      data.equipmentSlots = CONFIG.PF1.equipmentSlots[type];\n\n      // Whether the equipment should show armor data\n      data.showArmorData = ["armor", "shield"].includes(type);\n\n      // Whether the current equipment type has multiple slots\n      data.hasMultipleSlots = Object.keys(data.equipmentSlots).length > 1;\n    }\n\n    // Prepare attack specific stuff\n    if (data.item.type === "attack") {\n      data.isWeaponAttack = data.item.data.attackType === "weapon";\n      data.isNaturalAttack = data.item.data.attackType === "natural";\n    }\n\n    // Prepare spell specific stuff\n    if (data.item.type === "spell") {\n      let spellbook = null;\n      if (this.actor != null) {\n        spellbook = getProperty(this.actor.data, `data.attributes.spells.spellbooks.${this.item.data.data.spellbook}`);\n      }\n\n      data.isPreparedSpell = spellbook != null ? !spellbook.spontaneous : false;\n      data.isAtWill = data.item.data.atWill;\n      data.spellbooks = {};\n      if (this.item.actor) {\n        data.spellbooks = duplicate(this.item.actor.data.data.attributes.spells.spellbooks);\n      }\n\n      // Enrich description\n      data.description = TextEditor.enrichHTML(data.data.description.value, { rollData: this.item.getRollData() });\n      if (data.data.shortDescription != null) {\n        data.shortDescription = TextEditor.enrichHTML(data.data.shortDescription, { rollData: this.item.getRollData() });\n      }\n    }\n\n    // Prepare class specific stuff\n    if (data.item.type === "class") {\n      for (let [a, s] of Object.entries(data.data.savingThrows)) {\n        s.label = CONFIG.PF1.savingThrows[a];\n      }\n      for (let [a, s] of Object.entries(data.data.fc)) {\n        s.label = CONFIG.PF1.favouredClassBonuses[a];\n      }\n\n      data.isBaseClass = data.data.classType === "base";\n      data.isRacialHD = data.data.classType === "racial";\n\n      if (this.actor != null) {\n        let healthConfig  = game.settings.get("pf1", "healthConfig");\n        data.healthConfig =  data.isRacialHD ? healthConfig.hitdice.Racial : this.actor.data.type === "character" ? healthConfig.hitdice.PC : healthConfig.hitdice.NPC;\n      } else data.healthConfig = {auto: false};\n\n      // Add skill list\n      if (!this.item.actor) {\n        data.skills = Object.entries(CONFIG.PF1.skills).reduce((cur, o) => {\n          cur[o[0]] = { name: o[1], classSkill: getProperty(this.item.data, `data.classSkills.${o[0]}`) === true };\n          return cur;\n        }, {});\n      }\n      else {\n        data.skills = Object.entries(this.item.actor.data.data.skills).reduce((cur, o) => {\n          const key = o[0];\n          const name = CONFIG.PF1.skills[key] != null ? CONFIG.PF1.skills[key] : o[1].name;\n          cur[o[0]] = { name: name, classSkill: getProperty(this.item.data, `data.classSkills.${o[0]}`) === true };\n          return cur;\n        }, {});\n      }\n    }\n\n    // Prepare stuff for items with changes\n    if (data.item.data.changes) {\n      data.changes = { targets: {}, modifiers: CONFIG.PF1.bonusModifiers };\n      for (let [k, v] of Object.entries(CONFIG.PF1.buffTargets)) {\n        if (typeof v === "object") data.changes.targets[k] = v._label;\n      }\n      data.item.data.changes.forEach(item => {\n        item.subTargets = this.item.getChangeSubTargets(item.target);\n      });\n    }\n\n    // Prepare stuff for items with context notes\n    if (data.item.data.contextNotes) {\n      data.contextNotes = { targets: {} };\n      for (let [k, v] of Object.entries(CONFIG.PF1.contextNoteTargets)) {\n        if (typeof v === "object") data.contextNotes.targets[k] = v._label;\n      }\n      data.item.data.contextNotes.forEach(item => {\n        item.subNotes = this.item.getContextNoteSubTargets(item.target);\n      });\n    }\n\n    // Add links\n    await this._prepareLinks(data);\n\n    return data;\n  }\n\n  async _prepareLinks(data) {\n\n    data.links = {\n      list: [],\n    };\n\n    // Add children link type\n    data.links.list.push({\n      id: "children",\n      label: game.i18n.localize("PF1.LinkTypeChildren"),\n      help: game.i18n.localize("PF1.LinkHelpChildren"),\n      items: [],\n    });\n\n    // Add charges link type\n    if (["feat", "consumable", "attack"].includes(this.item.type)) {\n      data.links.list.push({\n        id: "charges",\n        label: game.i18n.localize("PF1.LinkTypeCharges"),\n        help: game.i18n.localize("PF1.LinkHelpCharges"),\n        items: [],\n      });\n    }\n\n    // Post process data\n    for (let l of data.links.list) {\n      const items = getProperty(this.item.data, `data.links.${l.id}`) || [];\n      for (let i of items) {\n        l.items.push(i);\n      }\n    }\n\n    await this.item.updateLinkItems();\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the text item status which is shown beneath the Item type in the top-right corner of the sheet\n   * @return {string}\n   * @private\n   */\n  _getItemStatus(item) {\n    if ( item.type === "spell" ) {\n      const spellbook = this.item.spellbook;\n      if (item.data.preparation.mode === "prepared") {\n        if (item.data.preparation.preparedAmount > 0) {\n          if (spellbook != null && spellbook.spontaneous) {\n            return game.i18n.localize("PF1.SpellPrepPrepared");\n          }\n          else {\n            return game.i18n.localize("PF1.AmountPrepared").format(item.data.preparation.preparedAmount);\n          }\n        }\n        return game.i18n.localize("PF1.Unprepared");\n      }\n      else if (item.data.preparation.mode) {\n        return item.data.preparation.mode.titleCase();\n      }\n      else return "";\n    }\n    else if ( ["weapon", "equipment"].includes(item.type) ) return item.data.equipped ? game.i18n.localize("PF1.Equipped") : game.i18n.localize("PF1.NotEquipped");\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the Array of item properties which are used in the small sidebar of the description tab\n   * @return {Array}\n   * @private\n   */\n  _getItemProperties(item) {\n    const props = [];\n    const labels = this.item.labels;\n\n    if ( item.type === "weapon" ) {\n      props.push(...Object.entries(item.data.properties)\n        .filter(e => e[1] === true)\n        .map(e => CONFIG.PF1.weaponProperties[e[0]]));\n    }\n\n    else if ( item.type === "spell" ) {\n      props.push(\n        labels.components,\n        labels.materials\n      )\n    }\n\n    else if ( item.type === "equipment" ) {\n      props.push(CONFIG.PF1.equipmentTypes[item.data.armor.type]);\n      props.push(labels.armor);\n    }\n\n    else if ( item.type === "feat" ) {\n      props.push(labels.featType);\n    }\n\n    // Action type\n    if ( item.data.actionType ) {\n      props.push(CONFIG.PF1.itemActionTypes[item.data.actionType]);\n    }\n\n    // Action usage\n    if ( (item.type !== "weapon") && item.data.activation && !isObjectEmpty(item.data.activation) ) {\n      props.push(\n        labels.activation,\n        labels.range,\n        labels.target,\n        labels.duration\n      )\n    }\n\n    // Tags\n    if (getProperty(item, "data.tags") != null) {\n      props.push(...getProperty(item, "data.tags").map(o => {\n        return o[0];\n      }));\n    }\n\n    return props.filter(p => !!p);\n  }\n\n  /* -------------------------------------------- */\n\n  setPosition(position={}) {\n    // if ( this._sheetTab === "details" ) position.height = "auto";\n    return super.setPosition(position);\n  }\n\n  /* -------------------------------------------- */\n  /*  Form Submission                             */\n  /* -------------------------------------------- */\n\n  /**\n   * Extend the parent class _updateObject method to ensure that damage ends up in an Array\n   * @private\n   */\n  _updateObject(event, formData) {\n    // Handle Damage Array\n    let damage = Object.entries(formData).filter(e => e[0].startsWith("data.damage.parts"));\n    formData["data.damage.parts"] = damage.reduce((arr, entry) => {\n      let [i, j] = entry[0].split(".").slice(3);\n      if ( !arr[i] ) arr[i] = [];\n      arr[i][j] = entry[1];\n      return arr;\n    }, []);\n\n    // Handle Critical Damage Array\n    let critDamage = Object.entries(formData).filter(e => e[0].startsWith("data.damage.critParts"));\n    formData["data.damage.critParts"] = critDamage.reduce((arr, entry) => {\n      let [i, j] = entry[0].split(".").slice(3);\n      if ( !arr[i] ) arr[i] = [];\n      arr[i][j] = entry[1];\n      return arr;\n    }, []);\n\n    // Handle Attack Array\n    let attacks = Object.entries(formData).filter(e => e[0].startsWith("data.attackParts"));\n    formData["data.attackParts"] = attacks.reduce((arr, entry) => {\n      let [i, j] = entry[0].split(".").slice(2);\n      if ( !arr[i] ) arr[i] = [];\n      arr[i][j] = entry[1];\n      return arr;\n    }, []);\n\n    // Handle change array\n    let change = Object.entries(formData).filter(e => e[0].startsWith("data.changes"));\n    formData["data.changes"] = change.reduce((arr, entry) => {\n      let [i, j] = entry[0].split(".").slice(2);\n      if ( !arr[i] ) arr[i] = _entity_js__WEBPACK_IMPORTED_MODULE_2__["ItemPF"].defaultChange;\n      arr[i][j] = entry[1];\n      // Reset subtarget (if necessary)\n      if (j === "subTarget") {\n        const target = (change.find(o => o[0] === `data.changes.${i}.target`) || [])[1];\n        const subTarget = entry[1];\n        if (typeof target === "string") {\n          const keys = Object.keys(this.item.getChangeSubTargets(target));\n          if (!keys.includes(subTarget)) arr[i][j] = keys[0];\n        }\n      }\n      // Limit priority\n      if (j === "priority") {\n        const prio = Math.max(-1000, Math.min(1000, entry[1]));\n        arr[i][j] = prio;\n      }\n      return arr;\n    }, []);\n\n    // Handle notes array\n    let note = Object.entries(formData).filter(e => e[0].startsWith("data.contextNotes"));\n    formData["data.contextNotes"] = note.reduce((arr, entry) => {\n      let [i, j] = entry[0].split(".").slice(2);\n      if ( !arr[i] ) arr[i] = {};\n      arr[i][j] = entry[1];\n      // Reset subtarget (if necessary)\n      if (j === "subTarget") {\n        const target = (note.find(o => o[0] === `data.contextNotes.${i}.target`) || [])[1];\n        const subTarget = entry[1];\n        if (typeof target === "string") {\n          const keys = Object.keys(this.item.getContextNoteSubTargets(target));\n          if (!keys.includes(subTarget)) arr[i][j] = keys[0];\n        }\n      }\n      // }\n      return arr;\n    }, []);\n\n    // Handle links arrays\n    let links = Object.entries(formData).filter(e => e[0].startsWith("data.links"));\n    for (let e of links) {\n\n      formData[e[0]] = e[1].reduce((arr, entry) => {\n        let [i, j] = entry[0].split(".").slice(2);\n        if ( !arr[i] ) arr[i] = [];\n        arr[i][j] = entry[1];\n        return arr;\n      }, []);\n    }\n\n    // Update the Item\n    super._updateObject(event, formData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Activate listeners for interactive item sheet events\n   */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    // Activate tabs\n    // Only run this if TabsV2 is already available (which is available since FoundryVTT 0.5.2)\n    if (typeof TabsV2 !== "undefined") {\n      const tabGroups = {\n        "primary": {\n          "description": {},\n          "links": {},\n        },\n      };\n      _lib_js__WEBPACK_IMPORTED_MODULE_0__["createTabs"].call(this, html, tabGroups);\n    }\n    // Run older Tabs as a fallback\n    else {\n      new Tabs(html.find(".tabs"), {\n        initial: this["_sheetTab"],\n        callback: clicked => {\n          this._scrollTab = 0;\n          this["_sheetTab"] = clicked.data("tab");\n          this.setPosition();\n        }\n      });\n\n      // Save scroll position\n      html.find(".tab.active")[0].scrollTop = this._scrollTab;\n      html.find(".tab").scroll(ev => this._scrollTab = ev.currentTarget.scrollTop);\n    }\n\n    // Tooltips\n    html.mousemove(ev => this._moveTooltips(ev));\n\n    // Everything below here is only needed if the sheet is editable\n    if (!this.options.editable) return;\n\n    // Trigger form submission from textarea elements.\n    html.find("textarea").change(this._onSubmit.bind(this));\n\n    // Add drop handler to textareas\n    html.find("textarea").on("drop", this._onTextAreaDrop.bind(this));\n\n    // Modify attack formula\n    html.find(".attack-control").click(this._onAttackControl.bind(this));\n\n    // Modify damage formula\n    html.find(".damage-control").click(this._onDamageControl.bind(this));\n\n    // Modify damage formula\n    html.find(".crit-damage-control").click(this._onCritDamageControl.bind(this));\n\n    // Modify buff changes\n    html.find(".change-control").click(this._onBuffControl.bind(this));\n\n    // Modify note changes\n    html.find(".context-note-control").click(this._onNoteControl.bind(this));\n\n    // Create attack\n    if (["weapon"].includes(this.item.data.type)) {\n      html.find("button[name=\'create-attack\']").click(this._createAttack.bind(this));\n    }\n\n    // Listen to field entries\n    html.find(".entry-selector").click(this._onEntrySelector.bind(this));\n\n    // Add drop handler to link tabs\n    html.find(\'div[data-group="links"]\').on("drop", this._onLinksDrop.bind(this));\n\n    html.find(".link-control").click(this._onLinkControl.bind(this));\n\n    // Handle alternative file picker\n    html.find(".file-picker-alt").click(this._onFilePickerAlt.bind(this));\n  }\n\n  /* -------------------------------------------- */\n\n  _moveTooltips(event) {\n    $(event.currentTarget).find(".tooltip:hover .tooltipcontent").css("left", `${event.clientX}px`).css("top", `${event.clientY + 24}px`);\n  }\n\n  _onTextAreaDrop(event) {\n    const elem = event.currentTarget;\n  }\n\n  async _onLinksDrop(event) {\n    const elem = event.currentTarget;\n    const linkType = elem.dataset.tab;\n    \n    // Try to extract the data\n    let data;\n    try {\n      data = JSON.parse(event.originalEvent.dataTransfer.getData(\'text/plain\'));\n      if (data.type !== "Item") return;\n    } catch (err) {\n      return false;\n    }\n\n    let itemData = {};\n    let dataType = "";\n    let itemLink = "";\n\n    // Case 1 - Import from a Compendium pack\n    if (data.pack) {\n      dataType = "compendium";\n      const pack = game.packs.find(p => p.collection === data.pack);\n      const packItem = await pack.getEntity(data.id);\n      if (packItem != null) {\n        itemData = packItem.data;\n        itemLink = `${pack.key}.${packItem._id}`;\n      }\n    }\n\n    // Case 2 - Data explicitly provided\n    else if (data.data) {\n      dataType = "data";\n      itemData = data.data;\n      itemLink = itemData._id;\n    }\n\n    // Case 3 - Import from World entity\n    else {\n      dataType = "world";\n      itemData = game.items.get(data.id).data;\n      itemLink = `world.${data.id}`;\n    }\n\n    if (this.canCreateLink(linkType, dataType, itemData, itemLink, data)) {\n      const updateData = {};\n      let _links = duplicate(getProperty(this.item.data, `data.links.${linkType}`) || []);\n      const link = this.generateInitialLinkData(linkType, dataType, itemData, itemLink);\n      _links.push(link);\n      updateData[`data.links.${linkType}`] = _links;\n\n      // Call link creation hook\n      await this.item.update(updateData);\n      Hooks.call("createItemLink", this.item, link, linkType);\n\n      /**\n       * @TODO This is a really shitty way of re-rendering the actor sheet, so I should change this method at some point,\n       * but the premise is that the actor sheet should show data for newly linked items, and it won\'t do it immediately for some reason\n       */\n      window.setTimeout(() => { if (this.item.actor) this.item.actor.sheet.render(); }, 50);\n    }\n  }\n\n  /**\n   * @param {string} linkType - The type of link.\n   * @param {string} dataType - Either "compendium", "data" or "world".\n   * @param {Object} itemData - The (new) item\'s data.\n   * @param {string} itemLink - The link identifier for the item.\n   * @param {Object} [data] - The raw data from a drop event.\n   * @returns {boolean} Whether a link to the item is possible here.\n   */\n  canCreateLink(linkType, dataType, itemData, itemLink, data=null) {\n    const actor = this.item.actor;\n    const sameActor = actor != null && data != null && data.actorId === actor._id;\n\n    // Don\'t create link to self\n    const itemId = itemLink.split(".").slice(-1)[0];\n    if (itemId === this.item._id) return false;\n\n    // Don\'t create existing links\n    const links = getProperty(this.item.data, `data.links.${linkType}`) || [];\n    if (links.filter(o => o.id === itemLink).length) return false;\n\n    if (["children", "charges"].includes(linkType) && sameActor) return true;\n\n    return false;\n  }\n\n  /**\n   * @param {string} linkType - The type of link.\n   * @param {string} dataType - Either "compendium", "data" or "world".\n   * @param {Object} itemData - The (new) item\'s data.\n   * @param {string} itemLink - The link identifier for the item.\n   * @param {Object} [data] - The raw data from a drop event.\n   * @returns {Array} An array to insert into this item\'s link data.\n   */\n  generateInitialLinkData(linkType, dataType, itemData, itemLink, data=null) {\n\n    return {\n      id: itemLink,\n      dataType: dataType,\n      name: itemData.name,\n      img: itemData.img,\n    };\n  }\n\n  /**\n   * Add or remove a damage part from the damage formula\n   * @param {Event} event     The original click event\n   * @return {Promise}\n   * @private\n   */\n  async _onDamageControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    // Add new damage component\n    if ( a.classList.contains("add-damage") ) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const damage = this.item.data.data.damage;\n      return this.item.update({"data.damage.parts": damage.parts.concat([["", ""]])});\n    }\n\n    // Remove a damage component\n    if ( a.classList.contains("delete-damage") ) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const li = a.closest(".damage-part");\n      const damage = duplicate(this.item.data.data.damage);\n      damage.parts.splice(Number(li.dataset.damagePart), 1);\n      return this.item.update({"data.damage.parts": damage.parts});\n    }\n  }\n\n  async _onCritDamageControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    // Add new damage component\n    if ( a.classList.contains("add-damage") ) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const damage = this.item.data.data.damage;\n      return this.item.update({"data.damage.critParts": damage.critParts.concat([["", ""]])});\n    }\n\n    // Remove a damage component\n    if ( a.classList.contains("delete-damage") ) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const li = a.closest(".damage-part");\n      const damage = duplicate(this.item.data.data.damage);\n      damage.critParts.splice(Number(li.dataset.damagePart), 1);\n      return this.item.update({"data.damage.critParts": damage.critParts});\n    }\n  }\n\n  async _onAttackControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    // Add new attack component\n    if ( a.classList.contains("add-attack") ) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const attackParts = this.item.data.data.attackParts;\n      return this.item.update({"data.attackParts": attackParts.concat([["", ""]])});\n    }\n\n    // Remove an attack component\n    if ( a.classList.contains("delete-attack") ) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const li = a.closest(".attack-part");\n      const attackParts = duplicate(this.item.data.data.attackParts);\n      attackParts.splice(Number(li.dataset.attackPart), 1);\n      return this.item.update({"data.attackParts": attackParts});\n    }\n  }\n\n  async _onBuffControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    // Add new change\n    if (a.classList.contains("add-change")) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const changes = this.item.data.data.changes || [];\n      return this.item.update({"data.changes": changes.concat([_entity_js__WEBPACK_IMPORTED_MODULE_2__["ItemPF"].defaultChange])});\n    }\n\n    // Remove a change\n    if (a.classList.contains("delete-change")) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const li = a.closest(".change");\n      const changes = duplicate(this.item.data.data.changes);\n      changes.splice(Number(li.dataset.change), 1);\n      return this.item.update({"data.changes": changes});\n    }\n  }\n\n  async _onNoteControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    // Add new note\n    if (a.classList.contains("add-note")) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const contextNotes = this.item.data.data.contextNotes || [];\n      return this.item.update({"data.contextNotes": contextNotes.concat([_entity_js__WEBPACK_IMPORTED_MODULE_2__["ItemPF"].defaultContextNote])});\n    }\n\n    // Remove a note\n    if (a.classList.contains("delete-note")) {\n      await this._onSubmit(event);  // Submit any unsaved changes\n      const li = a.closest(".context-note");\n      const contextNotes = duplicate(this.item.data.data.contextNotes);\n      contextNotes.splice(Number(li.dataset.note), 1);\n      return this.item.update({"data.contextNotes": contextNotes});\n    }\n  }\n\n  async _onLinkControl(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    // Delete link\n    if (a.classList.contains("delete-link")) {\n      await this._onSubmit(event);\n      const li = a.closest(".links-item");\n      const group = a.closest(\'div[data-group="links"]\');\n      let links = duplicate(getProperty(this.item.data, `data.links.${group.dataset.tab}`) || []);\n      const link = links.find(o => o.id === li.dataset.link);\n      links = links.filter(o => o !== link);\n\n      const updateData = {};\n      updateData[`data.links.${group.dataset.tab}`] = links;\n\n      // Call hook for deleting a link\n      Hooks.call("deleteItemLink", this.item, link, group.dataset.tab);\n\n      await this.item.update(updateData);\n\n      // Clean link\n      this.item._cleanLink(link, group.dataset.tab);\n      game.socket.emit("system.pf1", { eventType: "cleanItemLink", actorUUID: this.item.actor.uuid, itemUUID: this.item.uuid, link: link, linkType: group.dataset.tab });\n    }\n  }\n\n  async _onFilePickerAlt(event) {\n    const button = event.currentTarget;\n    const attr = button.dataset.for;\n    const current = getProperty(this.item.data, attr);\n    const form = button.form;\n    const targetField = form[attr];\n    if (!targetField) return;\n\n    const fp = new FilePicker({\n      type: button.dataset.type,\n      current: current,\n      callback: path => {\n        targetField.value = path;\n        if (this.options.submitOnChange) {\n          this._onSubmit(event);\n        }\n      },\n      top: this.position.top + 40,\n      left: this.position.left + 10,\n    });\n    fp.browse(current);\n  }\n\n  async _createAttack(event) {\n    if (this.item.actor == null) throw new Error(game.i18n.localize("PF1.ErrorItemNoOwner"));\n\n    await this._onSubmit(event);\n\n    await this.item.actor.createAttackFromWeapon(this.item);\n  }\n\n  _onEntrySelector(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n    const options = {\n      name: a.getAttribute("for"),\n      title: a.innerText,\n      fields: a.dataset.fields,\n      dtypes: a.dataset.dtypes,\n    };\n    new _apps_entry_selector_js__WEBPACK_IMPORTED_MODULE_1__["EntrySelector"](this.item, options).render(true);\n  }\n\n  async saveMCEContent(updateData=null) {\n    let manualUpdate = false;\n    if (updateData == null) {\n      manualUpdate = true;\n      updateData = {};\n    }\n\n    for (const [key, editor] of Object.entries(this.editors)) {\n      if (editor.mce == null) continue;\n\n      updateData[key] = editor.mce.getContent();\n    }\n\n    if (manualUpdate && Object.keys(updateData).length > 0) await this.item.update(updateData);\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/item/sheets/base.js?')},"./module/lib.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTag", function() { return createTag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alterRoll", function() { return alterRoll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTabs", function() { return createTabs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unpackVersion", function() { return unpackVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMinimumCoreVersion", function() { return isMinimumCoreVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "degtorad", function() { return degtorad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "radtodeg", function() { return radtodeg; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linkData", function() { return linkData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getItemOwner", function() { return getItemOwner; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CR", function() { return CR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sizeDie", function() { return sizeDie; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalDie", function() { return normalDie; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sizeRoll", function() { return sizeRoll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalRoll", function() { return normalRoll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getActorFromId", function() { return getActorFromId; });\n/* harmony import */ var _misc_list_tabs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./misc/list-tabs.js */ "./module/misc/list-tabs.js");\n\n\n/**\n * Creates a tag from a string.\n * For example, if you input the string "Wizard of Oz 2", you will get "wizardOfOz2"\n */\nconst createTag = function(str) {\n  if (str.length === 0) str = "tag";\n  return str.replace(/[^a-zA-Z0-9\\s]/g, "").split(/\\s+/).map((s, a) => {\n    s = s.toLowerCase();\n    if (a > 0) s = s.substring(0, 1).toUpperCase() + s.substring(1);\n    return s;\n  }).join("");\n};\n\n/**\n * Alters a roll in string form.\n */\nconst alterRoll = function(str, add, multiply) {\n  const rgx = new RegExp(Die.rgx.die, "g");\n  if (str.match(/^([0-9]+)d([0-9]+)/)) {\n    return str.replace(rgx, (match, nd, d, mods) => {\n      nd = (nd * (multiply || 1)) + (add || 0);\n      mods = mods || "";\n      return ((nd == null || Number.isNaN(nd)) ? "" : nd) + "d" + d + mods;\n    });\n  }\n  return str;\n};\n\n/**\n * Creates tabs for a sheet object\n */\nconst createTabs = function(html, tabGroups) {\n  // Create recursive activation/callback function\n  const _recursiveActivate = function(rtabs, tabName=null) {\n    if (tabName == null) this._initialTab[rtabs.group] = rtabs.active;\n    else {\n      rtabs.activate(tabName);\n      this._initialTab[rtabs.group] = tabName;\n    }\n\n    // Scroll to previous position\n    let scrollElems = html.find(`.scroll-${rtabs.group}`);\n    if (scrollElems.length === 0) scrollElems = html.find(`.tab[data-group="${rtabs.group}"]`);\n    for (let o of scrollElems) { o.scrollTop = this._scrollTab[rtabs.group]; }\n\n    // Recursively activate tabs\n    for (let subTab of rtabs.subTabs) {\n      _recursiveActivate.call(this, subTab, subTab.active);\n    }\n  };\n\n  // Create all tabs\n  const _func = function(group, children) {\n    if (html.find(`nav[data-group="${group}"]`).length === 0) return null;\n\n    if (this._initialTab == null) this._initialTab = {};\n    if (this._scrollTab == null) this._scrollTab = {};\n\n    const subHtml = html.find(`.${group}-body > div[data-group="${group}"]`);\n    const activeSubHtml = subHtml.filter(".active");\n    const initial = this._initialTab[group] !== undefined ? this._initialTab[group] : (activeSubHtml.length > 0 ? activeSubHtml[0].dataset.tab : "");\n\n    // Set up data for scroll position and active tab\n    if (this._scrollTab[group] === undefined) this._scrollTab[group] = 0;\n    if (this._initialTab[group] === undefined) this._initialTab[group] = initial;\n\n    // Set up scrolling callback\n    let scrollElems = html.find(`.scroll-${group}`);\n    if (scrollElems.length === 0) scrollElems = html.find(`.tab[data-group="${group}"]`);\n    scrollElems.scroll(ev => this._scrollTab[group] = ev.currentTarget.scrollTop);\n\n    // Determine tab type\n    const tabsElem = html.find(`.tabs[data-group="${group}"]`)[0];\n    if (!tabsElem) return;\n    let type = tabsElem.dataset.tabsType;\n    let cls = TabsV2;\n    if (type === "list") {\n      cls = _misc_list_tabs_js__WEBPACK_IMPORTED_MODULE_0__["ListTabs"];\n    }\n\n    // Create tabs object\n    const tabs = new cls({\n      navSelector: `.tabs[data-group="${group}"]`,\n      contentSelector: `.${group}-body`,\n      callback: (_, tabs) => {\n        _recursiveActivate.call(this, tabs);\n      },\n    });\n\n    // Recursively create tabs\n    tabs.group = group;\n    tabs.subTabs = [];\n    for (let [childKey, subChildren] of Object.entries(children)) {\n      const newTabs = _func.call(this, childKey, subChildren);\n      if (newTabs != null) tabs.subTabs.push(newTabs);\n    }\n\n    tabs.bind(html[0]);\n    _recursiveActivate.call(this, tabs, this._initialTab[group]);\n    return tabs;\n  };\n\n  for (const groupKey of Object.keys(tabGroups)) {\n    _func.call(this, groupKey, tabGroups[groupKey]);\n  }\n};\n\n/**\n * @param {String} version - A version string to unpack. Must be something like \'0.5.1\'.\n * @returns {Object} An object containing the keys \'release\', \'major\', and \'minor\', which are numbers.\n */\nconst unpackVersion = function(version) {\n  if (version.match(/^([0-9]+)\\.([0-9]+)(?:\\.([0-9]+))?$/)) {\n    return {\n      release: parseInt(RegExp.$1),\n      major: parseInt(RegExp.$2),\n      minor: parseInt(RegExp.$3) || null,\n    };\n  }\n};\n\n/**\n * @param {String} version - The minimum core version to compare to. Must be something like \'0.5.1\'.\n * @returns {Boolean} Whether the current core version is at least the given version.\n */\nconst isMinimumCoreVersion = function(version) {\n  const coreVersion = unpackVersion(game.data.version);\n  const compareVersion = unpackVersion(version);\n\n  for (const versionType of ["release", "major", "minor"]) {\n    const curValue = coreVersion[versionType];\n    const compareValue = compareVersion[versionType];\n\n    if (curValue == null) {\n      if (compareValue == null) continue;\n      return false;\n    }\n    if (compareValue == null) {\n      if (curValue == null) continue;\n      return true;\n    }\n\n    if (curValue > compareValue) return true;\n    if (curValue < compareValue) return false;\n  }\n\n  return true;\n};\n\nconst degtorad = function(degrees) {\n  return degrees * Math.PI / 180;\n};\n\nconst radtodeg = function(radians) {\n  return radians / 180 * Math.PI;\n};\n\nconst linkData = function(expanded, flattened, key, value) {\n  setProperty(expanded, key, value);\n  flattened[key] = value;\n};\n\nconst getItemOwner = function(item) {\n  if (item.actor) return item.actor;\n  if (item._id) {\n    return game.actors.entities.filter(o => {\n      return o.items.filter(i => i._id === item._id).length > 0;\n    })[0];\n  }\n  return null;\n};\n\nconst CR = {\n  fromString(value) {\n    if (value === "1/8") return 0.125;\n    if (value === "1/6") return 0.1625;\n    if (value === "1/4") return 0.25;\n    if (value === "1/3") return 0.3375;\n    if (value === "1/2") return 0.5;\n    return parseFloat(value);\n  },\n\n  fromNumber(value) {\n    if (value === 0.125) return "1/8";\n    if (value === 0.1625) return "1/6";\n    if (value === 0.25) return "1/4";\n    if (value === 0.3375) return "1/3";\n    if (value === 0.5) return "1/2";\n    return value.toString();\n  },\n};\n\nconst sizeDie = function(origCount, origSides, targetSize="M", crit=1) {\n  if (typeof targetSize === "string") targetSize = Object.values(CONFIG.PF1.sizeChart).indexOf(targetSize.toUpperCase());\n  else if (typeof targetSize === "number") targetSize = Math.max(0, Math.min(Object.values(CONFIG.PF1.sizeChart).length - 1, Object.values(CONFIG.PF1.sizeChart).indexOf("M") + targetSize));\n  let c = duplicate(CONFIG.PF1.sizeDie);\n\n  const mediumDie = `${origCount}d${origSides}`;\n  const mediumDieMax = origCount * origSides;\n  if (c.indexOf(mediumDie) === -1) {\n    c = c.map(d => {\n      if (d.match(/^([0-9]+)d([0-9]+)$/)) {\n        const dieCount = parseInt(RegExp.$1),\n          dieSides = parseInt(RegExp.$2),\n          dieMaxValue = dieCount * dieSides;\n        \n        if (dieMaxValue === mediumDieMax) return mediumDie;\n      }\n\n      return d;\n    });\n  }\n\n  // Alter chart based on original die\n  // for (let a = 0; a < c.length; a++) {\n    // const d = c[a];\n    // if (d.match(/^([0-9]+)d([0-9]+)$/)) {\n      // const dieCount = parseInt(RegExp.$1),\n        // dieSides = parseInt(RegExp.$2),\n        // dieMaxValue = dieCount * dieSides;\n\n      // if (origSides === 4 && origCount >= 2) {\n        // if (dieSides === 8) {\n          // c[a] = `${dieCount*2}d4`;\n        // }\n        // else if (dieSides === 6 && Math.floor(dieMaxValue / origSides) === dieMaxValue / origSides) {\n          // c[a] = `${Math.floor(dieMaxValue / origSides)}d4`;\n        // }\n      // }\n      // else if (origSides === 12) {\n        // if (dieSides === 6 && Math.floor(dieMaxValue / origSides) === dieMaxValue / origSides) {\n          // c[a] = `${Math.floor(dieMaxValue / origSides)}d12`;\n        // }\n      // }\n    // }\n  // }\n\n  // Pick an index from the chart\n  let index = c.indexOf(mediumDie),\n    formula = mediumDie;\n  if (index >= 0) {\n    const d6Index = c.indexOf("1d6");\n    let d8Index = c.indexOf("1d8");\n    if (d8Index === -1) d8Index = c.indexOf("2d4");\n    let indexOffset = (targetSize - 4);\n    const sizeIncrease = indexOffset > 0;\n\n    while (indexOffset !== 0) {\n      if ((sizeIncrease && index <= d6Index) ||\n        (!sizeIncrease && index <= d8Index)) {\n      // if ((index <= d8Index && indexOffset < 1) ||\n      // (index <= d6Index && indexOffset < 0)) {\n        if (indexOffset < 0) {\n          index--;\n          indexOffset++;\n        }\n        else {\n          index++;\n          indexOffset--;\n        }\n      }\n      else {\n        if (indexOffset < 0) {\n          index -= 2;\n          indexOffset++;\n        }\n        else {\n          index += 2;\n          indexOffset--;\n        }\n      }\n    }\n\n    // Alter crit\n    index = Math.max(0, Math.min(c.length - 1, index));\n    formula = c[index];\n  }\n\n  if (crit !== 1 && formula.match(/^([0-9]+)d([0-9]+)(.*)/)) {\n    const count = parseInt(RegExp.$1);\n    const sides = parseInt(RegExp.$2);\n    formula = `${count * crit}d${sides}${RegExp.$3}`;\n  }\n  if (index === -1) {\n    ui.notifications.warn(game.i18n.localize("PF1.WarningNoSizeDie").format(mediumDie, formula));\n  }\n\n  return formula;\n};\n\nconst normalDie = function(origCount, origSides, crit=1) {\n  let formula = `${origCount}d${origSides}`;\n\n  if (crit !== 1 && formula.match(/^([0-9]+)d([0-9]+)(.*)/)) {\n    const count = parseInt(RegExp.$1);\n    const sides = parseInt(RegExp.$2);\n    formula = `${count * crit}d${sides}${RegExp.$3}`;\n  }\n\n  return formula;\n};\n\n/**\n * Returns the result of a roll of die, which changes based on different sizes.\n * @param {number} origCount - The original number of die to roll.\n * @param {number} origSides - The original number of sides per die to roll.\n * @param {string|number} [targetSize="M"] - The target size to change the die to.\n * @param {number} [crit=1] - The critical multiplier (for if the attack is a critical threat).\n *   Can be a string of values "F", "D", "T", "S", "M", "L", "H", "G" or "C" for the different sizes.\n *   Can also be a number in the range of -4 to 4, where 0 is Medium.\n * @returns {number} The result of the new roll.\n */\nconst sizeRoll = function(origCount, origSides, targetSize="M", crit=1) {\n  return new Roll(sizeDie(origCount, origSides, targetSize, crit)).roll().total;\n};\n\n/**\n * Returns the result of a roll of die.\n * @param {number} count - The original number of die to roll.\n * @param {number} sides - The original number of sides per die to roll.\n * @returns {number} The result of the new roll.\n */\nconst normalRoll = function(count, sides, crit=1) {\n  return new Roll(normalDie(count, sides, crit)).roll().total;\n};\n\nconst getActorFromId = function(id) {\n  const speaker = ChatMessage.getSpeaker();\n  let actor = null;\n  if (id) {\n    actor = game.actors.tokens[id];\n    if (!actor) actor = game.actors.get(id);\n  }\n  if (speaker.token && !actor) actor = game.actors.tokens[speaker.token];\n  if (!actor) actor = game.actors.get(speaker.actor);\n  return actor;\n};\n\n\n//# sourceURL=webpack://pf1/./module/lib.js?')},"./module/low-light-vision.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _token_config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token-config.js */ "./module/token-config.js");\n\n\n\n// Patch Token\'s sheet template\nObject.defineProperties(Token.prototype, {\n  sheet: {\n    get() {\n      if (!this._sheet) this._sheet = new _token_config_js__WEBPACK_IMPORTED_MODULE_0__["TokenConfigPF"](this);\n      return this._sheet;\n    }\n  },\n  actorVision: {\n    get() {\n      return this.actor.data.data.attributes.vision || {};\n    }\n  }\n});\n\nconst Token_update = Token.prototype.update;\nToken.prototype.update = async function(data, options={}) {\n  const updateData = {};\n\n  if (data.visionLL != null) {\n    updateData["data.attributes.vision.lowLight"] = data.visionLL;\n  }\n  if (data.darkvision != null) {\n    updateData["data.attributes.vision.darkvision"] = data.darkvision;\n  }\n\n  if (Object.keys(updateData).length) {\n    await this.actor.update(updateData);\n  }\n\n  return Token_update.call(this, data, options);\n};\n\nSightLayer.prototype.hasLowLight = function() {\n  const relevantTokens = canvas.tokens.placeables.filter(o => {\n    return o.actor && o.actor.hasPerm(game.user, "OBSERVER");\n  });\n  const lowLightTokens = relevantTokens.filter(o => getProperty(o, "actorVision.lowLight"));\n  if (game.user.isGM) {\n    return lowLightTokens.filter(o => o._controlled).length > 0;\n  }\n  if (game.settings.get("pf1", "lowLightVisionMode")) {\n    return lowLightTokens.filter(o => o._controlled).length > 0;\n  }\n  return (!relevantTokens.filter(o => o._controlled).length && lowLightTokens.length) || lowLightTokens.filter(o => o._controlled).length > 0;\n};\n\nSightLayer.prototype.hasDarkvision = function() {\n  const relevantTokens = canvas.tokens.placeables.filter(o => {\n    return o.actor && o.actor.hasPerm(game.user, "OBSERVER");\n  });\n  const darkvisionTokens = relevantTokens.filter(o => o.getDarkvisionRadius() > 0);\n  if (game.user.isGM) {\n    return darkvisionTokens.filter(o => o._controlled).length > 0;\n  }\n  if (game.settings.get("pf1", "lowLightVisionMode")) {\n    return darkvisionTokens.filter(o => o._controlled).length > 0;\n  }\n  return (!relevantTokens.filter(o => o._controlled).length && darkvisionTokens.length) || darkvisionTokens.filter(o => o._controlled).length > 0;\n};\n\nconst AmbientLight__get__dimRadius = Object.getOwnPropertyDescriptor(AmbientLight.prototype, "dimRadius").get;\nObject.defineProperty(AmbientLight.prototype, "dimRadius", {\n  get: function() {\n    let result = AmbientLight__get__dimRadius.call(this);\n    if (canvas.sight.hasLowLight() && result > 0) result *= 2;\n    return result;\n  }\n});\n\nconst AmbientLight__get__brightRadius = Object.getOwnPropertyDescriptor(AmbientLight.prototype, "brightRadius").get;\nObject.defineProperty(AmbientLight.prototype, "brightRadius", {\n  get: function() {\n    let result = AmbientLight__get__brightRadius.call(this);\n    if (canvas.sight.hasLowLight() && result > 0) result *= 2;\n    return result;\n  }\n});\n\nconst Token__get__dimLightRadius = Object.getOwnPropertyDescriptor(Token.prototype, "dimLightRadius").get;\nObject.defineProperty(Token.prototype, "dimLightRadius", {\n  get: function() {\n    let result = Token__get__dimLightRadius.call(this);\n    if (canvas.sight.hasLowLight() && result > 0) result *= 2;\n    return result;\n  }\n});\n\nconst Token__get__brightLightRadius = Object.getOwnPropertyDescriptor(Token.prototype, "brightLightRadius").get;\nObject.defineProperty(Token.prototype, "brightLightRadius", {\n  get: function() {\n    let result = Token__get__brightLightRadius.call(this);\n    if (canvas.sight.hasLowLight() && result > 0) result *= 2;\n    return result;\n  }\n});\n\nconst SightLayer_initializeTokens = SightLayer.prototype.initializeTokens;\nSightLayer.prototype.initializeTokens = function(options) {\n  options = options || {};\n  const defer = options.defer || false;\n  options.defer = true;\n\n  SightLayer_initializeTokens.call(this, options);\n  this.initializeLights(options);\n  canvas.lighting.update();\n\n  if (!defer) this.update();\n};\n\nToken.prototype.getDarkvisionRadius = function() {\n  return this.getLightRadius(getProperty(this, "actor.data.data.attributes.vision.darkvision") || 0);\n};\n\nToken.prototype.getDarkvisionSight = function() {\n  const radius = this.getDarkvisionRadius();\n  if (!radius) return null;\n\n  const walls = canvas.walls.blockVision;\n  const globalLight = canvas.scene.data.globalLight;\n  const maxR = globalLight ? Math.max(canvas.dimensions.width, canvas.dimensions.height) : null;\n  let [cullMult, cullMin, cullMax] = canvas.sight._cull;\n  if (globalLight) cullMin = maxR;\n\n  return canvas.sight.constructor.computeSight(this.getSightOrigin(), radius, {\n    angle: this.data.angle,\n    cullMult: cullMult,\n    cullMin: cullMin,\n    cullMax: cullMax,\n    density: 6,\n    rotation: this.data.rotation,\n    walls: walls,\n  });\n};\n\nconst SightLayer_update = SightLayer.prototype.update;\nSightLayer.prototype.update = function() {\n  SightLayer_update.call(this);\n};\n\n/**\n * Monkey patched updateToken method for SightLayer\n */\nSightLayer.prototype.updateToken = function(token, {defer=false, deleted=false, walls=null, forceUpdateFog=false}={}) {\n  let sourceId = `Token.${token.id}`;\n  this.sources.vision.delete(sourceId);\n  this.sources.lights.delete(sourceId);\n  if ( deleted ) return defer ? null : this.update();\n  if ( token.data.hidden && !game.user.isGM ) return;\n\n  // Vision is displayed if the token is controlled, or if it is observed by a player with no tokens controlled\n  let displayVision = token._controlled;\n  if ( !displayVision && !game.user.isGM && !canvas.tokens.controlled.length ) {\n    displayVision = token.actor && token.actor.hasPerm(game.user, "OBSERVER");\n  }\n\n  // Take no action for Tokens which are invisible or Tokens that have no sight or light\n  const globalLight = canvas.scene.data.globalLight;\n  let isVisionSource = this.tokenVision && token.hasSight && displayVision;\n  let isLightSource = token.emitsLight;\n\n  // If the Token is no longer a source, we don\'t need further work\n  if ( !isVisionSource && !isLightSource ) return;\n\n  // Prepare some common data\n  const center = token.getSightOrigin();\n  const maxR = globalLight ? Math.max(canvas.dimensions.width, canvas.dimensions.height) : null;\n  let [cullMult, cullMin, cullMax] = this._cull;\n  if ( globalLight ) cullMin = maxR;\n\n  // Prepare vision sources\n  if ( isVisionSource ) {\n\n    // Compute vision polygons\n    let dim = globalLight ? 0 : token.getLightRadius(token.data.dimSight);\n    const bright = globalLight ? maxR : token.getLightRadius(token.data.brightSight);\n    const darkvision = this.hasDarkvision() ? token.getDarkvisionRadius() : 0;\n    if ((dim === 0) && (bright === 0) && (darkvision === 0)) dim = canvas.dimensions.size * 0.6;\n    const radius = Math.max(Math.abs(dim), Math.abs(bright), Math.abs(darkvision));\n    const {los, fov} = this.constructor.computeSight(center, radius, {\n      angle: token.data.sightAngle,\n      cullMult: cullMult,\n      cullMin: cullMin,\n      cullMax: cullMax,\n      density: 6,\n      rotation: token.data.rotation,\n      walls: walls\n    });\n\n    // Add a vision source\n    const source = new SightLayerSource({\n      x: center.x,\n      y: center.y,\n      los: los,\n      fov: fov,\n      dim: dim,\n      bright: Math.max(bright, darkvision),\n      color: "#ffffff",\n      alpha: 1,\n    });\n    this.sources.vision.set(sourceId, source);\n\n    // Update fog exploration for the token position\n    this.updateFog(center.x, center.y, Math.max(dim, bright, darkvision), token.data.sightAngle !== 360, forceUpdateFog);\n  }\n\n  // Prepare light sources\n  if ( isLightSource ) {\n\n    // Compute light emission polygons\n    const dim = token.dimLightRadius;\n    const bright = token.brightLightRadius;\n    const radius = Math.max(Math.abs(dim), Math.abs(bright));\n    const {fov} = this.constructor.computeSight(center, radius, {\n      angle: token.data.lightAngle,\n      cullMult: cullMult,\n      cullMin: cullMin,\n      cullMax: cullMax,\n      density: 6,\n      rotation: token.data.rotation,\n      walls: walls\n    });\n\n    // Add a light source\n    const source = new SightLayerSource({\n      x: center.x,\n      y: center.y,\n      los: null,\n      fov: fov,\n      dim: dim,\n      bright: bright,\n      color: token.data.lightColor,\n      alpha: token.data.lightAlpha\n    });\n    this.sources.lights.set(sourceId, source);\n  }\n\n  // Maybe update\n  if ( CONFIG.debug.sight ) console.debug(`Updated SightLayer source for ${sourceId}`);\n  if ( !defer ) this.update();\n};\n\n/**\n * Monkey patched update method for LightingLayer\n */\nLightingLayer.prototype.update = function(alpha=null) {\n  const d = canvas.dimensions;\n  const c = this.lighting;\n\n  // Draw darkness layer\n  this._darkness = alpha !== null ? alpha : canvas.scene.data.darkness;\n  c.darkness.clear();\n  const darknessPenalty = 0.8;\n  let darknessColor = canvas.scene.getFlag("core", "darknessColor") || CONFIG.Canvas.darknessColor;\n  if ( typeof darknessColor === "string" ) darknessColor = colorStringToHex(darknessColor);\n  c.darkness.beginFill(darknessColor, this._darkness * darknessPenalty)\n    .drawRect(0, 0, d.width, d.height)\n    .endFill();\n\n  // Draw lighting atop the darkness\n  c.lights.clear();\n  for ( let s of canvas.sight.sources.lights.values() ) {\n    if ( s.darknessThreshold <= this._darkness ) {\n      c.lights.beginFill(s.color, s.alpha).drawPolygon(s.fov).endFill();\n    }\n  }\n\n  if (canvas.sight.hasDarkvision) {\n    this.updateDarkvision();\n  }\n};\n\nLightingLayer.prototype.updateDarkvision = function() {\n  const c = this.lighting;\n\n  // Draw token darkvision\n  const vision = canvas.sight.sources.vision;\n  for (let k of vision.keys()) {\n    const t = canvas.tokens.placeables.find(o => `Token.${o.id}` === k);\n    if (!t) continue;\n    const sight = t.getDarkvisionSight();\n    if (!sight) continue;\n    const fov = sight.fov;\n    c.lights.beginFill(0xFFFFFF, 1).drawPolygon(fov).endFill();\n  }\n};\n\n\n//# sourceURL=webpack://pf1/./module/low-light-vision.js?')},"./module/measure.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib.js */ "./module/lib.js");\n\n\n// Use 90 degrees cone in PF1 style\nconst TemplateLayer__onDragLeftStart = TemplateLayer.prototype._onDragLeftStart;\nTemplateLayer.prototype._onDragLeftStart = function(event) {\n  if (!game.settings.get("pf1", "measureStyle")) return TemplateLayer__onDragLeftStart.call(this, event);\n\n  PlaceablesLayer.prototype._onDragLeftStart.call(this, event);\n\n  // Create the new preview template\n  const tool = game.activeTool;\n  const origin = event.data.origin;\n  let pos;\n  if (["cone", "circle"].includes(tool)) {\n    pos = canvas.grid.getSnappedPosition(origin.x, origin.y, 2);\n  }\n  else pos = canvas.grid.getSnappedPosition(origin.x, origin.y, 2);\n  origin.x = pos.x;\n  origin.y = pos.y;\n\n  // Create the template\n  const data = {\n    user: game.user._id,\n    t: tool,\n    x: pos.x,\n    y: pos.y,\n    distance: 0,\n    direction: 0,\n    fillColor: game.user.data.color || "#FF0000"\n  };\n  if (tool === "cone") data["angle"] = 90;\n  else if (tool === "ray") data["width"] = 5;\n\n  // Assign the template\n  let template = new MeasuredTemplate(data);\n  event.data.preview = this.preview.addChild(template);\n  template.draw();\n};\n\n\nconst TemplateLayer__onDragLeftMove = TemplateLayer.prototype._onDragLeftMove;\nTemplateLayer.prototype._onDragLeftMove = function(event) {\n  if (!game.settings.get("pf1", "measureStyle")) return TemplateLayer__onDragLeftMove.call(this, event);\n\n  PlaceablesLayer.prototype._onDragLeftMove.call(this, event);\n  if (event.data.createState >= 1) {\n    // Snap the destination to the grid\n    let dest = event.data.destination;\n    let {x, y} = canvas.grid.getSnappedPosition(dest.x, dest.y, 2);\n    dest.x = x;\n    dest.y = y;\n\n    // Compute the ray\n    let template = event.data.preview,\n        ray = new Ray(event.data.origin, event.data.destination),\n        ratio = (canvas.dimensions.size / canvas.dimensions.distance);\n\n    // Update the shape data\n    if (["cone", "circle"].includes(template.data.t)) {\n      const direction = ray.angle;\n      template.data.direction = toDegrees(Math.floor((direction + (Math.PI * 0.125)) / (Math.PI * 0.25)) * (Math.PI * 0.25));\n      const distance = ray.distance / ratio;\n      template.data.distance = Math.floor(distance / canvas.dimensions.distance) * canvas.dimensions.distance;\n    }\n    else {\n      template.data.direction = toDegrees(ray.angle);\n      template.data.distance = ray.distance / ratio;\n    }\n\n    // Draw the pending shape\n    template.refresh();\n    event.data.createState = 2;\n  }\n};\n\n\n// Highlight grid in PF1 style\nconst MeasuredTemplate_highlightGrid = MeasuredTemplate.prototype.highlightGrid;\nMeasuredTemplate.prototype.highlightGrid = function() {\n  if (!game.settings.get("pf1", "measureStyle") || !(["circle", "cone"].includes(this.data.t))) return MeasuredTemplate_highlightGrid.call(this);\n\n  const grid = canvas.grid,\n        d = canvas.dimensions,\n        bc = this.borderColor,\n        fc = this.fillColor;\n\n  // Only highlight for objects which have a defined shape\n  if ( !this.id || !this.shape ) return;\n\n  // Clear existing highlight\n  const hl = grid.getHighlightLayer(`Template.${this.id}`);\n  hl.clear();\n\n  // Get number of rows and columns\n  let nr = Math.ceil(((this.data.distance * 1.5) / d.distance) / (d.size / grid.h)),\n      nc = Math.ceil(((this.data.distance * 1.5) / d.distance) / (d.size / grid.w));\n\n  // Get the center of the grid position occupied by the template\n  let x = this.data.x,\n    y = this.data.y;\n\n  let [cx, cy] = grid.getCenter(x, y),\n    [col0, row0] = grid.grid.getGridPositionFromPixels(cx, cy),\n    minAngle = (360 + ((this.data.direction - this.data.angle * 0.5) % 360)) % 360,\n    maxAngle = (360 + ((this.data.direction + this.data.angle * 0.5) % 360)) % 360;\n\n  const within_angle = function(min, max, value) {\n    min = (360 + min % 360) % 360;\n    max = (360 + max % 360) % 360;\n    value = (360 + value % 360) % 360;\n\n    if (min < max) return (value >= min && value <= max);\n    return (value >= min || value <= max);\n  };\n\n  const measureDistance = function(p0, p1) {\n    let gs = canvas.dimensions.size,\n    ray = new Ray(p0, p1),\n    // How many squares do we travel across to get there? If 2.3, we should count that as 3 instead of 2; hence, Math.ceil\n    nx = Math.ceil(Math.abs(ray.dx / gs)),\n    ny = Math.ceil(Math.abs(ray.dy / gs));\n\n    // Get the number of straight and diagonal moves\n    let nDiagonal = Math.min(nx, ny),\n        nStraight = Math.abs(ny - nx);\n        \n    // Diagonals in PF pretty much count as 1.5 times a straight\n    let distance = Math.floor(nDiagonal * 1.5 + nStraight);\n    let distanceOnGrid = distance * canvas.dimensions.distance;\n    return distanceOnGrid;\n  };\n\n\n  let originOffset = {x: 0, y: 0};\n  // Offset measurement for cones\n  // Offset is to ensure that cones only start measuring from cell borders, as in https://www.d20pfsrd.com/magic/#Aiming_a_Spell\n  if (this.data.t === "cone") {\n    // Degrees anticlockwise from pointing right. In 45-degree increments from 0 to 360\n    const dir = (this.data.direction >= 0 ? 360 - this.data.direction : -this.data.direction) % 360;\n    // If we\'re not on a border for X, offset by 0.5 or -0.5 to the border of the cell in the direction we\'re looking on X axis\n    let xOffset = this.data.x % d.size != 0 ?\n      Math.sign(1 * (Math.round(Math.cos(Object(_lib_js__WEBPACK_IMPORTED_MODULE_0__["degtorad"])(dir)) * 100)) / 100) /2 // /2 turns from 1/0/-1 to 0.5/0/-0.5\n      : 0;\n    // Same for Y, but cos Y goes down on screens, we invert\n    let yOffset = this.data.y % d.size != 0 ?\n      -Math.sign(1 * (Math.round(Math.sin(Object(_lib_js__WEBPACK_IMPORTED_MODULE_0__["degtorad"])(dir)) * 100)) / 100) /2\n      : 0;\n    originOffset.x = xOffset;\n    originOffset.y = yOffset;\n  }\n\n  // Point we are measuring distances from\n  let origin = {\n    x: this.data.x + (originOffset.x * d.size),\n    y: this.data.y + (originOffset.y * d.size)\n  }\n\n  for (let a = -nc; a < nc; a++) {\n    for (let b = -nr; b < nr; b++) {\n      // Position of cell\'s top-left corner, in pixels\n      let [gx, gy] = canvas.grid.grid.getPixelsFromGridPosition(col0 + a, row0 + b);\n      // Position of cell\'s center, in pixels\n      let [cellCenterX, cellCenterY] = [gx + d.size * 0.5, gy + d.size * 0.5];\n\n      // Determine point of origin\n      let origin = {x: this.data.x, y: this.data.y};\n      origin.x += (originOffset.x * d.size);\n      origin.y += (originOffset.y * d.size);\n\n      let ray = new Ray(origin, {x: cellCenterX, y: cellCenterY});\n\n      let rayAngle = (360 + (ray.angle / (Math.PI / 180)) % 360) % 360;\n      if (this.data.t === "cone" && ray.distance > 0 && !within_angle(minAngle, maxAngle, rayAngle)) {\n        continue;\n      }\n\n      // Determine point we\'re measuring the distance to - always in the center of a grid square\n      let destination = {x: cellCenterX, y: cellCenterY};\n\n      let distance = measureDistance(destination, origin);\n      if (distance <= this.data.distance) {\n        grid.grid.highlightGridPosition(hl, { x: gx, y: gy, color: fc, border: bc });\n      }\n    }\n  }\n};\n\n\n//# sourceURL=webpack://pf1/./module/measure.js?')},"./module/migration.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "migrateWorld", function() { return migrateWorld; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "migrateCompendium", function() { return migrateCompendium; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "migrateActorData", function() { return migrateActorData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "migrateItemData", function() { return migrateItemData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "migrateSceneData", function() { return migrateSceneData; });\n/* harmony import */ var _item_entity_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./item/entity.js */ "./module/item/entity.js");\n/* harmony import */ var _config_experience_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/experience.js */ "./module/config/experience.js");\n\n\n\n/**\n * Perform a system migration for the entire World, applying migrations for Actors, Items, and Compendium packs\n * @return {Promise}      A Promise which resolves once the migration is completed\n */\nconst migrateWorld = async function() {\n  if (!game.user.isGM) return ui.notifications.error(game.i18n.localize("PF1.ErrorUnauthorizedAction"));\n  ui.notifications.info(`Applying PF1 System Migration for version ${game.system.data.version}. Please stand by.`);\n\n  await _migrateWorldSettings();\n\n  // Migrate World Actors\n  for ( let a of game.actors.entities ) {\n    try {\n      const updateData = await migrateActorData(a);\n      console.log(`Migrating Actor entity ${a.name}`);\n      await a.update(updateData);\n    } catch(err) {\n      console.error(err);\n    }\n  }\n\n  // Migrate World Items\n  for ( let i of game.items.entities ) {\n    try {\n      const updateData = migrateItemData(i);\n      console.log(`Migrating Item entity ${i.name}`);\n      await i.update(updateData, {enforceTypes: false});\n    } catch(err) {\n      console.error(err);\n    }\n  }\n\n  // Migrate Actor Override Tokens\n  for ( let s of game.scenes.entities ) {\n    try {\n      const updateData = await migrateSceneData(s.data);\n      console.log(`Migrating Scene entity ${s.name}`);\n      await s.update(updateData);\n    } catch(err) {\n      console.error(err);\n    }\n  }\n\n  // Migrate World Compendium Packs\n  const packs = game.packs.filter(p => {\n    return (p.metadata.package === "world") && ["Actor", "Item", "Scene"].includes(p.metadata.entity)\n  });\n  for ( let p of packs ) {\n    await migrateCompendium(p);\n  }\n\n  // Set the migration as complete\n  game.settings.set("pf1", "systemMigrationVersion", game.system.data.version);\n  ui.notifications.info(`PF1 System Migration to version ${game.system.data.version} succeeded!`);\n};\n\n/* -------------------------------------------- */\n\n/**\n * Apply migration rules to all Entities within a single Compendium pack\n * @param pack\n * @return {Promise}\n */\nconst migrateCompendium = async function(pack) {\n  const entity = pack.metadata.entity;\n  if ( !["Actor", "Item", "Scene"].includes(entity) ) return;\n\n  // Begin by requesting server-side data model migration and get the migrated content\n  await pack.migrate();\n  const content = await pack.getContent();\n\n  // Iterate over compendium entries - applying fine-tuned migration functions\n  for ( let ent of content ) {\n    try {\n      let updateData = null;\n      if (entity === "Item") updateData = migrateItemData(ent);\n      else if (entity === "Actor") updateData = await migrateActorData(ent);\n      else if ( entity === "Scene" ) updateData = await migrateSceneData(ent);\n      expandObject(updateData);\n      updateData["_id"] = ent._id;\n      await pack.updateEntity(updateData);\n      console.log(`Migrated ${entity} entity ${ent.name} in Compendium ${pack.collection}`);\n    } catch(err) {\n      console.error(err);\n    }\n  }\n  console.log(`Migrated all ${entity} entities from Compendium ${pack.collection}`);\n};\n\n/**\n * Migrates world settings.\n */\nconst _migrateWorldSettings = async function() {\n  const oldXPTrack = game.settings.get("pf1", "experienceRate");\n  if (oldXPTrack !== "" && oldXPTrack != null) {\n    // Set new config style\n    const config = game.settings.get("pf1", "experienceConfig") || _config_experience_js__WEBPACK_IMPORTED_MODULE_1__["ExperienceConfig"].defaultSettings;\n    config.track = oldXPTrack;\n    await game.settings.set("pf1", "experienceConfig", config);\n    // Remove old config style\n    await game.settings.set("pf1", "experienceRate", "");\n  }\n};\n\n/* -------------------------------------------- */\n/*  Entity Type Migration Helpers               */\n/* -------------------------------------------- */\n\n/**\n * Migrate a single Actor entity to incorporate latest data model changes\n * Return an Object of updateData to be applied\n * @param {Actor} actor   The actor to Update\n * @return {Object}       The updateData to apply\n */\nconst migrateActorData = async function(actor) {\n  const updateData = {};\n\n  _migrateCharacterLevel(actor, updateData);\n  _migrateActorEncumbrance(actor, updateData);\n  _migrateActorDefenseNotes(actor, updateData);\n  _migrateActorSpeed(actor, updateData);\n  _migrateSpellDivineFocus(actor, updateData);\n  _migrateActorSpellbookSlots(actor, updateData);\n  _migrateActorBaseStats(actor, updateData);\n  _migrateActorCreatureType(actor, updateData);\n  _migrateActorSpellbookDCFormula(actor, updateData);\n  _migrateActorHPAbility(actor, updateData);\n  _migrateActorCR(actor, updateData);\n\n  if ( !actor.items ) return updateData;\n\n  // Migrate Owned Items\n  let items = [];\n  const actorItems = Array.from(actor.items);\n  for (let a = 0; a < actorItems.length; a++) {\n    let i = actorItems[a];\n    items[a] = i;\n    let itemUpdate = migrateItemData(i);\n\n    // Update the Owned Item\n    items[a] = mergeObject(i, itemUpdate, { enforceTypes: false, inplace: false });\n  }\n  updateData.items = items;\n  return updateData;\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate a single Item entity to incorporate latest data model changes\n * @param item\n */\nconst migrateItemData = function(item) {\n  const updateData = {};\n  \n  _migrateItemSpellUses(item, updateData);\n  _migrateWeaponDamage(item, updateData);\n  _migrateWeaponImprovised(item, updateData);\n  _migrateSpellDescription(item, updateData);\n  _migrateClassDynamics(item, updateData);\n  _migrateClassType(item, updateData);\n  _migrateWeaponCategories(item, updateData);\n  _migrateEquipmentCategories(item, updateData);\n  _migrateWeaponSize(item, updateData);\n  _migrateAbilityTypes(item, updateData);\n  _migrateClassLevels(item, updateData);\n  _migrateSavingThrowTypes(item, updateData);\n  _migrateCR(item, updateData);\n  _migrateItemChanges(item, updateData);\n  _migrateTemplateSize(item, updateData);\n\n  // Return the migrated update data\n  return updateData;\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate a single Scene entity to incorporate changes to the data model of it\'s actor data overrides\n * Return an Object of updateData to be applied\n * @param {Object} scene  The Scene data to Update\n * @return {Object}       The updateData to apply\n */\nconst migrateSceneData = async function(scene) {\n  const result = { tokens: duplicate(scene.tokens) };\n  for (let t of result.tokens) {\n    if (!t.actorId || t.actorLink || !t.actorData.data) {\n      t.actorData = {};\n      continue;\n    }\n    const token = new Token(t);\n    if (!token.actor) {\n      t.actorId = null;\n      t.actordata = {};\n    }\n    const originalActor = game.actors.get(token.actor.id);\n    if (!originalActor) {\n      t.actorId = null;\n      t.actorData = {};\n    }\n    else {\n      const updateData = await migrateActorData(token.data.actorData);\n      t.actorData = mergeObject(token.data.actorData, updateData);\n    }\n  }\n  return result;\n};\n\n/* -------------------------------------------- */\n/*  Low level migration utilities\n/* -------------------------------------------- */\n\n/**\n * Migrate string format traits with a comma separator to an array of strings\n * @private\n */\nconst _migrateActorTraits = function(actor, updateData) {\n  if ( !actor.data.traits ) return;\n  const dt = invertObject(CONFIG.pf1.damageTypes);\n  const map = {\n    "dr": dt,\n    "di": dt,\n    "dv": dt,\n    "ci": invertObject(CONFIG.pf1.conditionTypes),\n    "languages": invertObject(CONFIG.pf1.languages)\n  };\n  for ( let [t, choices] of Object.entries(map) ) {\n    const trait = actor.data.traits[t];\n    if ( trait && (typeof trait.value === "string") ) {\n      updateData[`data.traits.${t}.value`] = trait.value.split(",").map(t => choices[t.trim()]).filter(t => !!t);\n    }\n  }\n};\n\n/* -------------------------------------------- */\n\n\n/**\n * Flatten several attributes which currently have an unnecessarily nested {value} object\n * @private\n */\nconst _migrateFlattenValues = function(ent, updateData, toFlatten) {\n  for ( let a of toFlatten ) {\n    const attr = getProperty(ent.data, a);\n    if ( attr instanceof Object && !updateData.hasOwnProperty("data."+a) ) {\n      updateData["data."+a] = attr.hasOwnProperty("value") ? attr.value : null;\n    }\n  }\n};\n\nconst _migrateAddValues = function(ent, updateData, toAdd) {\n  for (let [k, v] of Object.entries(toAdd)) {\n    const attr = getProperty(ent.data, k);\n    if (!attr && !updateData.hasOwnProperty(k)) {\n      updateData[k] = v;\n    }\n  }\n};\n\n/* -------------------------------------------- */\n\nconst _migrateCharacterLevel = function(ent, updateData) {\n  const arr = ["details.level.value", "details.level.min", "details.level.max"];\n  for (let k of arr) {\n    const value = getProperty(ent.data.data, k);\n    if (value == null) {\n      updateData["data."+k] = 0;\n    }\n  }\n};\n\nconst _migrateActorEncumbrance = function(ent, updateData) {\n  const arr = ["attributes.encumbrance.level", "attributes.encumbrance.levels.light",\n  "attributes.encumbrance.levels.medium", "attributes.encumbrance.levels.heavy",\n  "attributes.encumbrance.levels.carry", "attributes.encumbrance.levels.drag",\n  "attributes.encumbrance.carriedWeight"];\n  for (let k of arr) {\n    const value = getProperty(ent.data.data, k);\n    if (value == null) {\n      updateData["data."+k] = 0\n    }\n  }\n};\n\nconst _migrateActorDefenseNotes = function(ent, updateData) {\n  const arr = ["attributes.acNotes", "attributes.cmdNotes", "attributes.srNotes"];\n  for (let k of arr) {\n    const value = getProperty(ent.data.data, k);\n    if (value == null) {\n      updateData["data."+k] = "";\n    }\n  }\n};\n\nconst _migrateActorSpeed = function(ent, updateData) {\n  const arr = ["attributes.speed.land", "attributes.speed.climb", "attributes.speed.swim", "attributes.speed.fly", "attributes.speed.burrow"];\n  for (let k of arr) {\n    let value = getProperty(ent.data.data, k);\n    if (typeof value === "string") value = parseInt(value);\n    if (typeof value === "number") {\n      updateData[`data.${k}.base`] = value;\n      updateData[`data.${k}.total`] = value;\n    }\n    else if (value == null) {\n      updateData[`data.${k}.base`] = 0;\n      updateData[`data.${k}.total`] = null;\n    }\n\n    // Add maneuverability\n    if (k === "attributes.speed.fly" && getProperty(ent.data.data, `${k}.maneuverability`) === undefined) {\n      updateData[`data.${k}.maneuverability`] = "average";\n    }\n  }\n};\n\nconst _migrateActorSpellbookSlots = function(ent, updateData) {\n  for (let spellbookSlot of Object.keys(getProperty(ent.data.data, "attributes.spells.spellbooks") || {})) {\n    if (getProperty(ent.data.data, `attributes.spells.spellbooks.${spellbookSlot}.autoSpellLevels`) == null) {\n      updateData[`data.attributes.spells.spellbooks.${spellbookSlot}.autoSpellLevels`] = true;\n    }\n\n    for (let a = 0; a < 10; a++) {\n      const baseKey = `data.attributes.spells.spellbooks.${spellbookSlot}.spells.spell${a}.base`;\n      const maxKey = `data.attributes.spells.spellbooks.${spellbookSlot}.spells.spell${a}.max`;\n      const base = getProperty(ent.data, baseKey);\n      const max = getProperty(ent.data, maxKey);\n      if (base === undefined && typeof max === "number" && max > 0) {\n        updateData[baseKey] = max.toString();\n      }\n      else if (base === undefined) {\n        updateData[baseKey] = "";\n      }\n    }\n  }\n};\n\nconst _migrateActorBaseStats = function(ent, updateData) {\n  const keys = ["attributes.hp.base", "attributes.hd.base", "attributes.savingThrows.fort.value",\n    "attributes.savingThrows.ref.value", "attributes.savingThrows.will.value"];\n  for (let k of keys) {\n    if (k === "attributes.hp.base" && !(getProperty(ent, "items") || []).filter(o => o.type === "class").length) continue;\n    if (getProperty(ent.data.data, k) != null) {\n      let kList = k.split(".");\n      kList[kList.length-1] = `-=${kList[kList.length-1]}`;\n      updateData[`data.${kList.join(".")}`] = null;\n    }\n  }\n};\n\nconst _migrateActorCreatureType = function(ent, updateData) {\n  if (getProperty(ent.data, "data.attributes.creatureType") == null) {\n    updateData["data.attributes.creatureType"] = "humanoid";\n  }\n};\n\nconst _migrateActorSpellbookDCFormula = function(ent, updateData) {\n  const spellbooks = Object.keys(getProperty(ent.data, "data.attributes.spells.spellbooks") || {});\n\n  for (let k of spellbooks) {\n    const key = `data.attributes.spells.spellbooks.${k}.baseDCFormula`;\n    const curFormula = getProperty(ent.data, key);\n    if (curFormula == null) updateData[key] = "10 + @sl + @ablMod";\n  }\n};\n\nconst _migrateActorHPAbility = function(ent, updateData) {\n  // Set HP ability\n  if (getProperty(ent.data, "data.attributes.hpAbility") === undefined) {\n    updateData["data.attributes.hpAbility"] = "con";\n  }\n\n  // Set Fortitude save ability\n  if (getProperty(ent.data, "data.attributes.savingThrows.fort.ability") === undefined) {\n    updateData["data.attributes.savingThrows.fort.ability"] = "con";\n  }\n\n  // Set Reflex save ability\n  if (getProperty(ent.data, "data.attributes.savingThrows.ref.ability") === undefined) {\n    updateData["data.attributes.savingThrows.ref.ability"] = "dex";\n  }\n\n  // Set Will save ability\n  if (getProperty(ent.data, "data.attributes.savingThrows.will.ability") === undefined) {\n    updateData["data.attributes.savingThrows.will.ability"] = "wis";\n  }\n};\n\nconst _migrateItemSpellUses = function(ent, updateData) {\n  if (getProperty(ent.data.data, "preparation") === undefined) return;\n\n  const value = getProperty(ent.data.data, "preparation.maxAmount");\n  if (typeof value !== "number") updateData["data.preparation.maxAmount"] = 0;\n};\n\nconst _migrateWeaponDamage = function(ent, updateData) {\n  if (ent.type !== "weapon") return;\n\n  const value = getProperty(ent.data.data, "weaponData");\n  if (typeof value !== "object") {\n    updateData["data.weaponData"] = {};\n    updateData["data.weaponData.critRange"] = 20;\n    updateData["data.weaponData.critMult"] = 2;\n  }\n};\n\nconst _migrateWeaponImprovised = function(ent, updateData) {\n  if (ent.type !== "weapon") return;\n\n  const value = getProperty(ent.data.data, "weaponType");\n  if (value === "improv") {\n    updateData["data.weaponType"] = "misc";\n    updateData["data.properties.imp"] = true;\n  }\n};\n\nconst _migrateSpellDescription = function(ent, updateData) {\n  if (ent.type !== "spell") return;\n\n  const curValue = getProperty(ent.data.data, "shortDescription");\n  if (curValue != null) return;\n\n  const obj = getProperty(ent.data.data, "description.value");\n  if (typeof obj !== "string") return;\n  const html = $(`<div>${obj}</div>`);\n  const elem = html.find("h2").next();\n  if (elem.length === 1) updateData["data.shortDescription"] = elem.prop("outerHTML");\n  else updateData["data.shortDescription"] = html.prop("innerHTML");\n};\n\nconst _migrateSpellDivineFocus = function(ent, updateData) {\n  if (ent.type !== "spell") return;\n\n  const value = getProperty(ent.data.data, "components.divineFocus");\n  if (typeof value === "boolean") updateData["data.components.divineFocus"] = (value === true ? 1 : 0);\n};\n\nconst _migrateClassDynamics = function(ent, updateData) {\n  if (ent.type !== "class") return;\n\n  const bab = getProperty(ent.data.data, "bab");\n  if (typeof bab === "number") updateData["data.bab"] = "low";\n\n  const stKeys = ["data.savingThrows.fort.value", "data.savingThrows.ref.value", "data.savingThrows.will.value"];\n  for (let key of stKeys) {\n    let value = getProperty(ent.data, key);\n    if (typeof value === "number") updateData[key] = "low";\n  }\n};\n\nconst _migrateClassType = function(ent, updateData) {\n  if (ent.type !== "class") return;\n\n  if (getProperty(ent.data.data, "classType") == null) updateData["data.classType"] = "base";\n};\n\nconst _migrateWeaponCategories = function(ent, updateData) {\n  if (ent.type !== "weapon") return;\n\n  // Change category\n  const type = getProperty(ent.data.data, "weaponType");\n  if (type === "misc") {\n    updateData["data.weaponType"] = "misc";\n    updateData["data.weaponSubtype"] = "other";\n  }\n  else if (type === "splash") {\n    updateData["data.weaponType"] = "misc";\n    updateData["data.weaponSubtype"] = "splash";\n  }\n\n  const changeProp = (["simple", "martial", "exotic"].includes(type));\n  if (changeProp && getProperty(ent.data.data, "weaponSubtype") == null) {\n    updateData["data.weaponSubtype"] = "1h";\n  }\n\n  // Change light property\n  const lgt = getProperty(ent.data.data, "properties.lgt");\n  if (lgt != null) {\n    updateData["data.properties.-=lgt"] = null;\n    if (lgt === true && changeProp) {\n      updateData["data.weaponSubtype"] = "light";\n    }\n  }\n\n  // Change two-handed property\n  const two = getProperty(ent.data.data, "properties.two");\n  if (two != null) {\n    updateData["data.properties.-=two"] = null;\n    if (two === true && changeProp) {\n      updateData["data.weaponSubtype"] = "2h";\n    }\n  }\n\n  // Change melee property\n  const melee = getProperty(ent.data.data, "weaponData.isMelee");\n  if (melee != null) {\n    updateData["data.weaponData.-=isMelee"] = null;\n    if (melee === false && changeProp) {\n      updateData["data.weaponSubtype"] = "ranged";\n    }\n  }\n};\n\nconst _migrateEquipmentCategories = function(ent, updateData) {\n  if (ent.type !== "equipment") return;\n\n  const oldType = getProperty(ent.data.data, "armor.type");\n  if (oldType == null) return;\n\n  if (oldType === "clothing") {\n    updateData["data.equipmentType"] = "misc";\n    updateData["data.equipmentSubtype"] = "clothing";\n  }\n  else if (oldType === "shield") {\n    updateData["data.equipmentType"] = "shield";\n    updateData["data.equipmentSubtype"] = "lightShield";\n    updateData["data.slot"] = "shield";\n  }\n  else if (oldType === "misc") {\n    updateData["data.equipmentType"] = "misc";\n    updateData["data.equipmentSubtype"] = "wondrous";\n  }\n  else if (["light", "medium", "heavy"].includes(oldType)) {\n    updateData["data.equipmentType"] = "armor";\n    updateData["data.equipmentSubtype"] = `${oldType}Armor`;\n  }\n\n  updateData["data.armor.-=type"] = null;\n};\n\nconst _migrateWeaponSize = function(ent, updateData) {\n  if (ent.type !== "weapon") return;\n  \n  if (!getProperty(ent.data, "data.weaponData.size")) {\n    updateData["data.weaponData.size"] = "med";\n  }\n};\n\nconst _migrateAbilityTypes = function(ent, updateData) {\n  if (ent.type !== "feat") return;\n\n  if (getProperty(ent.data, "data.abilityType") == null) {\n    updateData["data.abilityType"] = "none";\n  }\n  // Fix buggy value\n  if (getProperty(ent.data, "data.abilityType") === "n/a") {\n    updateData["data.abilityType"] = "none";\n  }\n};\n\nconst _migrateClassLevels = function(ent, updateData) {\n  const level = getProperty(ent.data, "data.levels");\n  if (typeof level === "number" && updateData["data.level"] == null) {\n    updateData["data.level"] = level;\n  }\n};\n\nconst _migrateSavingThrowTypes = function(ent, updateData) {\n  if (getProperty(ent.data, "data.save.type") == null && typeof getProperty(ent.data, "data.save.description") === "string") {\n    const desc = getProperty(ent.data, "data.save.description");\n    if (desc.match(/REF/i)) updateData["data.save.type"] = "ref";\n    else if (desc.match(/FORT/i)) updateData["data.save.type"] = "fort";\n    else if (desc.match(/WILL/i)) updateData["data.save.type"] = "will";\n  }\n};\n\nconst _migrateCR = function(ent, updateData) {\n  // Migrate CR offset\n  const crOffset = getProperty(ent.data, "data.crOffset");\n  if (typeof crOffset === "number") {\n    updateData["data.crOffset"] = crOffset.toString();\n  }\n};\n\nconst _migrateItemChanges = function(ent, updateData) {\n  // Migrate changes\n  const changes = getProperty(ent.data, "data.changes");\n  if (changes != null && changes instanceof Array) {\n    let newChanges = [];\n    for (let c of changes) {\n      if (c instanceof Array) {\n        newChanges.push(mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_0__["ItemPF"].defaultChange, { formula: c[0], target: c[1], subTarget: c[2], modifier: c[3], value: c[4] }, {inplace: false}));\n      }\n      else {\n        newChanges.push(c);\n      }\n    }\n    updateData["data.changes"] = newChanges;\n  }\n\n  // Migrate context notes\n  const notes = getProperty(ent.data, "data.contextNotes");\n  if (notes != null && notes instanceof Array) {\n    let newNotes = [];\n    for (let n of notes) {\n      if (n instanceof Array) {\n        newNotes.push(mergeObject(_item_entity_js__WEBPACK_IMPORTED_MODULE_0__["ItemPF"].defaultChange, { text: n[0], target: n[1], subTarget: n[2] }, {inplace: false}));\n      }\n      else {\n        newNotes.push(n);\n      }\n    }\n    updateData["data.contextNotes"] = newNotes;\n  }\n};\n\nconst _migrateTemplateSize = function(ent, updateData) {\n  const measureSize = getProperty(ent.data, "data.measureTemplate.size");\n  if (typeof measureSize === "number") {\n    updateData["data.measureTemplate.size"] = measureSize.toString();\n  }\n};\n\nconst _migrateActorCR = function(ent, updateData) {\n  // Migrate base CR\n  const cr = getProperty(ent.data, "data.details.cr");\n  if (typeof cr === "number") {\n    updateData["data.details.cr.base"] = cr;\n    updateData["data.details.cr.total"] = cr;\n  }\n  else if (cr == null) {\n    updateData["data.details.cr.base"] = 1;\n    updateData["data.details.cr.total"] = 1;\n  }\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate from a string spell casting time like "1 Bonus Action" to separate fields for activation type and numeric cost\n * @private\n */\nconst _migrateCastTime = function(item, updateData) {\n  const value = getProperty(item.data, "time.value");\n  if ( !value ) return;\n  const ATS = invertObject(CONFIG.pf1.abilityActivationTypes);\n  let match = value.match(/([\\d]+\\s)?([\\w\\s]+)/);\n  if ( !match ) return;\n  let type = ATS[match[2]] || "none";\n  let cost = match[1] ? Number(match[1]) : 0;\n  if ( type === "none" ) cost = 0;\n  updateData["data.activation"] = {type, cost};\n};\n\n/* -------------------------------------------- */\n/*  General Migrations                          */\n/* -------------------------------------------- */\n\n/**\n * Migrate from a string based damage formula like "2d6 + 4 + 1d4" and a single string damage type like "slash" to\n * separated damage parts with associated damage type per part.\n * @private\n */\nconst _migrateDamage = function(item, updateData) {\n\n  // Regular Damage\n  let damage = item.data.damage;\n  if ( damage && damage.value ) {\n    let type = item.data.damageType ? item.data.damageType.value : "";\n    const parts = damage.value.split("+").map(s => s.trim()).map(p => [p, type || null]);\n    if ( item.type === "weapon" && parts.length ) parts[0][0] += " + @mod";\n    updateData["data.damage.parts"] = parts;\n    updateData["data.damage.-=value"] = null;\n  }\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate from a string duration field like "1 Minute" to separate fields for duration units and numeric value\n * @private\n */\nconst _migrateDuration = function(item, updateData) {\n  const TIME = invertObject(CONFIG.pf1.timePeriods);\n  const dur = item.data.duration;\n  if ( dur && dur.value && !dur.units ) {\n    let match = dur.value.match(/([\\d]+\\s)?([\\w\\s]+)/);\n    if ( !match ) return;\n    let units = TIME[match[2]] || "inst";\n    let value = units === "inst" ? "" : Number(match[1]) || "";\n    updateData["data.duration"] = {units, value};\n  }\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate from a string range field like "150 ft." to separate fields for units and numeric distance value\n * @private\n */\nconst _migrateRange = function(item, updateData) {\n  if ( updateData["data.range"] ) return;\n  const range = item.data.range;\n  if ( range && range.value && !range.units ) {\n    let match = range.value.match(/([\\d\\/]+)?(?:[\\s]+)?([\\w\\s]+)?/);\n    if ( !match ) return;\n    let units = "none";\n    if ( /ft/i.test(match[2]) ) units = "ft";\n    else if ( /mi/i.test(match[2]) ) units = "mi";\n    else if ( /touch/i.test(match[2]) ) units = "touch";\n    updateData["data.range.units"] = units;\n\n    // Range value\n    if ( match[1] ) {\n      let value = match[1].split("/").map(Number);\n      updateData["data.range.value"] = value[0];\n      if ( value[1] ) updateData["data.range.long"] = value[1];\n    }\n  }\n};\n\n/* -------------------------------------------- */\n\nconst _migrateRarity = function(item, updateData) {\n  const rar = item.data.rarity;\n  if ( (rar instanceof Object) && !rar.value ) updateData["data.rarity"] = "Common";\n  else if ( (typeof rar === "string") && (rar === "") ) updateData["data.rarity"] = "Common";\n};\n\n/* -------------------------------------------- */\n\n\n/**\n * A general migration to remove all fields from the data model which are flagged with a _deprecated tag\n * @private\n */\nconst _migrateRemoveDeprecated = function(ent, updateData, toFlatten) {\n  const flat = flattenObject(ent.data);\n\n  // Deprecate entire objects\n  const toDeprecate = Object.entries(flat).filter(e => e[0].endsWith("_deprecated") && (e[1] === true)).map(e => {\n    let parent = e[0].split(".");\n    parent.pop();\n    return parent.join(".");\n  });\n  for ( let k of toDeprecate ) {\n    let parts = k.split(".");\n    parts[parts.length-1] = "-=" + parts[parts.length-1];\n    updateData[`data.${parts.join(".")}`] = null;\n  }\n\n  // Deprecate types and labels\n  for ( let [k, v] of Object.entries(flat) ) {\n    let parts = k.split(".");\n    parts.pop();\n\n    // Skip any fields which have already been touched by other migrations\n    if ( toDeprecate.some(f => k.startsWith(f) ) ) continue;\n    if ( toFlatten.some(f => k.startsWith(f)) ) continue;\n    if ( updateData.hasOwnProperty(`data.${k}`) ) continue;\n\n    // Remove the data type field\n    const dtypes = ["Number", "String", "Boolean", "Array", "Object"];\n    if ( k.endsWith("type") && dtypes.includes(v) ) {\n      updateData[`data.${k.replace(".type", ".-=type")}`] = null;\n    }\n\n    // Remove string label\n    else if ( k.endsWith("label") ) {\n      updateData[`data.${k.replace(".label", ".-=label")}`] = null;\n    }\n  }\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate from a target string like "15 ft. Radius" to a more explicit data model with a value, units, and type\n * @private\n */\nconst _migrateTarget = function(item, updateData) {\n  const target = item.data.target;\n  if ( target.value && !Number.isNumeric(target.value) ) {\n\n    // Target Type\n    let type = null;\n    for ( let t of Object.keys(CONFIG.pf1.targetTypes) ) {\n      let rgx = new RegExp(t, "i");\n      if ( rgx.test(target.value) ) {\n        type = t;\n        continue;\n      }\n    }\n\n    // Target Units\n    let units = null;\n    if ( /ft/i.test(target.value) ) units = "ft";\n    else if ( /mi/i.test(target.value) ) units = "mi";\n    else if ( /touch/i.test(target.value) ) units = "touch";\n\n    // Target Value\n    let value = null;\n    let match = target.value.match(/([\\d]+)([\\w\\s]+)?/);\n    if ( match ) value = Number(match[1]);\n    else if ( /one/i.test(target.value) ) value = 1;\n    updateData["data.target"] = {type, units, value};\n  }\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate from string based components like "V,S,M" to boolean flags for each component\n * Move concentration and ritual flags into the components object\n * @private\n */\nconst _migrateSpellComponents = function(item, updateData) {\n  const components = item.data.components;\n  if ( !components.value ) return;\n  let comps = components.value.toUpperCase().replace(/\\s/g, "").split(",");\n  updateData["data.components"] = {\n    value: "",\n    verbal: comps.includes("V"),\n    somatic: comps.includes("M"),\n    material: comps.includes("S"),\n    concentration: item.data.concentration.value === true,\n    ritual: item.data.ritual.value === true\n  };\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate from a simple object with save.value to an expanded object where the DC is also configured\n * @private\n */\nconst _migrateSpellAction = function(item, updateData) {\n\n  // Set default action type for spells\n  if ( item.data.spellType ) {\n    updateData["data.actionType"] = {\n      "attack": "rsak",\n      "save": "save",\n      "heal": "heal",\n      "utility": "util",\n    }[item.data.spellType.value] || "util";\n  }\n\n  // Spell saving throw\n  const save = item.data.save;\n  if ( !save.value ) return;\n  updateData["data.save"] = {\n    ability: save.value,\n    dc: null\n  };\n  updateData["data.save.-=value"] = null;\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate spell preparation data to the new preparation object\n * @private\n */\nconst _migrateSpellPreparation = function(item, updateData) {\n  const prep = item.data.preparation;\n  if ( prep && !prep.mode ) {\n    updateData["data.preparation.mode"] = "prepared";\n    updateData["data.preparation.prepared"] = item.data.prepared ? Boolean(item.data.prepared.value) : false;\n  }\n};\n\n/* -------------------------------------------- */\n\n/**\n * Migrate from a string based weapon properties like "Heavy, Two-Handed" to an object of boolean flags\n * @private\n */\nconst _migrateWeaponProperties = function(item, updateData) {\n\n  // Set default activation mode for weapons\n  updateData["data.activation"] = {type: "action", cost: 1};\n\n  // Set default action type for weapons\n  updateData["data.actionType"] = {\n    "simpleM": "mwak",\n    "simpleR": "rwak",\n    "martialM": "mwak",\n    "martialR": "rwak",\n    "natural": "mwak",\n    "improv": "mwak",\n    "ammo": "rwak"\n  }[item.data.weaponType.value] || "mwak";\n\n  // Set default melee weapon range\n  if ( updateData["data.actionType"] === "mwak" ) {\n    updateData["data.range"] = {\n      value: updateData["data.properties.rch"] ? 10 : 5,\n      units: "ft"\n    }\n  }\n\n  // Map weapon property strings to boolean flags\n  const props = item.data.properties;\n  if ( props.value ) {\n    const labels = invertObject(CONFIG.pf1.weaponProperties);\n    for (let k of props.value.split(",").map(p => p.trim())) {\n      if (labels[k]) updateData[`data.properties.${labels[k]}`] = true;\n    }\n    updateData["data.properties.-=value"] = null;\n  }\n};\n\n\n//# sourceURL=webpack://pf1/./module/migration.js?')},"./module/misc/chat-attack.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChatAttack", function() { return ChatAttack; });\nclass ChatAttack {\n  constructor(item, {label="", rollData={}, primaryAttack=true}={}) {\n    this._baseRollData = rollData;\n    this.primaryAttack = primaryAttack;\n    this.setItem(item);\n    this.label = label;\n\n    this.attack = {\n      flavor: "",\n      tooltip: "",\n      total: 0,\n      isCrit: false,\n      isFumble: false,\n      roll: null,\n    };\n    this.critConfirm = {\n      flavor: "",\n      tooltip: "",\n      total: 0,\n      isCrit: false,\n      isFumble: false,\n      roll: null,\n    };\n    this.hasAttack = false;\n    this.hasCritConfirm = false;\n\n    this.damage = {\n      flavor: "",\n      tooltip: "",\n      total: 0,\n      rolls: [],\n    };\n    this.critDamage = {\n      flavor : "",\n      tooltip: "",\n      total  : 0,\n      rolls: [],\n    };\n    this.hasDamage = false;\n\n    this.cards           = [];\n    this.attackNotes     = [];\n    this.effectNotes     = [];\n    this.attackNotesHTML = "";\n    this.effectNotesHTML = "";\n  }\n\n  get critRange() {\n    return getProperty(this.item, "data.data.ability.critRange") || 20;\n  }\n\n  /**\n   * Sets the attack\'s item reference.\n   * @param {ItemPF} item - The item to reference.\n   */\n  setItem(item) {\n    if (item == null) {\n      this.rollData = {};\n      this.item = null;\n      return;\n    }\n\n    this.item = item;\n    this.rollData = item.actor != null ? item.actor.getRollData() : {};\n    this.rollData.item = duplicate(this.item.data.data);\n    this.rollData = mergeObject(this.rollData, this._baseRollData);\n\n    this.setRollData();\n  }\n\n  /**\n   * Applies changes to the roll data.\n   */\n  setRollData() {\n    let data = this.rollData;\n    // Set critical hit multiplier\n    data.critMult = 1;\n    // Add critical confirmation bonus\n    data.critConfirmBonus = data.item.critConfirmBonus;\n    // Determine ability multiplier\n    if (data.item.ability.damageMult != null) data.ablMult = data.item.ability.damageMult;\n    // Lower ability multiplier for secondary attacks\n    if (this.primaryAttack === false && getProperty(data.ablMult > 0)) {\n      data.ablMult = 0.5;\n    }\n    // Set spell data\n    if (this.item.type === "spell") {\n      const spellbook = this.item.spellbook;\n      data.cl = spellbook.cl.total + (this.item.data.data.clOffset || 0);\n    }\n  }\n\n  setAttackNotesHTML() {\n    if (this.attackNotes.length === 0) {\n      this.attackNotesHTML = "";\n      return;\n    }\n\n    let result = "";\n    for (let n of this.attackNotes) {\n      if (n.length > 0) {\n        result += `<span class="tag">${n}</span>`;\n      }\n    }\n    const inner = TextEditor.enrichHTML(result, { rollData: this.rollData });\n    this.attackNotesHTML =  `<div class="flexcol property-group gm-sensitive"><label>${game.i18n.localize("PF1.AttackNotes")}</label><div class="flexrow">${inner}</div></div>`;\n  }\n\n  setEffectNotesHTML() {\n    if (this.effectNotes.length === 0) {\n      this.effectNotesHTML = "";\n      return;\n    }\n\n    let result = "";\n    for (let n of this.effectNotes) {\n      if (n.length > 0) {\n        result += `<span class="tag">${n}</span>`;\n      }\n    }\n    const inner = TextEditor.enrichHTML(result, { rollData: this.rollData });\n    this.effectNotesHTML = `<div class="flexcol property-group gm-sensitive"><label>${game.i18n.localize("PF1.EffectNotes")}</label><div class="flexrow">${inner}</div></div>`;\n  }\n\n  async addAttack({bonus=null, extraParts=[], critical=false}={}) {\n    if (!this.item) return;\n\n    this.hasAttack = true;\n    let data = this.attack;\n    if (critical === true) {\n      data = this.critConfirm;\n      extraParts.push("@critConfirmBonus");\n    }\n\n    // Roll attack\n    let roll = this.item.rollAttack({data: this.rollData, bonus: bonus, extraParts: extraParts, primaryAttack: this.primaryAttack });\n    data.roll = roll;\n    let d20 = roll.parts[0];\n    let critType = 0;\n    if ((d20.total >= this.critRange && !critical) || (d20.total === 20 && critical)) critType = 1;\n    else if (d20.total === 1) critType = 2;\n\n    // Add tooltip\n    let tooltip   = $(await roll.getTooltip()).prepend(`<div class="dice-formula">${roll.formula}</div>`)[0].outerHTML;\n    data.flavor   = critical ? game.i18n.localize("PF1.CriticalConfirmation") : this.label;\n    data.tooltip  = tooltip;\n    data.total    = roll.total;\n    data.isCrit   = critType === 1;\n    data.isFumble = critType === 2;\n\n    // Add crit confirm\n    if (!critical && d20.total >= this.critRange) {\n      this.hasCritConfirm    = true;\n      this.rollData.critMult = this.rollData.item.ability.critMult;\n\n      await this.addAttack({bonus: bonus, extraParts: extraParts, critical: true});\n    }\n\n    if (this.attackNotes === "") this.addAttackNotes();\n  }\n\n  addAttackNotes() {\n    if (!this.item) return;\n\n    let notes = [];\n    if (this.item != null && this.item.actor != null) {\n      notes = this.item.actor.getContextNotes("attacks.attack").reduce((arr, o) => {\n        for (let n of o.notes) {\n          arr.push(...n.split(/[\\n\\r]+/));\n        }\n        return arr;\n      }, []);\n    }\n    if (this.item != null && this.item.data.data.attackNotes) {\n      notes.push(...this.item.data.data.attackNotes.split(/[\\n\\r]+/));\n    }\n\n    this.attackNotes = notes;\n    this.setAttackNotesHTML();\n  }\n\n  async addDamage({extraParts=[], critical=false}={}) {\n    if (!this.item) return;\n\n    this.hasDamage = true;\n    let data = this.damage;\n    if (critical === true) data = this.critDamage;\n\n    let rollData = duplicate(this.rollData);\n    // Enforce critical multiplier\n    if (!critical) rollData.critMult = 1;\n    \n    const rolls = this.item.rollDamage({data: rollData, extraParts: extraParts, primaryAttack: this.primaryAttack, critical: critical});\n    data.rolls = rolls;\n    // Add tooltip\n    let tooltips = "";\n    let totalDamage = 0;\n    for (let roll of rolls) {\n      let tooltip = $(await roll.roll.getTooltip()).prepend(`<div class="dice-formula">${roll.roll.formula}</div>`)[0].outerHTML;\n      // Alter tooltip\n      let tooltipHtml = $(tooltip);\n      totalDamage += roll.roll.total;\n      let totalText = roll.roll.total.toString();\n      if (roll.damageType.length) totalText += ` (${roll.damageType})`;\n      tooltipHtml.find(".part-total").text(totalText);\n      tooltip = tooltipHtml[0].outerHTML;\n      \n      tooltips += tooltip;\n    }\n    // Add normal data\n    let flavor;\n    if (!critical) flavor = this.item.isHealing ? game.i18n.localize("PF1.Healing")         : game.i18n.localize("PF1.Damage");\n    else           flavor = this.item.isHealing ? game.i18n.localize("PF1.HealingCritical") : game.i18n.localize("PF1.DamageCritical");\n    let damageTypes = this.item.data.data.damage.parts.reduce((cur, o) => {\n      if (o[1] !== "" && cur.indexOf(o[1]) === -1) cur.push(o[1]);\n      return cur;\n    }, []);\n    // Add critical damage parts\n    if (critical === true && getProperty(this.item.data, "data.damage.critParts") != null) {\n      damageTypes.push(this.item.data.data.damage.critParts.reduce((cur, o) => {\n        if (o[1] !== "" && cur.indexOf(o[1]) === -1) cur.push(o[1]);\n        return cur;\n      }, []));\n    }\n\n    // Add card\n    if (critical) {\n      if (this.item.isHealing) this.cards.push({ label: game.i18n.localize("PF1.ApplyCriticalHealing"), value: -totalDamage, action: "applyDamage", });\n      else                     this.cards.push({ label: game.i18n.localize("PF1.ApplyCriticalDamage") , value:  totalDamage, action: "applyDamage", });\n    }\n    else {\n      if (this.item.isHealing) this.cards.push({ label: game.i18n.localize("PF1.ApplyHealing"), value: -totalDamage, action: "applyDamage", });\n      else                     this.cards.push({ label: game.i18n.localize("PF1.ApplyDamage") , value:  totalDamage, action: "applyDamage", });\n    }\n\n    data.flavor = damageTypes.length > 0 ? `${flavor} (${damageTypes.join(", ")})` : flavor;\n    data.tooltip = tooltips;\n    data.total = rolls.reduce((cur, roll) => {\n      return cur + roll.roll.total;\n    }, 0);\n  }\n\n  addEffectNotes() {\n    if (!this.item) return;\n\n    let notes = [];\n    if (this.item != null && this.item.actor != null) {\n      notes = this.item.actor.getContextNotes("attacks.effect").reduce((arr, o) => {\n        for (let n of o.notes) {\n          arr.push(...n.split(/[\\n\\r]+/));\n        }\n        return arr;\n      }, []);\n    }\n    if (this.item != null && this.item.data.data.effectNotes) {\n      notes.push(...this.item.data.data.effectNotes.split(/[\\n\\r]+/));\n    }\n\n    this.effectNotes = notes;\n    this.setEffectNotesHTML();\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/misc/chat-attack.js?')},"./module/misc/links.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkFunctions", function() { return LinkFunctions; });\nconst LinkFunctions = {\n  "charges": function(item, links) {\n    for (let l of links) {\n      const otherItem = this.items.find(o => o._id === l.id);\n      if (!otherItem) continue;\n\n      otherItem.links.charges = item;\n      otherItem.prepareLinks();\n    }\n  },\n};\n\n\n//# sourceURL=webpack://pf1/./module/misc/links.js?')},"./module/misc/list-tabs.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListTabs", function() { return ListTabs; });\nclass ListTabs {\n  constructor({navSelector, contentSelector, initial, callback}={}) {\n    this.active = initial;\n    this.callback = callback;\n    this._navSelector = navSelector;\n    this._nav = null;\n    this._list = null;\n    this._contentSelector = contentSelector;\n    this._content = null;\n  }\n\n  bind(html) {\n\n    // Identify navigation element\n    this._nav = html.querySelector(this._navSelector);\n    if (!this._nav) return;\n    this._list = this._nav.querySelector("select.tabs");\n    if (!this._list) return;\n\n    // Set first active tab\n    if (!this._list.querySelector("option.active")) {\n      const option = this._list.options[0];\n      option.classList.toggle("active", true);\n      this.active = option.dataset.tab;\n    }\n\n    // Identify content container\n    if (!this._contentSelector) this._content = null;\n    else if (html.matches(this._contentSelector)) this._content = html;\n    else this._content = html.querySelector(this._contentSelector);\n\n    // Initialize the active tab\n    this.activate(this.active);\n\n    // Register event\n    this._list.addEventListener("change", this._onClickNav.bind(this));\n  }\n\n  activate(tabName, {triggerCallback=false}={}) {\n\n    // Validate the requested tab name\n    const items = this._nav.querySelectorAll("select.tabs option");\n    if (!items.length) return;\n    const valid = Array.from(items).some(i => i.dataset.tab === tabName);\n    if (!valid) tabName = items[0].dataset.tab;\n\n    // Change active tab\n    for (let a of items) {\n      if (a.dataset.tab === tabName) {\n        this._list.value = a.value;\n      }\n    }\n\n    // Change active content\n    if (this._content) {\n      const tabs = this._content.querySelectorAll(".tab");\n      for (let t of tabs) {\n        t.classList.toggle("active", t.dataset.tab === tabName);\n      }\n    }\n\n    // Store the active tab\n    this.active = tabName;\n\n    // Optionally trigger the callback function\n    if (triggerCallback) this.callback(null, this, tabName);\n  }\n\n  _onClickNav(event) {\n    event.preventDefault();\n\n    const a = event.currentTarget;\n    const option = a.options[a.selectedIndex];\n    const tabName = option.dataset.tab;\n    if (tabName !== this.active) this.activate(tabName, {triggerCallback: true});\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/misc/list-tabs.js?')},"./module/patch-core.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatchCore", function() { return PatchCore; });\n/* harmony import */ var _combat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./combat.js */ "./module/combat.js");\n/* harmony import */ var _dice_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dice.js */ "./module/dice.js");\n/* harmony import */ var _low_light_vision_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./low-light-vision.js */ "./module/low-light-vision.js");\n/* harmony import */ var _measure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./measure.js */ "./module/measure.js");\n\n\n\nconst FormApplication_close = FormApplication.prototype.close;\n\nfunction PatchCore() {\n  // Patch getTemplate to prevent unwanted indentation in things things like <textarea> elements.\n  async function PF1_getTemplate(path) {\n    if ( !_templateCache.hasOwnProperty(path) ) {\n      await new Promise(resolve => {\n        game.socket.emit(\'template\', path, resp => {\n          const compiled = Handlebars.compile(resp.html, { preventIndent: true });\n          Handlebars.registerPartial(path, compiled);\n          _templateCache[path] = compiled;\n          console.log(`Foundry VTT | Retrieved and compiled template ${path}`);\n          resolve(compiled);\n        });\n      });\n    } \n    return _templateCache[path];\n  }\n\n  // Patch TokenHUD.getData to show resource bars even if their value is 0\n  const TokenHUD_getData = TokenHUD.prototype.getData;\n  TokenHUD.prototype.getData = function() {\n    const data = TokenHUD_getData.call(this);\n    const bar1 = this.object.getBarAttribute("bar1");\n    const bar2 = this.object.getBarAttribute("bar2");\n    return mergeObject(data, {\n      displayBar1: bar1 != null && bar1.attribute != null && bar1.value != null,\n      displayBar2: bar2 != null && bar2.attribute != null && bar2.value != null\n    });\n  }\n\n  // Patch FormApplication\n  FormApplication.prototype.saveMCEContent = async function(updateData=null) {};\n\n  FormApplication.prototype.close = async function(options={}) {\n    await this.saveMCEContent();\n    return FormApplication_close.call(this, options);\n  };\n\n  // Patch Roll._replaceData\n  const Roll__replaceData = Roll.prototype._replaceData;\n  Roll.prototype._replaceData = function(formula) {\n    let result = Roll__replaceData.call(this, formula);\n    result = Object(_dice_js__WEBPACK_IMPORTED_MODULE_1__["_preProcessDiceFormula"])(result, this.data);\n    return result;\n  };\n\n  // Patch, patch, patch\n  Combat.prototype._getInitiativeFormula = _combat_js__WEBPACK_IMPORTED_MODULE_0__["_getInitiativeFormula"];\n  Combat.prototype.rollInitiative = _combat_js__WEBPACK_IMPORTED_MODULE_0__["_rollInitiative"];\n  window.getTemplate = PF1_getTemplate;\n}\n\n\n\n\n\n//# sourceURL=webpack://pf1/./module/patch-core.js?')},"./module/pixi/ability-template.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbilityTemplate", function() { return AbilityTemplate; });\n/**\n * A helper class for building MeasuredTemplates for 5e spells and abilities\n * @extends {MeasuredTemplate}\n */\nclass AbilityTemplate extends MeasuredTemplate {\n\n  /**\n   * A factory method to create an AbilityTemplate instance using provided data\n   * @param {string} type -             The type of template ("cone", "circle", "rect" or "ray")\n   * @param {number} distance -         The distance/size of the template\n   * @return {AbilityTemplate|null}     The template object, or null if the data does not produce a template\n   */\n  static fromData(options) {\n    let type = options.type;\n    let distance = options.distance;\n    if (!type) return null;\n    if (!distance) return null;\n    if (!["cone", "circle", "rect", "ray"].includes(type)) return null;\n\n    // Prepare template data\n    const templateData = {\n      t: type,\n      user: game.user._id,\n      distance: distance || 5,\n      direction: 0,\n      x: 0,\n      y: 0,\n      fillColor: options.color ? options.color : game.user.color,\n      texture: options.texture ? options.texture : null,\n      _id: randomID(16),\n    };\n\n    // Additional type-specific data\n    switch (type) {\n      case "cone":\n        if (game.settings.get("pf1", "measureStyle") === true) templateData.angle = 90;\n        else templateData.angle = 53.13;\n        break;\n      case "rect":\n        templateData.distance = distance || 5;\n        // templateData.width = target.value;\n        templateData.direction = 45;\n        break;\n      case "ray":\n        templateData.width = 5;\n        break;\n      default:\n        break;\n    }\n\n    // Return the template constructed from the item data\n    return new this(templateData);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Creates a preview of the spell template\n   * @param {Event} event   The initiating click event\n   */\n  async drawPreview(event) {\n    const initialLayer = canvas.activeLayer;\n    this.draw();\n    this.active = true;\n    this.layer.activate();\n    this.layer.preview.addChild(this);\n    return this.activatePreviewListeners(initialLayer);\n  }\n\n  /* -------------------------------------------- */\n\n  /**\n   * Activate listeners for the template preview\n   * @param {CanvasLayer} initialLayer  The initially active CanvasLayer to re-activate after the workflow is complete\n   * @returns {Promise<boolean>} Returns true if placed, or false if cancelled\n   */\n  activatePreviewListeners(initialLayer) {\n    return new Promise(resolve => {\n      const handlers = {};\n      let moveTime = 0;\n\n      const pfStyle = game.settings.get("pf1", "measureStyle") === true;\n\n      // Update placement (mouse-move)\n      handlers.mm = event => {\n        event.stopPropagation();\n        let now = Date.now(); // Apply a 20ms throttle\n        if ( now - moveTime <= 20 ) return;\n        const center = event.data.getLocalPosition(this.layer);\n        let pos = canvas.grid.getSnappedPosition(center.x, center.y, 2);\n        this.data.x = pos.x;\n        this.data.y = pos.y;\n        this.refresh();\n        canvas.app.render();\n        moveTime = now;\n      };\n\n      // Cancel the workflow (right-click)\n      handlers.rc = (event, canResolve=true) => {\n        this.layer.preview.removeChildren();\n        canvas.stage.off("mousemove", handlers.mm);\n        canvas.stage.off("mousedown", handlers.lc);\n        canvas.app.view.oncontextmenu = null;\n        canvas.app.view.onwheel = null;\n        // Clear highlight\n        this.active = false;\n        const hl = canvas.grid.getHighlightLayer(`Template.${this.id}`);\n        hl.clear();\n\n        initialLayer.activate();\n        if (canResolve) resolve(false);\n      };\n\n      // Confirm the workflow (left-click)\n      handlers.lc = event => {\n        handlers.rc(event, false);\n\n        // Confirm final snapped position\n        const destination = canvas.grid.getSnappedPosition(this.x, this.y, 2);\n        this.data.x = destination.x;\n        this.data.y = destination.y;\n\n        // Create the template\n        canvas.scene.createEmbeddedEntity("MeasuredTemplate", this.data);\n        resolve(true);\n      };\n\n      // Rotate the template by 3 degree increments (mouse-wheel)\n      handlers.mw = event => {\n        if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\n        event.stopPropagation();\n        let delta, snap;\n        if (event.ctrlKey) {\n          if (this.data.t === "rect") {\n            delta = Math.sqrt(canvas.dimensions.distance*canvas.dimensions.distance);\n          }\n          else {\n            delta = canvas.dimensions.distance;\n          }\n          this.data.distance += (delta * -Math.sign(event.deltaY));\n        }\n        else {\n          if (pfStyle && this.data.t === "cone") {\n            delta = 90;\n            snap = event.shiftKey ? delta : 45;\n          }\n          else {\n            delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\n            snap = event.shiftKey ? delta : 5;\n          }\n          this.data.direction += (snap * Math.sign(event.deltaY));\n        }\n        this.refresh();\n      };\n\n      // Activate listeners\n      if (this.controlIcon) this.controlIcon.removeAllListeners();\n      canvas.stage.on("mousemove", handlers.mm);\n      canvas.stage.on("mousedown", handlers.lc);\n      canvas.app.view.oncontextmenu = handlers.rc;\n      canvas.app.view.onwheel = handlers.mw;\n      console.log(this);\n      this.hitArea = new PIXI.Polygon([]);\n    });\n  }\n\n  refresh() {\n    if (!this.template) return;\n\n    super.refresh();\n\n    if (this.active) {\n      this.highlightGrid();\n    }\n\n    return this;\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/pixi/ability-template.js?')},"./module/settings.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerSystemSettings", function() { return registerSystemSettings; });\n/* harmony import */ var _config_health_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config/health.js */ "./module/config/health.js");\n/* harmony import */ var _config_experience_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config/experience.js */ "./module/config/experience.js");\n\n\n\nconst registerSystemSettings = function() {\n  /**\n   * Track the system version upon which point a migration was last applied\n   */\n  game.settings.register("pf1", "systemMigrationVersion", {\n    name: "System Migration Version",\n    scope: "world",\n    config: false,\n    type: Number,\n    default: 0\n  });\n\n  // Health configuration\n  game.settings.registerMenu("pf1",\n    "healthConfig", {\n      name: "SETTINGS.pf1HealthConfigName",\n      label: "SETTINGS.pf1HealthConfigLabel",\n      hint: "SETTINGS.pf1HealthConfigHint",\n      icon: "fas fa-heartbeat",\n      type: _config_health_js__WEBPACK_IMPORTED_MODULE_0__["HealthConfig"],\n      restricted: true\n    }\n  );\n  game.settings.register("pf1", "healthConfig", {\n    name: "SETTINGS.pf1HealthConfigName",\n    scope: "world",\n    default: _config_health_js__WEBPACK_IMPORTED_MODULE_0__["HealthConfig"].defaultSettings,\n    type: Object,\n    config: false,\n    onChange: () => {\n      game.actors.entities.forEach(o => { o.update({}); });\n      Object.values(game.actors.tokens).forEach(o => { o.update({}); });\n    }\n  });\n\n  // Experience configuration\n  game.settings.registerMenu("pf1",\n    "experienceConfig", {\n      name: "PF1.ExperienceConfigName",\n      label: "PF1.ExperienceConfigLabel",\n      hint: "PF1.ExperienceConfigHint",\n      icon: "fas fa-book",\n      type: _config_experience_js__WEBPACK_IMPORTED_MODULE_1__["ExperienceConfig"],\n      restricted: true,\n    }\n  );\n  game.settings.register("pf1", "experienceConfig", {\n    name: "PF1.ExperienceConfigName",\n    scope: "world",\n    default: _config_experience_js__WEBPACK_IMPORTED_MODULE_1__["ExperienceConfig"].defaultSettings,\n    type: Object,\n    config: false,\n    onChange: () => {\n      game.actors.entities.forEach(o => { o.update({}); });\n      Object.values(game.actors.tokens).forEach(o => { o.update({}); });\n    }\n  });\n\n  /**\n   * Register diagonal movement rule setting\n   */\n  game.settings.register("pf1", "diagonalMovement", {\n    name: "SETTINGS.pf1DiagN",\n    hint: "SETTINGS.pf1DiagL",\n    scope: "world",\n    config: true,\n    default: "5105",\n    type: String,\n    choices: {\n      "555": "SETTINGS.pf1DiagPHB",\n      "5105": "SETTINGS.pf1DiagDMG"\n    },\n    onChange: rule => canvas.grid.diagonalRule = rule\n  });\n\n  /**\n   * Experience rate\n   * @deprecated\n   */\n  game.settings.register("pf1", "experienceRate", {\n    name: "SETTINGS.pf1ExpRateN",\n    hint: "SETTINGS.pf1ExpRateL",\n    scope: "world",\n    config: false,\n    default: "",\n    type: String,\n    onChange: () => {\n      [...game.actors.entities, ...Object.values(game.actors.tokens)].filter(o => {\n        return o.data.type === "character";\n      }).forEach(o => {\n        o.update({});\n        if (o.sheet != null && o.sheet._state > 0) o.sheet.render();\n      });\n    },\n  });\n  \n  /**\n   * System of Units\n   */\n  game.settings.register("pf1", "units", {\n    name: "SETTINGS.pf1UnitsN",\n    hint: "SETTINGS.pf1UnitsL",\n    scope: "world",\n    config: true,\n    default: "imperial",\n    type: String,\n    choices: {\n      "imperial": "Imperial (feet, lbs)",\n      "metric": "Metric (meters, kg)"\n    },\n    onChange: () => {\n      [...game.actors.entities, ...Object.values(game.actors.tokens)].filter(o => {\n        return o.data.type === "character";\n      }).forEach(o => {\n        o.update({});\n        if (o.sheet != null && o.sheet._state > 0) o.sheet.render();\n      });\n    },\n  });\n\n  /**\n   * Option to allow the background skills optional ruleset.\n   */\n  game.settings.register("pf1", "allowBackgroundSkills", {\n    name: "SETTINGS.pf1BackgroundSkillsN",\n    hint: "SETTINGS.pf1BackgroundSkillsH",\n    scope: "world",\n    config: true,\n    default: false,\n    type: Boolean,\n    onChange: () => {\n      game.actors.entities.forEach(o => { if (o.sheet && o.sheet.rendered) o.sheet.render(true); });\n      Object.values(game.actors.tokens).forEach(o => { if (o.sheet && o.sheet.rendered) o.sheet.render(true); });\n    },\n  });\n\n  /**\n   * Option to use the Fractional Base Bonuses optional ruleset.\n   */\n  game.settings.register("pf1", "useFractionalBaseBonuses", {\n    name: "SETTINGS.pf1FractionalBaseBonusesN",\n    hint: "SETTINGS.pf1FractionalBaseBonusesH",\n    scope: "world",\n    config: true,\n    default: false,\n    type: Boolean,\n    onChange: () => {\n      game.actors.entities.forEach(o => { o.update({}); });\n      Object.values(game.actors.tokens).forEach(o => { o.update({}); });\n    },\n  });\n\n  /**\n   * Option to automatically collapse Item Card descriptions\n   */\n  game.settings.register("pf1", "autoCollapseItemCards", {\n    name: "SETTINGS.pf1AutoCollapseCardN",\n    hint: "SETTINGS.pf1AutoCollapseCardL",\n    scope: "client",\n    config: true,\n    default: false,\n    type: Boolean,\n    onChange: () => {\n      ui.chat.render();\n    }\n  });\n\n  /**\n   * Option to change measure style\n   */\n  game.settings.register("pf1", "measureStyle", {\n    name: "SETTINGS.pf1MeasureStyleN",\n    hint: "SETTINGS.pf1MeasureStyleL",\n    scope: "world",\n    config: true,\n    default: true,\n    type: Boolean,\n  });\n\n  /**\n   * Low-light Vision Mode\n   */\n  game.settings.register("pf1", "lowLightVisionMode", {\n    name: "SETTINGS.pf1LowLightVisionModeN",\n    hint: "SETTINGS.pf1LowLightVisionModeH",\n    scope: "world",\n    config: true,\n    default: false,\n    type: Boolean,\n  });\n\n  /**\n   * Preload Compendiums\n   */\n  game.settings.register("pf1", "preloadCompendiums", {\n    name: "SETTINGS.pf1PreloadCompendiumsN",\n    hint: "SETTINGS.pf1PreloadCompendiumsH",\n    scope: "client",\n    config: true,\n    default: false,\n    type: Boolean,\n  });\n};\n\n\n//# sourceURL=webpack://pf1/./module/settings.js?')},"./module/sidebar/chat-message.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChatMessagePF", function() { return ChatMessagePF; });\nclass ChatMessagePF extends ChatMessage {\n  async render() {\n\n    // Determine some metadata\n    const data = duplicate(this.data);\n    const isWhisper = this.data.whisper.length;\n    const isVisible = this.isContentVisible;\n\n    // Construct message data\n    const messageData = {\n      message: data,\n      user: game.user,\n      author: this.user,\n      alias: this.alias,\n      cssClass: [\n        this.data.type === CONST.CHAT_MESSAGE_TYPES.IC ? "ic" : null,\n        this.data.type === CONST.CHAT_MESSAGE_TYPES.EMOTE ? "emote" : null,\n        isWhisper ? "whisper" : null,\n        this.data.blind ? "blind": null\n      ].filter(c => c !== null).join(" "),\n      isWhisper: this.data.whisper.some(id => id !== game.user._id),\n      whisperTo: this.data.whisper.map(u => {\n        let user = game.users.get(u);\n        return user ? user.name : null;\n      }).filter(n => n !== null).join(", ")\n    };\n\n    // Enrich some data for dice rolls\n    if (this.isRoll && !this.getFlag("pf1", "noRollRender")) {\n\n      // Render HTML if needed\n      if ( data.content.slice(0, 1) !== "<" ) {\n        data.content = await this.roll.render({isPrivate: !isVisible});\n      }\n\n      // Conceal some private roll information\n      if ( !isVisible ) {\n        data.flavor = `${this.user.name} privately rolled some dice`;\n        messageData.isWhisper = false;\n        messageData.alias = this.user.name;\n      }\n    }\n\n    // Define a border color\n    if ( this.data.type === CONST.CHAT_MESSAGE_TYPES.OOC ) {\n      messageData.borderColor = this.user.color;\n    }\n\n    // Render the chat message\n    let html = await renderTemplate(CONFIG.ChatMessage.template, messageData);\n    html = $(html);\n\n    // Call a hook for the rendered ChatMessage data\n    Hooks.call("renderChatMessage", this, html, messageData);\n    return html;\n\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/sidebar/chat-message.js?')},"./module/sidebar/compendium.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompendiumDirectoryPF", function() { return CompendiumDirectoryPF; });\n/* harmony import */ var _apps_compendium_browser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../apps/compendium-browser.js */ "./module/apps/compendium-browser.js");\n\n\nclass CompendiumDirectoryPF extends CompendiumDirectory {\n  constructor(...args) {\n    super(...args);\n\n    this.compendiums = {\n      spells: new _apps_compendium_browser_js__WEBPACK_IMPORTED_MODULE_0__["CompendiumBrowser"]({ type: "spells", entityType: "Item" }),\n      items: new _apps_compendium_browser_js__WEBPACK_IMPORTED_MODULE_0__["CompendiumBrowser"]({ type: "items", entityType: "Item" }),\n      bestiary: new _apps_compendium_browser_js__WEBPACK_IMPORTED_MODULE_0__["CompendiumBrowser"]({ type: "bestiary", entityType: "Actor" }),\n      feats: new _apps_compendium_browser_js__WEBPACK_IMPORTED_MODULE_0__["CompendiumBrowser"]({ type: "feats", entityType: "Item" }),\n      classes: new _apps_compendium_browser_js__WEBPACK_IMPORTED_MODULE_0__["CompendiumBrowser"]({ type: "classes", entityType: "Item" }),\n    };\n  }\n\n  static get defaultOptions() {\n    return mergeObject(super.defaultOptions, {\n      template: "systems/pf1/templates/sidebar/compendium.html",\n    });\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find(".compendium-footer .compendium.spells").click(e => this._onBrowseCompendium(e, "spells"));\n    html.find(".compendium-footer .compendium.items").click(e => this._onBrowseCompendium(e, "items"));\n    html.find(".compendium-footer .compendium.bestiary").click(e => this._onBrowseCompendium(e, "bestiary"));\n    html.find(".compendium-footer .compendium.feats").click(e => this._onBrowseCompendium(e, "feats"));\n    html.find(".compendium-footer .compendium.classes").click(e => this._onBrowseCompendium(e, "classes"));\n  }\n\n  _onBrowseCompendium(event, type) {\n    event.preventDefault();\n\n    this.compendiums[type]._render(true);\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/sidebar/compendium.js?')},"./module/socket.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initializeSocket", function() { return initializeSocket; });\nfunction initializeSocket() {\n  game.socket.on("system.pf1", async (args) => {\n    switch (args.eventType) {\n      case "cleanItemLink":\n        // Get actor\n        const actor = await fromUuid(args.actorUUID);\n        // Get item\n        const parentItemData = await fromUuid(args.itemUUID);\n        const parentItem = actor.items.find(o => o._id === parentItemData._id);\n        // Get link data\n        const link = args.link;\n        const linkType = args.linkType;\n        // Clean item links\n        parentItem._cleanLink(link, linkType);\n        break;\n    }\n  });\n}\n\n\n//# sourceURL=webpack://pf1/./module/socket.js?')},"./module/templates.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preloadHandlebarsTemplates", function() { return preloadHandlebarsTemplates; });\n/**\n * Define a set of template paths to pre-load\n * Pre-loaded templates are compiled and cached for fast access when rendering\n * @return {Promise}\n */\nconst preloadHandlebarsTemplates = async function() {\n\n  // Define template paths to load\n  const templatePaths = [\n\n    // Actor Sheet Partials\n    "systems/pf1/templates/actors/parts/actor-traits.html",\n    "systems/pf1/templates/actors/parts/actor-inventory.html",\n    "systems/pf1/templates/actors/parts/actor-features.html",\n    "systems/pf1/templates/actors/parts/actor-spellbook-front.html",\n    "systems/pf1/templates/actors/parts/actor-spellbook.html",\n    "systems/pf1/templates/actors/parts/actor-skills-front.html",\n    "systems/pf1/templates/actors/parts/actor-skills.html",\n    "systems/pf1/templates/actors/parts/actor-defenses.html",\n    "systems/pf1/templates/actors/parts/actor-buffs.html",\n    "systems/pf1/templates/actors/parts/actor-attacks.html",\n\n    // Item Sheet Partials\n    "systems/pf1/templates/items/parts/item-action.html",\n    "systems/pf1/templates/items/parts/item-activation.html",\n    "systems/pf1/templates/items/parts/item-description.html",\n    "systems/pf1/templates/items/parts/item-changes.html",\n    "systems/pf1/templates/items/parts/item-notes.html",\n    "systems/pf1/templates/items/parts/item-template.html",\n    "systems/pf1/templates/items/parts/item-links.html",\n    "systems/pf1/templates/items/parts/links/item-template.html",\n\n    // Misc\n    "systems/pf1/templates/misc/token-config.html",\n\n    // Apps\n    "systems/pf1/templates/apps/attack-roll-dialog.html",\n    "systems/pf1/templates/apps/links.html",\n    "systems/pf1/templates/apps/link-options.html",\n\n    // Chat\n    "systems/pf1/templates/chat/roll-ext.html",\n    "systems/pf1/templates/chat/defenses.html",\n\n    // Internal Rendering Partials\n    "systems/pf1/templates/internal/spell-description.html",\n    "systems/pf1/templates/internal/consumable-description.html",\n  ];\n\n  // Load the template parts\n  return loadTemplates(templatePaths);\n};\n\n\n//# sourceURL=webpack://pf1/./module/templates.js?')},"./module/token-config.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenConfigPF", function() { return TokenConfigPF; });\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib.js */ "./module/lib.js");\n\n\nclass TokenConfigPF extends TokenConfig {\n  static get defaultOptions() {\n    const options = super.defaultOptions;\n    options.template = "systems/pf1/templates/scene/token-config.html";\n    options.height = 480;\n    return options;\n  }\n\n  async getData(...args) {\n    let result = await super.getData(...args);\n\n    result.actor = result.actor || {};\n    result.actor["vision"] = duplicate(getProperty(this.token.actor, "data.data.attributes.vision") || {});\n\n    result.version = result.version || {};\n    result.version.v052 = Object(_lib_js__WEBPACK_IMPORTED_MODULE_0__["isMinimumCoreVersion"])("0.5.2");\n\n    return result;\n  }\n\n  async _updateActorData(tokenData) {\n    const actorData = {};\n\n    actorData["data.attributes.vision.lowLight"] = tokenData.visionLL;\n    actorData["data.attributes.vision.darkvision"] = tokenData.darkvision;\n\n    if (Object.keys(actorData).length) await this.token.actor.update(actorData);\n    return super._updateActorData(tokenData);\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/token-config.js?')},"./module/token-quick-actions.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenQuickActions", function() { return TokenQuickActions; });\nclass TokenQuickActions {\n\n  static async addTop3Attacks(app, html, data) {\n\n    let actorId = data.actorId,\n      actor = game.actors.get(actorId);\n    if (data._id && game.actors.tokens[data._id] != null) {\n      actorId = data._id;\n      actor = game.actors.tokens[actorId];\n    }\n\n    if (actor == null)\n        return;\n    \n    let quickActions = \'<div class="col actions"><div class="below">\'\n    let items = actor.data.items.filter(o => (o.type === "attack" || o.type === "spell" || o.type === "feat") && getProperty(o, "data.showInQuickbar") === true).sort((a, b) => {\n      return a.data.sort - b.data.sort;\n    });\n    items.forEach(function(item) {\n      const icon = item.img;\n      let title = "";\n      if      (item.type === "attack") title = game.i18n.localize("PF1.AttackWith").format(item.name);\n      else if (item.type === "spell")  title = game.i18n.localize("PF1.AttackWithSpell").format(item.name);\n      else if (item.type === "feat")   title = game.i18n.localize("PF1.AttackWithFeat").format(item.name);\n      const type = item.type;\n      quickActions += `<div id="${type}-${item._id}" class="control-icon token-quick-action"><img src="${icon}" width="36" height="36" title="${title}"></div>`;\n    });\n    \n    html.find(\'.col.middle\').after(quickActions + \'</div></div>\');\n    \n    items.forEach(function(item) {\n      const type = item.type;\n      html.find(`#${type}-${item._id}`).click(function(event) {\n        game.pf1.rollItemMacro(item.name, {\n          itemId: item._id,\n          itemType: type,\n          actorId: actorId\n        });\n      });\n    });\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/token-quick-actions.js?')},"./module/widgets/item-picker.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Widget_ItemPicker", function() { return Widget_ItemPicker; });\nclass Widget_ItemPicker {\n  constructor(callback, {items, columns=3}={}) {\n    /**\n     * @property\n     * The HTML element that represents this widget.\n     */\n    this.element = null;\n\n    /**\n     * @property\n     * The callback to fire if an item is clicked.\n     */\n    this.callback = callback;\n\n    /**\n     * @typedef Widget_ItemPicker_Item\n     * @type {Object}\n     * @property {string} value\n     * @property {string} label\n     */\n    /**\n     * @property\n     * @type Widget_ItemPicker_Item[]\n     * The items in this widget.\n     */\n    this._items = items;\n\n    /**\n     * @property\n     * @type {number}\n     * The maximum amount of columns shown.\n     */\n    this.columns = columns;\n  }\n\n  render(parentElem) {\n    // Generate widget\n    const rootElem = $($.parseHTML(\'<div class="widget item-picker"></div>\'));\n    // Add rows\n    let rowElem;\n    for (let a = 0; a < this._items.length; a++) {\n      const item = this._items[a];\n      if (a % this.columns === 0) {\n        rowElem = $($.parseHTML(\'<div class="row"></div>\'));\n        rootElem.append(rowElem);\n      }\n\n      const itemElem = $($.parseHTML(`<div class="item" value="${item.value}">${item.label}</div>`));\n      const widthRate = Math.floor(10000 / this.columns) / 100;\n      itemElem.css("flex", `0 0 calc(${widthRate}% - 4px)`);\n      rowElem.append(itemElem);\n    }\n    \n    // Replace parent element\n    if (!(parentElem instanceof jQuery)) parentElem = $(parentElem);\n    rootElem.css("position", "absolute");\n    rootElem.css("left", `${parentElem[0].offsetLeft}px`);\n    rootElem.css("position", `${parentElem[0].offsetBottom}px`);\n    parentElem.parent().append(rootElem);\n\n    this.element = rootElem;\n\n    window.setTimeout(() => {\n      this.activateListeners(rootElem);\n    }, 10);\n  }\n\n  activateListeners(html) {\n    // Click item callback\n    html.find(".item").click(this._onClickItem.bind(this));\n\n    // Cancel widget\n    this._cancelCallback = this._onCancel.bind(this);\n    document.addEventListener("click", this._cancelCallback);\n  }\n\n  _onCancel(event) {\n    event.preventDefault();\n\n    // Don\'t cancel if this widget was clicked\n    const target = event.target;\n    let node = target;\n    if (node === this.element[0]) return;\n    while (node.parentNode) {\n      if (node === this.element[0]) return;\n      node = node.parentNode;\n    }\n\n    this.cancel();\n  }\n\n  _onClickItem(event) {\n    event.preventDefault();\n    const a = event.currentTarget;\n\n    this.callback($(a).attr("value"));\n  }\n\n  cancel() {\n    document.removeEventListener("click", this._cancelCallback);\n    this.element.remove();\n  }\n}\n\n\n//# sourceURL=webpack://pf1/./module/widgets/item-picker.js?')},"./node_modules/color-convert/conversions.js":function(module,exports,__webpack_require__){eval("/* MIT license */\nvar cssKeywords = __webpack_require__(/*! color-name */ \"./node_modules/color-name/index.js\");\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n\n\n//# sourceURL=webpack://pf1/./node_modules/color-convert/conversions.js?")},"./node_modules/color-convert/index.js":function(module,exports,__webpack_require__){eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/color-convert/conversions.js\");\nvar route = __webpack_require__(/*! ./route */ \"./node_modules/color-convert/route.js\");\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n\n\n//# sourceURL=webpack://pf1/./node_modules/color-convert/index.js?")},"./node_modules/color-convert/route.js":function(module,exports,__webpack_require__){eval("var conversions = __webpack_require__(/*! ./conversions */ \"./node_modules/color-convert/conversions.js\");\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n\n\n//# sourceURL=webpack://pf1/./node_modules/color-convert/route.js?")},"./node_modules/color-name/index.js":function(module,exports,__webpack_require__){"use strict";eval('\r\n\r\nmodule.exports = {\r\n\t"aliceblue": [240, 248, 255],\r\n\t"antiquewhite": [250, 235, 215],\r\n\t"aqua": [0, 255, 255],\r\n\t"aquamarine": [127, 255, 212],\r\n\t"azure": [240, 255, 255],\r\n\t"beige": [245, 245, 220],\r\n\t"bisque": [255, 228, 196],\r\n\t"black": [0, 0, 0],\r\n\t"blanchedalmond": [255, 235, 205],\r\n\t"blue": [0, 0, 255],\r\n\t"blueviolet": [138, 43, 226],\r\n\t"brown": [165, 42, 42],\r\n\t"burlywood": [222, 184, 135],\r\n\t"cadetblue": [95, 158, 160],\r\n\t"chartreuse": [127, 255, 0],\r\n\t"chocolate": [210, 105, 30],\r\n\t"coral": [255, 127, 80],\r\n\t"cornflowerblue": [100, 149, 237],\r\n\t"cornsilk": [255, 248, 220],\r\n\t"crimson": [220, 20, 60],\r\n\t"cyan": [0, 255, 255],\r\n\t"darkblue": [0, 0, 139],\r\n\t"darkcyan": [0, 139, 139],\r\n\t"darkgoldenrod": [184, 134, 11],\r\n\t"darkgray": [169, 169, 169],\r\n\t"darkgreen": [0, 100, 0],\r\n\t"darkgrey": [169, 169, 169],\r\n\t"darkkhaki": [189, 183, 107],\r\n\t"darkmagenta": [139, 0, 139],\r\n\t"darkolivegreen": [85, 107, 47],\r\n\t"darkorange": [255, 140, 0],\r\n\t"darkorchid": [153, 50, 204],\r\n\t"darkred": [139, 0, 0],\r\n\t"darksalmon": [233, 150, 122],\r\n\t"darkseagreen": [143, 188, 143],\r\n\t"darkslateblue": [72, 61, 139],\r\n\t"darkslategray": [47, 79, 79],\r\n\t"darkslategrey": [47, 79, 79],\r\n\t"darkturquoise": [0, 206, 209],\r\n\t"darkviolet": [148, 0, 211],\r\n\t"deeppink": [255, 20, 147],\r\n\t"deepskyblue": [0, 191, 255],\r\n\t"dimgray": [105, 105, 105],\r\n\t"dimgrey": [105, 105, 105],\r\n\t"dodgerblue": [30, 144, 255],\r\n\t"firebrick": [178, 34, 34],\r\n\t"floralwhite": [255, 250, 240],\r\n\t"forestgreen": [34, 139, 34],\r\n\t"fuchsia": [255, 0, 255],\r\n\t"gainsboro": [220, 220, 220],\r\n\t"ghostwhite": [248, 248, 255],\r\n\t"gold": [255, 215, 0],\r\n\t"goldenrod": [218, 165, 32],\r\n\t"gray": [128, 128, 128],\r\n\t"green": [0, 128, 0],\r\n\t"greenyellow": [173, 255, 47],\r\n\t"grey": [128, 128, 128],\r\n\t"honeydew": [240, 255, 240],\r\n\t"hotpink": [255, 105, 180],\r\n\t"indianred": [205, 92, 92],\r\n\t"indigo": [75, 0, 130],\r\n\t"ivory": [255, 255, 240],\r\n\t"khaki": [240, 230, 140],\r\n\t"lavender": [230, 230, 250],\r\n\t"lavenderblush": [255, 240, 245],\r\n\t"lawngreen": [124, 252, 0],\r\n\t"lemonchiffon": [255, 250, 205],\r\n\t"lightblue": [173, 216, 230],\r\n\t"lightcoral": [240, 128, 128],\r\n\t"lightcyan": [224, 255, 255],\r\n\t"lightgoldenrodyellow": [250, 250, 210],\r\n\t"lightgray": [211, 211, 211],\r\n\t"lightgreen": [144, 238, 144],\r\n\t"lightgrey": [211, 211, 211],\r\n\t"lightpink": [255, 182, 193],\r\n\t"lightsalmon": [255, 160, 122],\r\n\t"lightseagreen": [32, 178, 170],\r\n\t"lightskyblue": [135, 206, 250],\r\n\t"lightslategray": [119, 136, 153],\r\n\t"lightslategrey": [119, 136, 153],\r\n\t"lightsteelblue": [176, 196, 222],\r\n\t"lightyellow": [255, 255, 224],\r\n\t"lime": [0, 255, 0],\r\n\t"limegreen": [50, 205, 50],\r\n\t"linen": [250, 240, 230],\r\n\t"magenta": [255, 0, 255],\r\n\t"maroon": [128, 0, 0],\r\n\t"mediumaquamarine": [102, 205, 170],\r\n\t"mediumblue": [0, 0, 205],\r\n\t"mediumorchid": [186, 85, 211],\r\n\t"mediumpurple": [147, 112, 219],\r\n\t"mediumseagreen": [60, 179, 113],\r\n\t"mediumslateblue": [123, 104, 238],\r\n\t"mediumspringgreen": [0, 250, 154],\r\n\t"mediumturquoise": [72, 209, 204],\r\n\t"mediumvioletred": [199, 21, 133],\r\n\t"midnightblue": [25, 25, 112],\r\n\t"mintcream": [245, 255, 250],\r\n\t"mistyrose": [255, 228, 225],\r\n\t"moccasin": [255, 228, 181],\r\n\t"navajowhite": [255, 222, 173],\r\n\t"navy": [0, 0, 128],\r\n\t"oldlace": [253, 245, 230],\r\n\t"olive": [128, 128, 0],\r\n\t"olivedrab": [107, 142, 35],\r\n\t"orange": [255, 165, 0],\r\n\t"orangered": [255, 69, 0],\r\n\t"orchid": [218, 112, 214],\r\n\t"palegoldenrod": [238, 232, 170],\r\n\t"palegreen": [152, 251, 152],\r\n\t"paleturquoise": [175, 238, 238],\r\n\t"palevioletred": [219, 112, 147],\r\n\t"papayawhip": [255, 239, 213],\r\n\t"peachpuff": [255, 218, 185],\r\n\t"peru": [205, 133, 63],\r\n\t"pink": [255, 192, 203],\r\n\t"plum": [221, 160, 221],\r\n\t"powderblue": [176, 224, 230],\r\n\t"purple": [128, 0, 128],\r\n\t"rebeccapurple": [102, 51, 153],\r\n\t"red": [255, 0, 0],\r\n\t"rosybrown": [188, 143, 143],\r\n\t"royalblue": [65, 105, 225],\r\n\t"saddlebrown": [139, 69, 19],\r\n\t"salmon": [250, 128, 114],\r\n\t"sandybrown": [244, 164, 96],\r\n\t"seagreen": [46, 139, 87],\r\n\t"seashell": [255, 245, 238],\r\n\t"sienna": [160, 82, 45],\r\n\t"silver": [192, 192, 192],\r\n\t"skyblue": [135, 206, 235],\r\n\t"slateblue": [106, 90, 205],\r\n\t"slategray": [112, 128, 144],\r\n\t"slategrey": [112, 128, 144],\r\n\t"snow": [255, 250, 250],\r\n\t"springgreen": [0, 255, 127],\r\n\t"steelblue": [70, 130, 180],\r\n\t"tan": [210, 180, 140],\r\n\t"teal": [0, 128, 128],\r\n\t"thistle": [216, 191, 216],\r\n\t"tomato": [255, 99, 71],\r\n\t"turquoise": [64, 224, 208],\r\n\t"violet": [238, 130, 238],\r\n\t"wheat": [245, 222, 179],\r\n\t"white": [255, 255, 255],\r\n\t"whitesmoke": [245, 245, 245],\r\n\t"yellow": [255, 255, 0],\r\n\t"yellowgreen": [154, 205, 50]\r\n};\r\n\n\n//# sourceURL=webpack://pf1/./node_modules/color-name/index.js?')},"./node_modules/color-string/index.js":function(module,exports,__webpack_require__){eval("/* MIT license */\nvar colorNames = __webpack_require__(/*! color-name */ \"./node_modules/color-name/index.js\");\nvar swizzle = __webpack_require__(/*! simple-swizzle */ \"./node_modules/simple-swizzle/index.js\");\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n\n\n//# sourceURL=webpack://pf1/./node_modules/color-string/index.js?")},"./node_modules/color/index.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nvar colorString = __webpack_require__(/*! color-string */ \"./node_modules/color-string/index.js\");\nvar convert = __webpack_require__(/*! color-convert */ \"./node_modules/color-convert/index.js\");\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (obj == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n\n\n//# sourceURL=webpack://pf1/./node_modules/color/index.js?")},"./node_modules/simple-swizzle/index.js":function(module,exports,__webpack_require__){"use strict";eval('\n\nvar isArrayish = __webpack_require__(/*! is-arrayish */ "./node_modules/simple-swizzle/node_modules/is-arrayish/index.js");\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n\n\n//# sourceURL=webpack://pf1/./node_modules/simple-swizzle/index.js?')},"./node_modules/simple-swizzle/node_modules/is-arrayish/index.js":function(module,exports){eval("module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n\n\n//# sourceURL=webpack://pf1/./node_modules/simple-swizzle/node_modules/is-arrayish/index.js?")},"./pf1.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _module_config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module/config.js */ "./module/config.js");\n/* harmony import */ var _module_settings_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./module/settings.js */ "./module/settings.js");\n/* harmony import */ var _module_templates_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./module/templates.js */ "./module/templates.js");\n/* harmony import */ var _module_canvas_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./module/canvas.js */ "./module/canvas.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "measureDistances", function() { return _module_canvas_js__WEBPACK_IMPORTED_MODULE_3__["measureDistances"]; });\n\n/* harmony import */ var _module_actor_entity_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./module/actor/entity.js */ "./module/actor/entity.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActorPF", function() { return _module_actor_entity_js__WEBPACK_IMPORTED_MODULE_4__["ActorPF"]; });\n\n/* harmony import */ var _module_actor_sheets_character_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./module/actor/sheets/character.js */ "./module/actor/sheets/character.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFCharacter", function() { return _module_actor_sheets_character_js__WEBPACK_IMPORTED_MODULE_5__["ActorSheetPFCharacter"]; });\n\n/* harmony import */ var _module_actor_sheets_npc_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./module/actor/sheets/npc.js */ "./module/actor/sheets/npc.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFNPC", function() { return _module_actor_sheets_npc_js__WEBPACK_IMPORTED_MODULE_6__["ActorSheetPFNPC"]; });\n\n/* harmony import */ var _module_actor_sheets_npc_lite_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./module/actor/sheets/npc-lite.js */ "./module/actor/sheets/npc-lite.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFNPCLite", function() { return _module_actor_sheets_npc_lite_js__WEBPACK_IMPORTED_MODULE_7__["ActorSheetPFNPCLite"]; });\n\n/* harmony import */ var _module_actor_sheets_npc_loot_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./module/actor/sheets/npc-loot.js */ "./module/actor/sheets/npc-loot.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ActorSheetPFNPCLoot", function() { return _module_actor_sheets_npc_loot_js__WEBPACK_IMPORTED_MODULE_8__["ActorSheetPFNPCLoot"]; });\n\n/* harmony import */ var _module_item_entity_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./module/item/entity.js */ "./module/item/entity.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ItemPF", function() { return _module_item_entity_js__WEBPACK_IMPORTED_MODULE_9__["ItemPF"]; });\n\n/* harmony import */ var _module_item_sheets_base_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./module/item/sheets/base.js */ "./module/item/sheets/base.js");\n/* harmony import */ var _module_sidebar_compendium_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./module/sidebar/compendium.js */ "./module/sidebar/compendium.js");\n/* harmony import */ var _module_patch_core_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./module/patch-core.js */ "./module/patch-core.js");\n/* harmony import */ var _module_dice_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./module/dice.js */ "./module/dice.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DicePF", function() { return _module_dice_js__WEBPACK_IMPORTED_MODULE_13__["DicePF"]; });\n\n/* harmony import */ var _module_lib_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./module/lib.js */ "./module/lib.js");\n/* harmony import */ var _module_sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./module/sidebar/chat-message.js */ "./module/sidebar/chat-message.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChatMessagePF", function() { return _module_sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_15__["ChatMessagePF"]; });\n\n/* harmony import */ var _module_token_quick_actions_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./module/token-quick-actions.js */ "./module/token-quick-actions.js");\n/* harmony import */ var _module_socket_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./module/socket.js */ "./module/socket.js");\n/* harmony import */ var _module_chat_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./module/chat.js */ "./module/chat.js");\n/* harmony import */ var _module_migration_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./module/migration.js */ "./module/migration.js");\n/**\n * The Pathfinder 1st edition game system for Foundry Virtual Tabletop\n * Author: Furyspark\n * Software License: GNU GPLv3\n */\n\n// Import Modules\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Add String.format\nif (!String.prototype.format) {\n  String.prototype.format = function(...args) {\n    return this.replace(/{(\\d+)}/g, function(match, number) { \n      return args[number] != null\n        ? args[number]\n        : match\n      ;\n    });\n  };\n}\n\n/* -------------------------------------------- */\n/*  Foundry VTT Initialization                  */\n/* -------------------------------------------- */\n\nHooks.once("init", async function() {\n  console.log(`PF1 | Initializing Pathfinder 1 System`);\n\n  // Create a PF1 namespace within the game global\n  game.pf1 = {\n    ActorPF: _module_actor_entity_js__WEBPACK_IMPORTED_MODULE_4__["ActorPF"],\n    DicePF: _module_dice_js__WEBPACK_IMPORTED_MODULE_13__["DicePF"],\n    ItemPF: _module_item_entity_js__WEBPACK_IMPORTED_MODULE_9__["ItemPF"],\n    migrations: _module_migration_js__WEBPACK_IMPORTED_MODULE_19__,\n    rollItemMacro,\n    rollDefenses,\n    CompendiumDirectoryPF: _module_sidebar_compendium_js__WEBPACK_IMPORTED_MODULE_11__["CompendiumDirectoryPF"],\n    rollPreProcess: {\n      sizeRoll: _module_lib_js__WEBPACK_IMPORTED_MODULE_14__["sizeDie"],\n      roll: _module_lib_js__WEBPACK_IMPORTED_MODULE_14__["normalDie"],\n    },\n    migrateWorld: _module_migration_js__WEBPACK_IMPORTED_MODULE_19__["migrateWorld"],\n  };\n\n  // Record Configuration Values\n  CONFIG.PF1 = _module_config_js__WEBPACK_IMPORTED_MODULE_0__["PF1"];\n  CONFIG.Actor.entityClass = _module_actor_entity_js__WEBPACK_IMPORTED_MODULE_4__["ActorPF"];\n  CONFIG.Item.entityClass = _module_item_entity_js__WEBPACK_IMPORTED_MODULE_9__["ItemPF"];\n  CONFIG.ui.compendium = _module_sidebar_compendium_js__WEBPACK_IMPORTED_MODULE_11__["CompendiumDirectoryPF"];\n  CONFIG.ChatMessage.entityClass = _module_sidebar_chat_message_js__WEBPACK_IMPORTED_MODULE_15__["ChatMessagePF"];\n\n  // Register System Settings\n  Object(_module_settings_js__WEBPACK_IMPORTED_MODULE_1__["registerSystemSettings"])();\n\n  // Preload Handlebars Templates\n  await Object(_module_templates_js__WEBPACK_IMPORTED_MODULE_2__["preloadHandlebarsTemplates"])();\n\n  // Patch Core Functions\n  Object(_module_patch_core_js__WEBPACK_IMPORTED_MODULE_12__["PatchCore"])();\n\n  // Register sheet application classes\n  Actors.unregisterSheet("core", ActorSheet);\n  Actors.registerSheet("PF1", _module_actor_sheets_character_js__WEBPACK_IMPORTED_MODULE_5__["ActorSheetPFCharacter"], { types: ["character"], makeDefault: true });\n  Actors.registerSheet("PF1", _module_actor_sheets_npc_js__WEBPACK_IMPORTED_MODULE_6__["ActorSheetPFNPC"], { types: ["npc"], makeDefault: true });\n  Actors.registerSheet("PF1", _module_actor_sheets_npc_lite_js__WEBPACK_IMPORTED_MODULE_7__["ActorSheetPFNPCLite"], { types: ["npc"], makeDefault: false });\n  Actors.registerSheet("PF1", _module_actor_sheets_npc_loot_js__WEBPACK_IMPORTED_MODULE_8__["ActorSheetPFNPCLoot"], { types: ["npc"], makeDefault: false });\n  Items.unregisterSheet("core", ItemSheet);\n  Items.registerSheet("PF1", _module_item_sheets_base_js__WEBPACK_IMPORTED_MODULE_10__["ItemSheetPF"], { types: ["class", "feat", "spell", "consumable", "equipment", "loot", "weapon", "buff", "attack", "race"], makeDefault: true });\n\n  Object(_module_socket_js__WEBPACK_IMPORTED_MODULE_17__["initializeSocket"])();\n});\n\n\n/* -------------------------------------------- */\n/*  Foundry VTT Setup                           */\n/* -------------------------------------------- */\n\n/**\n * This function runs after game data has been requested and loaded from the servers, so entities exist\n */\nHooks.once("setup", function() {\n\n  // Localize CONFIG objects once up-front\n  const toLocalize = [\n    "abilities", "abilitiesShort", "alignments", "currencies", "distanceUnits", "itemActionTypes", "senses", "skills", "targetTypes",\n    "timePeriods", "savingThrows", "ac", "acValueLabels", "featTypes", "conditions", "lootTypes", "flyManeuverabilities",\n    "spellPreparationModes", "weaponTypes", "weaponProperties", "spellComponents", "spellSchools", "spellLevels", "conditionTypes",\n    "favouredClassBonuses", "armorProficiencies", "weaponProficiencies", "actorSizes", "abilityActivationTypes", "abilityActivationTypesPlurals",\n    "limitedUsePeriods", "equipmentTypes", "equipmentSlots", "consumableTypes", "attackTypes", "buffTypes", "buffTargets", "contextNoteTargets",\n    "healingTypes", "divineFocus", "classSavingThrows", "classBAB", "classTypes", "measureTemplateTypes", "creatureTypes",\n  ];\n\n  const doLocalize = function(obj) {\n    return Object.entries(obj).reduce((obj, e) => {\n      if (typeof e[1] === "string") obj[e[0]] = game.i18n.localize(e[1]);\n      else if (typeof e[1] === "object") obj[e[0]] = doLocalize(e[1]);\n      return obj;\n    }, {});\n  };\n  for ( let o of toLocalize ) {\n    CONFIG.PF1[o] = doLocalize(CONFIG.PF1[o]);\n  }\n});\n\n/* -------------------------------------------- */\n\n/**\n * Once the entire VTT framework is initialized, check to see if we should perform a data migration\n */\nHooks.once("ready", async function() {\n  const NEEDS_MIGRATION_VERSION = 0.63;\n  let needMigration = game.settings.get("pf1", "systemMigrationVersion") < NEEDS_MIGRATION_VERSION;\n  if (needMigration && game.user.isGM) {\n    await _module_migration_js__WEBPACK_IMPORTED_MODULE_19__["migrateWorld"]();\n  }\n\n  game.actors.entities.forEach(obj => { obj._updateChanges({ sourceOnly: true }); });\n  \n  Hooks.on(\'renderTokenHUD\', (app, html, data) => { _module_token_quick_actions_js__WEBPACK_IMPORTED_MODULE_16__["TokenQuickActions"].addTop3Attacks(app, html, data) });\n});\n\n/* -------------------------------------------- */\n/*  Canvas Initialization                       */\n/* -------------------------------------------- */\n\nHooks.on("canvasInit", function() {\n\n  // Extend Diagonal Measurement\n  canvas.grid.diagonalRule = game.settings.get("pf1", "diagonalMovement");\n  SquareGrid.prototype.measureDistances = _module_canvas_js__WEBPACK_IMPORTED_MODULE_3__["measureDistances"];\n});\n\n\n/* -------------------------------------------- */\n/*  Other Hooks                                 */\n/* -------------------------------------------- */\n\nHooks.on("renderChatMessage", (app, html, data) => {\n  // Hide roll info\n  _module_chat_js__WEBPACK_IMPORTED_MODULE_18__["hideRollInfo"](app, html, data);\n\n  // Hide GM sensitive info\n  _module_chat_js__WEBPACK_IMPORTED_MODULE_18__["hideGMSensitiveInfo"](app, html, data);\n\n  // Optionally collapse the content\n  if (game.settings.get("pf1", "autoCollapseItemCards")) html.find(".card-content").hide();\n\n  // Alter chat card title color\n  _module_chat_js__WEBPACK_IMPORTED_MODULE_18__["addChatCardTitleGradient"](app, html, data);\n});\n\nHooks.on("renderChatLog", (_, html) => _module_item_entity_js__WEBPACK_IMPORTED_MODULE_9__["ItemPF"].chatListeners(html));\nHooks.on("renderChatLog", (_, html) => _module_actor_entity_js__WEBPACK_IMPORTED_MODULE_4__["ActorPF"].chatListeners(html));\n\nHooks.on("updateOwnedItem", (actor, _, changedData) => {\n  if (!(actor instanceof Actor)) return;\n  actor.refresh();\n\n  const item = actor.getOwnedItem(changedData._id);\n  if (item == null) return;\n  actor.updateItemResources(item);\n});\nHooks.on("updateToken", (scene, sceneId, data) => {\n  const actor = game.actors.tokens[data._id];\n  if (actor != null && hasProperty(data, "actorData.items")) {\n    actor.refresh();\n\n    // Update items\n    for (let i of actor.items) {\n      actor.updateItemResources(i);\n    }\n  }\n});\n\n// Create race on actor\nHooks.on("preCreateOwnedItem", (actor, item) => {\n  if (!(actor instanceof Actor)) return;\n  if (actor.race == null) return;\n\n  if (item.type === "race") {\n    actor.race.update(item);\n    return false;\n  }\n});\n\nHooks.on("createOwnedItem", (actor) => {\n  if (!(actor instanceof Actor)) return;\n  actor.refresh();\n});\nHooks.on("deleteOwnedItem", (actor, ...args) => {\n  if (!(actor instanceof Actor)) return;\n  actor.refresh();\n});\n\n/* -------------------------------------------- */\n/*  Hotbar Macros                               */\n/* -------------------------------------------- */\n\nHooks.on("hotbarDrop", (bar, data, slot) => {\n  if ( data.type !== "Item" ) return;\n  createItemMacro(data.data, slot);\n  return false;\n});\n\n/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {Object} item     The item data\n * @param {number} slot     The hotbar slot to use\n * @returns {Promise}\n */\nasync function createItemMacro(item, slot) {\n  const actor = Object(_module_lib_js__WEBPACK_IMPORTED_MODULE_14__["getItemOwner"])(item);\n  const command = `game.pf1.rollItemMacro("${item.name}", {\\n` +\n  `  itemId: "${item._id}",\\n` +\n  `  itemType: "${item.type}",\\n` +\n  (actor != null ? `  actorId: "${actor._id}",\\n` : "") +\n  `});`;\n  let macro = game.macros.entities.find(m => (m.name === item.name) && (m.command === command));\n  if ( !macro ) {\n    macro = await Macro.create({\n      name: item.name,\n      type: "script",\n      img: item.img,\n      command: command,\n      flags: {"pf1.itemMacro": true}\n    }, {displaySheet: false});\n  }\n  game.user.assignHotbarMacro(macro, slot);\n}\n\n/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {string} itemName\n * @param {object} [options={}]\n * @return {Promise}\n */\nfunction rollItemMacro(itemName, {itemId=null, itemType=null, actorId=null}={}) {\n  let actor = Object(_module_lib_js__WEBPACK_IMPORTED_MODULE_14__["getActorFromId"])(actorId);\n  if (actor && !actor.hasPerm(game.user, "OWNER")) return ui.notifications.warn(game.i18n.localize("PF1.ErrorNoActorPermission"));\n  const item = actor ? actor.items.find(i => {\n    if (itemId != null && i._id !== itemId) return false;\n    if (itemType != null && i.type !== itemType) return false;\n    return i.name === itemName;\n  }) : null;\n  if (!item) return ui.notifications.warn(`Your controlled Actor does not have an item named ${itemName}`);\n\n  // Trigger the item roll\n  if (!game.keyboard.isDown("Control")) {\n    return item.use({skipDialog: keyboard.isDown("Shift")});\n  }\n  return item.roll();\n}\n\n/**\n * Show an actor\'s defenses.\n */\nfunction rollDefenses({actorName=null, actorId=null}={}) {\n  const actor = _module_actor_entity_js__WEBPACK_IMPORTED_MODULE_4__["ActorPF"].getActiveActor({actorName: actorName, actorId: actorId});\n  if (!actor) return ui.notifications.warn("No applicable actor found");\n\n  return actor.rollDefenses();\n};\n\n// Create Handlebars helpers\n\n/**\n * Render a MCE editor container with an optional toggle button\n */\nHandlebars.registerHelper(\'roll-editor\', function(options) {\n  // Find item and/or actor\n  const _id = (getProperty(options, "data.root.entity") || {})._id;\n  let actor = null, item = null;\n  const actors = [...Array.from(game.actors.entities), ...Array.from(game.actors.tokens)];\n  const items = [...Array.from(game.items.entities)];\n  if (_id != null) {\n    // Find actor or item on actor\n    for (let a of actors) {\n      if (a._id === _id) {\n        actor = a;\n      }\n      else {\n        if (item == null) item = a.items.find(o => o._id === _id);\n      }\n    }\n    // Find item\n    if (item == null) {\n      for (let i of items) {\n        if (i._id === _id) item = i;\n      }\n    }\n  }\n  const rollData = item != null ? item.getRollData() : (actor != null ? actor.getRollData() : {});\n  // Create editor\n  let target = options.hash[\'target\'],\n      content = options.hash[\'content\'] || "",\n      button = Boolean(options.hash[\'button\']),\n      owner = Boolean(options.hash[\'owner\']),\n      editable = Boolean(options.hash[\'editable\']);\n  if ( !target ) throw new Error("You must define the name of a target field.");\n\n  // Enrich the content\n  content = TextEditor.enrichHTML(content, {secrets: owner, entities: true, rollData: rollData});\n\n  // Construct the HTML\n  let editor = $(`<div class="editor"><div class="editor-content" data-edit="${target}">${content}</div></div>`);\n\n  // Append edit button\n  if ( button && editable ) editor.append($(\'<a class="editor-edit"><i class="fas fa-edit"></i></a>\'));\n  return new Handlebars.SafeString(editor[0].outerHTML);\n});\n\n\n\n// Export objects for being a library\n\n\n\n\n\n//# sourceURL=webpack://pf1/./pf1.js?')}})}));