{
  "_id": "yEPv1InFUHWnh1kt",
  "name": "Create Loot Sheets",
  "type": "script",
  "img": "systems/pf1/icons/items/inventory/chest-light.jpg",
  "scope": "global",
  "command": "// CONFIGURATION\n/**\n * @param {string} folder - A string of folder names, separated by '/' (slashes)\n * @param {number} defaultPermission - A constant number, to be gathered from the global object CONST.DOCUMENT_PERMISSION_LEVELS (for quick reference, you can replace 'OBSERVER' with one of the following: 'NONE', 'LIMITED' or 'OWNER'\n * @param {string} sheetType - Change this if you have a module installed for a different loot sheet type.\n */\nconst c = {\n  folder: \"Misc/Loot\",\n  defaultPermission: CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER,\n  sheetType: \"PF1.ActorSheetPFNPCLoot\",\n};\n\n// END CONFIGURATION\n\nasync function createFromTokens(tokens) {\n  let lastFolder = null;\n\n  async function createFolders() {\n    let lastIndex = 0;\n    const folders = game.folders.filter(f => f.type === \"Actor\");\n    const folderNames = c.folder.split(\"/\");\n    for (let a = 0; a < folderNames.length; a++) {\n      const curName = folderNames[a];\n      const prevName = a > 0 ? folderNames[a - 1] : null;\n\n      const f = folders.find(o => o.name === curName && (o.parent ? o.parent.name === prevName : true));\n      if (f) {\n        lastFolder = f;\n        lastIndex = a + 1;\n      }\n    }\n\n    for (let a = lastIndex; a < folderNames.length; a++) {\n      const newFolder = await Folder.create({\n        name: folderNames[a],\n        parent: lastFolder?.id ?? null,\n        type: \"Actor\",\n      });\n      lastFolder = newFolder;\n    }\n  }\n\n  // Create folder(s)\n  if (c.folder) await createFolders();\n\n  // Gather currency\n  const currency = { pp: 0, gp: 0, sp: 0, cp: 0 };\n  tokens.forEach(t => {\n    for (const cc of Object.keys(currency))\n      currency[cc] += t.actor.data.data.currency[cc];\n  });\n\n  // Create loot NPC for selected tokens\n  const name = \"(Loot) \" + tokens.map(t => t.name).join(\", \");\n\n  const lootNPC = await Actor.create({\n    name,\n    type: \"npc\",\n    img: tokens[0].actor.img,\n    folder: lastFolder?.id ?? null,\n    permission: {\n      default: c.defaultPermission,\n    },\n    flags: {\n      core: { sheetClass: c.sheetType },\n    },\n    data: { currency },\n  });\n\n  const scrubItem = (i) => {\n    delete i.data.links; // Scrap links\n    delete i._id; // scrap ID\n    delete i.data.tag; // scrap tag\n    return i;\n  }\n\n  // Gather item data\n  const itemData = tokens.reduce((cur, o) => {\n    for (const i of o.actor.items) {\n      if (!game.pf1.documents.ItemPF.isInventoryItem(i.type) || i.data.data.quantity <= 0) continue;\n      scrubItem(i.data);\n      // Check for identical data\n      const oldItem = cur.find(i2 => i2.name === i.name && i.type === i2.type);\n      let sameItem = false;\n      if (oldItem) {\n        // Ensure the objects are similar enough (quantity is the only thing allowed to differ)\n        const oldKeys = Object.keys(flattenObject(diffObject(i.data.data, oldItem.data)));\n        sameItem = (oldKeys.length == 1 && oldKeys.includes(\"quantity\")) || oldKeys.length == 0;\n      }\n\n      if (oldItem && sameItem) oldItem.data.quantity += i.data.data.quantity;\n      else cur.push(scrubItem(deepClone(i.data).toObject()));\n    }\n    return cur;\n  }, []);\n\n  // Add items\n  await lootNPC.createEmbeddedDocuments(\"Item\", itemData);\n}\n\n// Get selected tokens\nconst tokens = canvas.tokens.controlled;\nif (tokens.length) createFromTokens(tokens);\nelse ui.notifications?.warn(\"No tokens selected to convert into loot.\");",
  "sort": 0,
  "permission": {
    "default": 0
  },
  "flags": {}
}
