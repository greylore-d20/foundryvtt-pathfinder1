_id: yEPv1InFUHWnh1kt
_key: '!macros!yEPv1InFUHWnh1kt'
command: "/**\n * Create Loot Sheets\n *\n * Creates new loot sheet actors in the defined folder.\n */\n\n/**\n * CONFIGURATION\n *\n * @param {string} folder - A string of folder names, separated by '/' (slashes)\n * @param {number} defaultPermission - A constant number, to be gathered from the global object CONST.DOCUMENT_PERMISSION_LEVELS (for quick reference, you can replace 'OBSERVER' with one of the following: 'NONE', 'LIMITED' or 'OWNER'\n * @param {string} sheetType - Change this if you have a module installed for a different loot sheet type.\n */\nconst c = {\n\tfolder: 'Misc/Loot',\n\tdefaultPermission: CONST.DOCUMENT_PERMISSION_LEVELS.OBSERVER,\n\tsheetType: 'pf1.ActorSheetPFNPCLoot',\n};\n\n// END CONFIGURATION\n\nasync function createFromTokens(tokens) {\n\tlet lastFolder = null;\n\n\tasync function createFolders() {\n\t\tlet lastIndex = 0;\n\t\tconst folders = game.folders.filter(f => f.type === 'Actor');\n\t\tconst folderNames = c.folder.split('/');\n\t\tfor (let a = 0; a < folderNames.length; a++) {\n\t\t\tconst curName = folderNames[a];\n\t\t\tconst prevName = a > 0 ? folderNames[a - 1] : null;\n\n\t\t\tconst f = folders.find(o => o.name === curName && (o.parent ? o.parent.name === prevName : true));\n\t\t\tif (f) {\n\t\t\t\tlastFolder = f;\n\t\t\t\tlastIndex = a + 1;\n\t\t\t}\n\t\t}\n\n\t\tfor (let a = lastIndex; a < folderNames.length; a++) {\n\t\t\tconst newFolder = await Folder.create({\n\t\t\t\tname: folderNames[a],\n\t\t\t\tparent: lastFolder?.id ?? null,\n\t\t\t\ttype: 'Actor',\n\t\t\t});\n\t\t\tlastFolder = newFolder;\n\t\t}\n\t}\n\n\t// Create folder(s)\n\tif (c.folder) await createFolders();\n\n\t// Gather currency\n\tconst currency = { pp: 0, gp: 0, sp: 0, cp: 0 };\n\ttokens.forEach(t => {\n\t\tfor (const cc of Object.keys(currency))\n\t\t\tcurrency[cc] += t.actor.system.currency[cc];\n\t});\n\n\t// Create loot NPC for selected tokens\n\tconst name = '(Loot) ' + tokens.map(t => t.name).join(', ');\n\n\tconst lootNPC = await Actor.create({\n\t\tname,\n\t\ttype: 'npc',\n\t\timg: tokens[0].texture.src,\n\t\tfolder: lastFolder?.id ?? null,\n\t\tpermission: {\n\t\t\tdefault: c.defaultPermission,\n\t\t},\n\t\tflags: {\n\t\t\tcore: { sheetClass: c.sheetType },\n\t\t},\n\t\tsystem: { currency },\n\t});\n\n\tconst scrubItem = (i) => {\n\t\tdelete i.system.links; // Scrap links\n\t\tdelete i._id; // scrap ID\n\t\tdelete i.system.tag; // scrap tag\n\t\treturn i;\n\t};\n\n\t// Gather item data\n\tconst itemData = tokens.reduce((cur, o) => {\n\t\tfor (const i of o.actor.items) {\n\t\t\tconst itemData = i.toObject();\n\t\t\tif (!i.isPhysical || i.system.quantity <= 0) continue;\n\t\t\tscrubItem(itemData);\n\t\t\t// Check for identical data\n\t\t\tconst oldItem = cur.find(i2 => i2.name === i.name && i2.type === i.type);\n\t\t\tlet sameItem = false;\n\t\t\tif (oldItem) {\n\t\t\t\t// Ensure the objects are similar enough (quantity is the only thing allowed to differ)\n\t\t\t\tconst oldKeys = Object.keys(foundry.utils.flattenObject(foundry.utils.diffObject(itemData, oldItem)));\n\t\t\t\tsameItem = oldKeys.length == 1 && oldKeys.includes('quantity') || oldKeys.length == 0;\n\t\t\t}\n\n\t\t\tif (oldItem && sameItem) oldItem.system.quantity += i.system.quantity;\n\t\t\telse cur.push(itemData);\n\t\t}\n\t\treturn cur;\n\t}, []);\n\n\t// Add items\n\tawait lootNPC.createEmbeddedDocuments('Item', itemData);\n}\n\n// Get selected tokens\nconst tokens = canvas.tokens.controlled;\nif (tokens.length) createFromTokens(tokens);\nelse ui.notifications?.warn('No tokens selected to convert into loot.');"
img: systems/pf1/icons/items/inventory/chest-light.jpg
name: Create Loot Sheets
scope: global
sort: 0
type: script
