_id: mL9k7wUzzFbj1NmY
name: Roll Skill
type: script
scope: global
command: >-
  // CONFIGURATION

  // If one or more tokens are selected, those will be used instead of the
  listed actors

  // Leave the actorNames array empty to guess the players

  // Example actorNames: `actorNames: ["Bob", "John"],`

  const c = {
    actorNames: [],
    skills: ["per", "sen", "ste", "sur"],
  };

  // END CONFIGURATION


  const tokens = canvas.tokens.controlled;

  let actors = tokens.map(o => o.actor);

  if (!actors.length && c.actorNames.length) actors = game.actors.filter(o =>
  c.actorNames.includes(o.name));

  if (!actors.length) actors = game.actors.filter(o => o.isPC &&
  o.testUserPermission(game.user, "OWNER"));

  actors = actors.filter(o => o.testUserPermission(game.user, "OWNER"));


  if (!actors.length) ui.notifications.warn("No applicable actor(s) found");

  else {
    const _roll = async function(type) {
      let madeSound = false;
      for (let a = 0;a < actors.length; a++) {
        const o = actors[a];
        const info = o.getSkillInfo(type);
        if (!info) continue;
        await o.rollSkill(type, { event: new MouseEvent({}), skipDialog: true, noSound: madeSound, });
        madeSound = true;
      }
    };

    const buttons = c.skills.reduce((cur, s) => {
      let info;
      for (const o of actors) {
        info = o.getSkillInfo(s);
        if (info) break;
      }
      if (!info) return cur;
      const label = info.name;
      cur[s] = {
        label: label,
        callback: () => _roll(s),
      };
      return cur;
    }, {});

    const msg = `Choose a skill to roll for the following actor(s): <b>${actors.map(o => o.name).join("</b>, <b>")}</b>`;

    new Dialog({
      title: "Roll saving throw",
      content: `<p>${msg}</p>`,
      buttons: buttons,
    }).render(true);
  }
author: T9i9xVjdkHeFZC72
img: systems/pf1/icons/feats/skill-focus.jpg
sort: 0
_key: '!macros!mL9k7wUzzFbj1NmY'

